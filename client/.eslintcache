[{"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\index.js":"1","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\serviceWorker.js":"2","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\App.js":"3","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\index.js":"4","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\routes\\allRoutes.js":"5","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\routes\\middleware\\Authmiddleware.js":"6","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\NonAuthLayout.js":"7","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\index.js":"8","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\index.js":"9","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\reducers.js":"10","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\sagas.js":"11","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Footer.js":"12","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Sidebar.js":"13","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Header.js":"14","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-starter.js":"15","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-maintenance.js":"16","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\User\\index.js":"17","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-comingsoon.js":"18","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-timeline.js":"19","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-faqs.js":"20","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-404.js":"21","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-500.js":"22","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiCarousel.js":"23","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiAlert.js":"24","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiButtons.js":"25","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-pricing.js":"26","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\index.js":"27","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiCards.js":"28","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiGrid.js":"29","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiDropdown.js":"30","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiLightbox.js":"31","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiGeneral.js":"32","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiImages.js":"33","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiProgressbar.js":"34","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiColors.js":"35","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiModal.js":"36","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiSweetAlert.js":"37","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiTypography.js":"38","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiTabsAccordions.js":"39","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiVideo.js":"40","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiRangeSlider.js":"41","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiRating.js":"42","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiSessionTimeout.js":"43","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\ui-image-cropper.js":"44","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\ui-notifications.js":"45","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormRepeater.js":"46","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormEditors.js":"47","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\BasicElements.js":"48","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormLayouts.js":"49","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormUpload.js":"50","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormAdvanced.js":"51","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormMask.js":"52","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormWizard.js":"53","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormXeditable.js":"54","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormValidations.js":"55","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\BasicTables.js":"56","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\Apexcharts.js":"57","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\ResponsiveTables.js":"58","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\EditableTables.js":"59","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\DatatableTables.js":"60","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\charts-knob.js":"61","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\EChart.js":"62","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\SparklineChart.js":"63","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\ChartjsChart.js":"64","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconDripicons.js":"65","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsGoogle.js":"66","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconBoxicons.js":"67","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\actions.js":"68","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsVector.js":"69","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconUnicons.js":"70","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconMaterialdesign.js":"71","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconFontawesome.js":"72","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\Rightbar.js":"73","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\saga.js":"74","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\saga.js":"75","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\reducer.js":"76","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\saga.js":"77","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\saga.js":"78","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\saga.js":"79","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\saga.js":"80","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Master_Setting\\index.js":"81","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Privilage\\index.js":"82","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Company\\index.js":"83","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Manage Branch\\index.js":"84","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Rules\\index.js":"85","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\actions.js":"86","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\actions.js":"87","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\actions.js":"88","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\actions.js":"89","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\actions.js":"90","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\actions.js":"91","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\Vectormap.js":"92","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\Common\\Breadcrumb.js":"93","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\actions.js":"94","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\actions.js":"95","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\actions.js":"96","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\actions.js":"97","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\actions.js":"98","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\actions.js":"99","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actions.js":"100","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\actions.js":"101","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\actions.js":"102","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\piechart.js":"103","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\actions.js":"104","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\dountchart.js":"105","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\polarchart.js":"106","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\barchart.js":"107","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\radarchart.js":"108","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\scatterchart.js":"109","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\linechart.js":"110","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\bubblechart.js":"111","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\candlestickchart.js":"112","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\doughnutchart.js":"113","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\piechart.js":"114","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linechart.js":"115","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\gaugechart.js":"116","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\knob\\knob.js":"117","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linebarchart.js":"118","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\actionTypes.js":"119","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\actionTypes.js":"120","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\backend_helper.js":"121","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\actionTypes.js":"122","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\actionTypes.js":"123","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\actionTypes.js":"124","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\actionTypes.js":"125","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\actionTypes.js":"126","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\actionTypes.js":"127","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\actionTypes.js":"128","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\actionTypes.js":"129","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\actionTypes.js":"130","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\actionTypes.js":"131","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\actionTypes.js":"132","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\actionTypes.js":"133","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\actionTypes.js":"134","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actionTypes.js":"135","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\url_helper.js":"136","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\api_helper.js":"137","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\jwt-token-access\\accessToken.js":"138","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\PieChart.js":"139","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\RadialChart.js":"140","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\LineColumnArea.js":"141","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dountchart.js":"142","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\apaexlinecolumn.js":"143","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\barchart.js":"144","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\ColumnWithDataLabels.js":"145","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dashedLine.js":"146","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\SplineArea.js":"147","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\chartapex.js":"148","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\latest-transaction.js":"149","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\socialsource.js":"150","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\recent-activity.js":"151","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\topuser.js":"152","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\topselling-product.js":"153","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\salesanalytics-chart.js":"154","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\mini-widget.js":"155","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\card-pricing.js":"156","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidedark.js":"157","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slideindividual.js":"158","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithfade.js":"159","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithindicator.js":"160","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcaption.js":"161","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slide.js":"162","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcontrol.js":"163","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SidebarContent.js":"164","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js":"165","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js":"166","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\saga.js":"167","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\saga.js":"168","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\saga.js":"169","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\saga.js":"170","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\saga.js":"171","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\saga.js":"172","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\saga.js":"173","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\saga.js":"174","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\saga.js":"175","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\saga.js":"176","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\reducer.js":"177","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\reducer.js":"178","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\reducer.js":"179","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\reducer.js":"180","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\reducer.js":"181","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\reducer.js":"182","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\reducer.js":"183","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\reducer.js":"184","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\reducer.js":"185","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\reducer.js":"186","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\reducer.js":"187","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\reducer.js":"188","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\reducer.js":"189","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\reducer.js":"190","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\reducer.js":"191","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\MegaMenu\\MegaMenu.jsx":"192","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Footer.js":"193","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Header.js":"194","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Navbar.js":"195","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SideBarMenu.js":"196","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SideBardata.js":"197","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\firebase_helper.js":"198","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsLeaflet.js":"199","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Register.js":"200","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Login.js":"201","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Logout.js":"202","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\user-profile.js":"203","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\ForgetPassword.js":"204","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Recoverpw.js":"205","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\auth-lock-screen.js":"206","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Login.js":"207","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Register.js":"208","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Receipt\\index.js":"209","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Invoice\\AutoInvoice\\index.js":"210","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Invoice\\ViewInvoice\\index.js":"211","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Package\\AddTariff\\index.js":"212","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Package\\AddWaste\\index.js":"213","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\WastePlot\\index.js":"214","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\GroupWasteSpot\\index.js":"215","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\DriverDrop\\index.js":"216","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\HelperCollection\\index.js":"217","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\DriverCollection\\index.js":"218","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\HelperDrop\\index.js":"219","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\CreditDebit\\index.js":"220","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\FundTransfer\\index.js":"221","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\IncomeExpenses\\index.js":"222","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\AccountDetails\\index.js":"223","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\Chart\\index.js":"224","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\TransactionLog\\index.js":"225","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\Account-Type\\index.js":"226","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\index.js":"227","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\viewTariff\\index.js":"228","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\AddCustomer\\index.js":"229","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Group\\index.js":"230","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Localbody\\index.js":"231","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\District\\index.js":"232","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Ward\\index.js":"233","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js":"234","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\LayerGroup.js":"235","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapLayerControl.js":"236","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapMarkerCustomIcons.js":"237","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapVectorLayers.js":"238","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\SimpleMap.js":"239","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapWithPopup.js":"240","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\i18n.js":"241","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\common\\languages.js":"242","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\CustomerCategory\\index.js":"243","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\actions.js":"244","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\actionTypes.js":"245","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\reducer.js":"246","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\saga.js":"247","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\Document.js":"248","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\actions.js":"249","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\actionTypes.js":"250","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\reducer.js":"251","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\saga.js":"252","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\actions.js":"253","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\actionTypes.js":"254","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\reducer.js":"255","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\saga.js":"256"},{"size":473,"mtime":1637045210915,"results":"257","hashOfConfig":"258"},{"size":5456,"mtime":1637045211017,"results":"259","hashOfConfig":"258"},{"size":2303,"mtime":1637045210725,"results":"260","hashOfConfig":"258"},{"size":468,"mtime":1637045211030,"results":"261","hashOfConfig":"258"},{"size":11655,"mtime":1637268733856,"results":"262","hashOfConfig":"258"},{"size":808,"mtime":1637045211017,"results":"263","hashOfConfig":"258"},{"size":792,"mtime":1637045210905,"results":"264","hashOfConfig":"258"},{"size":3141,"mtime":1637045210904,"results":"265","hashOfConfig":"258"},{"size":3777,"mtime":1637045210911,"results":"266","hashOfConfig":"258"},{"size":1351,"mtime":1637598664910,"results":"267","hashOfConfig":"258"},{"size":1498,"mtime":1637598706080,"results":"268","hashOfConfig":"258"},{"size":945,"mtime":1637045210905,"results":"269","hashOfConfig":"258"},{"size":2294,"mtime":1637045210907,"results":"270","hashOfConfig":"258"},{"size":15617,"mtime":1637268733852,"results":"271","hashOfConfig":"258"},{"size":492,"mtime":1637045211013,"results":"272","hashOfConfig":"258"},{"size":4614,"mtime":1637045211013,"results":"273","hashOfConfig":"258"},{"size":21541,"mtime":1637045211009,"results":"274","hashOfConfig":"258"},{"size":3676,"mtime":1637045211011,"results":"275","hashOfConfig":"258"},{"size":8776,"mtime":1637045211013,"results":"276","hashOfConfig":"258"},{"size":16197,"mtime":1637045211012,"results":"277","hashOfConfig":"258"},{"size":1527,"mtime":1637045211011,"results":"278","hashOfConfig":"258"},{"size":1523,"mtime":1637045211011,"results":"279","hashOfConfig":"258"},{"size":4660,"mtime":1637045211003,"results":"280","hashOfConfig":"258"},{"size":14899,"mtime":1637045211002,"results":"281","hashOfConfig":"258"},{"size":29928,"mtime":1637045211003,"results":"282","hashOfConfig":"258"},{"size":2680,"mtime":1637045211013,"results":"283","hashOfConfig":"258"},{"size":6161,"mtime":1637045210962,"results":"284","hashOfConfig":"258"},{"size":26488,"mtime":1637045211003,"results":"285","hashOfConfig":"258"},{"size":5125,"mtime":1637045211005,"results":"286","hashOfConfig":"258"},{"size":30800,"mtime":1637045211004,"results":"287","hashOfConfig":"258"},{"size":16871,"mtime":1637045211005,"results":"288","hashOfConfig":"258"},{"size":26819,"mtime":1637045211004,"results":"289","hashOfConfig":"258"},{"size":6403,"mtime":1637045211005,"results":"290","hashOfConfig":"258"},{"size":8780,"mtime":1637045211006,"results":"291","hashOfConfig":"258"},{"size":10519,"mtime":1637045211004,"results":"292","hashOfConfig":"258"},{"size":36527,"mtime":1637045211006,"results":"293","hashOfConfig":"258"},{"size":21075,"mtime":1637045211007,"results":"294","hashOfConfig":"258"},{"size":12549,"mtime":1637045211008,"results":"295","hashOfConfig":"258"},{"size":54090,"mtime":1637045211008,"results":"296","hashOfConfig":"258"},{"size":3290,"mtime":1637045211008,"results":"297","hashOfConfig":"258"},{"size":8305,"mtime":1637045211006,"results":"298","hashOfConfig":"258"},{"size":14980,"mtime":1637045211007,"results":"299","hashOfConfig":"258"},{"size":4019,"mtime":1637045211007,"results":"300","hashOfConfig":"258"},{"size":33540,"mtime":1637045211009,"results":"301","hashOfConfig":"258"},{"size":25442,"mtime":1637045211009,"results":"302","hashOfConfig":"258"},{"size":13028,"mtime":1637045210969,"results":"303","hashOfConfig":"258"},{"size":1507,"mtime":1637045210968,"results":"304","hashOfConfig":"258"},{"size":30672,"mtime":1637045210967,"results":"305","hashOfConfig":"258"},{"size":14116,"mtime":1637045210968,"results":"306","hashOfConfig":"258"},{"size":4821,"mtime":1637045210970,"results":"307","hashOfConfig":"258"},{"size":39736,"mtime":1637045210968,"results":"308","hashOfConfig":"258"},{"size":6441,"mtime":1637045210969,"results":"309","hashOfConfig":"258"},{"size":35838,"mtime":1637045210970,"results":"310","hashOfConfig":"258"},{"size":6331,"mtime":1637045210973,"results":"311","hashOfConfig":"258"},{"size":26019,"mtime":1637045210970,"results":"312","hashOfConfig":"258"},{"size":24922,"mtime":1637045210998,"results":"313","hashOfConfig":"258"},{"size":3953,"mtime":1637045210956,"results":"314","hashOfConfig":"258"},{"size":24944,"mtime":1637045211000,"results":"315","hashOfConfig":"258"},{"size":2149,"mtime":1637045210999,"results":"316","hashOfConfig":"258"},{"size":13117,"mtime":1637045210999,"results":"317","hashOfConfig":"258"},{"size":7424,"mtime":1637045210959,"results":"318","hashOfConfig":"258"},{"size":3708,"mtime":1637045210957,"results":"319","hashOfConfig":"258"},{"size":7013,"mtime":1637045210957,"results":"320","hashOfConfig":"258"},{"size":2473,"mtime":1637045210956,"results":"321","hashOfConfig":"258"},{"size":34408,"mtime":1637045210975,"results":"322","hashOfConfig":"258"},{"size":7750,"mtime":1637045210987,"results":"323","hashOfConfig":"258"},{"size":221905,"mtime":1637045210974,"results":"324","hashOfConfig":"258"},{"size":753,"mtime":1637598614973,"results":"325","hashOfConfig":"258"},{"size":3054,"mtime":1637045210988,"results":"326","hashOfConfig":"258"},{"size":208199,"mtime":1637045210981,"results":"327","hashOfConfig":"258"},{"size":367746,"mtime":1637045210980,"results":"328","hashOfConfig":"258"},{"size":576039,"mtime":1637045210977,"results":"329","hashOfConfig":"258"},{"size":13759,"mtime":1637045210901,"results":"330","hashOfConfig":"258"},{"size":649,"mtime":1637045211033,"results":"331","hashOfConfig":"258"},{"size":3084,"mtime":1637092862119,"results":"332","hashOfConfig":"258"},{"size":5617,"mtime":1637092862118,"results":"333","hashOfConfig":"258"},{"size":2425,"mtime":1637045211029,"results":"334","hashOfConfig":"258"},{"size":642,"mtime":1637045211026,"results":"335","hashOfConfig":"258"},{"size":2637,"mtime":1637045211032,"results":"336","hashOfConfig":"258"},{"size":2682,"mtime":1637045211036,"results":"337","hashOfConfig":"258"},{"size":14581,"mtime":1637045210993,"results":"338","hashOfConfig":"258"},{"size":6837,"mtime":1637045210994,"results":"339","hashOfConfig":"258"},{"size":25767,"mtime":1637045210990,"results":"340","hashOfConfig":"258"},{"size":29918,"mtime":1637045210991,"results":"341","hashOfConfig":"258"},{"size":68093,"mtime":1637045210995,"results":"342","hashOfConfig":"258"},{"size":2411,"mtime":1637092862118,"results":"343","hashOfConfig":"258"},{"size":2005,"mtime":1637045211031,"results":"344","hashOfConfig":"258"},{"size":1915,"mtime":1637045211029,"results":"345","hashOfConfig":"258"},{"size":412,"mtime":1637045211026,"results":"346","hashOfConfig":"258"},{"size":2076,"mtime":1637045211036,"results":"347","hashOfConfig":"258"},{"size":433,"mtime":1637045211032,"results":"348","hashOfConfig":"258"},{"size":1105,"mtime":1637045210988,"results":"349","hashOfConfig":"258"},{"size":951,"mtime":1637045210900,"results":"350","hashOfConfig":"258"},{"size":1867,"mtime":1637045211028,"results":"351","hashOfConfig":"258"},{"size":975,"mtime":1637045211025,"results":"352","hashOfConfig":"258"},{"size":469,"mtime":1637045211033,"results":"353","hashOfConfig":"258"},{"size":479,"mtime":1637045211024,"results":"354","hashOfConfig":"258"},{"size":1215,"mtime":1637045211030,"results":"355","hashOfConfig":"258"},{"size":1683,"mtime":1637045211035,"results":"356","hashOfConfig":"258"},{"size":515,"mtime":1637045211019,"results":"357","hashOfConfig":"258"},{"size":522,"mtime":1637045211021,"results":"358","hashOfConfig":"258"},{"size":1110,"mtime":1637045211020,"results":"359","hashOfConfig":"258"},{"size":453,"mtime":1637045210937,"results":"360","hashOfConfig":"258"},{"size":465,"mtime":1637045211022,"results":"361","hashOfConfig":"258"},{"size":467,"mtime":1637045210936,"results":"362","hashOfConfig":"258"},{"size":502,"mtime":1637045210937,"results":"363","hashOfConfig":"258"},{"size":797,"mtime":1637045210936,"results":"364","hashOfConfig":"258"},{"size":1072,"mtime":1637045210938,"results":"365","hashOfConfig":"258"},{"size":1427,"mtime":1637045210940,"results":"366","hashOfConfig":"258"},{"size":1971,"mtime":1637045210937,"results":"367","hashOfConfig":"258"},{"size":5083,"mtime":1637045210938,"results":"368","hashOfConfig":"258"},{"size":1543,"mtime":1637045210939,"results":"369","hashOfConfig":"258"},{"size":1667,"mtime":1637045210939,"results":"370","hashOfConfig":"258"},{"size":1418,"mtime":1637045210940,"results":"371","hashOfConfig":"258"},{"size":1271,"mtime":1637045210940,"results":"372","hashOfConfig":"258"},{"size":1670,"mtime":1637045210939,"results":"373","hashOfConfig":"258"},{"size":11156,"mtime":1637045210941,"results":"374","hashOfConfig":"258"},{"size":2705,"mtime":1637045210939,"results":"375","hashOfConfig":"258"},{"size":185,"mtime":1637045211032,"results":"376","hashOfConfig":"258"},{"size":1110,"mtime":1637092862117,"results":"377","hashOfConfig":"258"},{"size":4979,"mtime":1637598340688,"results":"378","hashOfConfig":"258"},{"size":910,"mtime":1637045211031,"results":"379","hashOfConfig":"258"},{"size":773,"mtime":1637045211029,"results":"380","hashOfConfig":"258"},{"size":184,"mtime":1637045211026,"results":"381","hashOfConfig":"258"},{"size":939,"mtime":1637045211035,"results":"382","hashOfConfig":"258"},{"size":748,"mtime":1637045211034,"results":"383","hashOfConfig":"258"},{"size":567,"mtime":1637045211030,"results":"384","hashOfConfig":"258"},{"size":222,"mtime":1637045211023,"results":"385","hashOfConfig":"258"},{"size":234,"mtime":1637045211033,"results":"386","hashOfConfig":"258"},{"size":480,"mtime":1637045211025,"results":"387","hashOfConfig":"258"},{"size":874,"mtime":1637045211028,"results":"388","hashOfConfig":"258"},{"size":175,"mtime":1637045211022,"results":"389","hashOfConfig":"258"},{"size":439,"mtime":1637045211020,"results":"390","hashOfConfig":"258"},{"size":195,"mtime":1637045211021,"results":"391","hashOfConfig":"258"},{"size":178,"mtime":1637045211018,"results":"392","hashOfConfig":"258"},{"size":2697,"mtime":1637598268115,"results":"393","hashOfConfig":"258"},{"size":1488,"mtime":1637092862112,"results":"394","hashOfConfig":"258"},{"size":185,"mtime":1637045210914,"results":"395","hashOfConfig":"258"},{"size":847,"mtime":1637045210927,"results":"396","hashOfConfig":"258"},{"size":1056,"mtime":1637045210927,"results":"397","hashOfConfig":"258"},{"size":2244,"mtime":1637045210926,"results":"398","hashOfConfig":"258"},{"size":893,"mtime":1637045210931,"results":"399","hashOfConfig":"258"},{"size":1687,"mtime":1637045210928,"results":"400","hashOfConfig":"258"},{"size":914,"mtime":1637045210930,"results":"401","hashOfConfig":"258"},{"size":2448,"mtime":1637045210925,"results":"402","hashOfConfig":"258"},{"size":1747,"mtime":1637045210931,"results":"403","hashOfConfig":"258"},{"size":1195,"mtime":1637045210928,"results":"404","hashOfConfig":"258"},{"size":1666,"mtime":1637045210931,"results":"405","hashOfConfig":"258"},{"size":12539,"mtime":1637045210962,"results":"406","hashOfConfig":"258"},{"size":4305,"mtime":1637045210963,"results":"407","hashOfConfig":"258"},{"size":3770,"mtime":1637045210963,"results":"408","hashOfConfig":"258"},{"size":8791,"mtime":1637045210964,"results":"409","hashOfConfig":"258"},{"size":2978,"mtime":1637045210964,"results":"410","hashOfConfig":"258"},{"size":4890,"mtime":1637045210963,"results":"411","hashOfConfig":"258"},{"size":1420,"mtime":1637045210963,"results":"412","hashOfConfig":"258"},{"size":1626,"mtime":1637045211010,"results":"413","hashOfConfig":"258"},{"size":3407,"mtime":1637045211001,"results":"414","hashOfConfig":"258"},{"size":2718,"mtime":1637045211001,"results":"415","hashOfConfig":"258"},{"size":2799,"mtime":1637045211002,"results":"416","hashOfConfig":"258"},{"size":2786,"mtime":1637045211002,"results":"417","hashOfConfig":"258"},{"size":3104,"mtime":1637045211001,"results":"418","hashOfConfig":"258"},{"size":2253,"mtime":1637045211000,"results":"419","hashOfConfig":"258"},{"size":2592,"mtime":1637045211002,"results":"420","hashOfConfig":"258"},{"size":1597,"mtime":1637045210909,"results":"421","hashOfConfig":"258"},{"size":3375,"mtime":1637045210902,"results":"422","hashOfConfig":"258"},{"size":6064,"mtime":1637045210902,"results":"423","hashOfConfig":"258"},{"size":2474,"mtime":1637045211028,"results":"424","hashOfConfig":"258"},{"size":720,"mtime":1637045211024,"results":"425","hashOfConfig":"258"},{"size":1150,"mtime":1637045211026,"results":"426","hashOfConfig":"258"},{"size":4999,"mtime":1637045211031,"results":"427","hashOfConfig":"258"},{"size":2259,"mtime":1637045211035,"results":"428","hashOfConfig":"258"},{"size":694,"mtime":1637045211034,"results":"429","hashOfConfig":"258"},{"size":1568,"mtime":1637045211021,"results":"430","hashOfConfig":"258"},{"size":2084,"mtime":1637045211019,"results":"431","hashOfConfig":"258"},{"size":1629,"mtime":1637045211020,"results":"432","hashOfConfig":"258"},{"size":1630,"mtime":1637045211022,"results":"433","hashOfConfig":"258"},{"size":740,"mtime":1637045211026,"results":"434","hashOfConfig":"258"},{"size":4165,"mtime":1637045211031,"results":"435","hashOfConfig":"258"},{"size":4088,"mtime":1637045211029,"results":"436","hashOfConfig":"258"},{"size":3701,"mtime":1637045211036,"results":"437","hashOfConfig":"258"},{"size":3649,"mtime":1637045211028,"results":"438","hashOfConfig":"258"},{"size":601,"mtime":1637045211024,"results":"439","hashOfConfig":"258"},{"size":932,"mtime":1637045211026,"results":"440","hashOfConfig":"258"},{"size":561,"mtime":1637045211033,"results":"441","hashOfConfig":"258"},{"size":3311,"mtime":1637045211035,"results":"442","hashOfConfig":"258"},{"size":505,"mtime":1637045211032,"results":"443","hashOfConfig":"258"},{"size":677,"mtime":1637045211021,"results":"444","hashOfConfig":"258"},{"size":771,"mtime":1637045211019,"results":"445","hashOfConfig":"258"},{"size":950,"mtime":1637045211022,"results":"446","hashOfConfig":"258"},{"size":1324,"mtime":1637045211020,"results":"447","hashOfConfig":"258"},{"size":1700,"mtime":1637045211030,"results":"448","hashOfConfig":"258"},{"size":886,"mtime":1637045210905,"results":"449","hashOfConfig":"258"},{"size":588,"mtime":1637045210903,"results":"450","hashOfConfig":"258"},{"size":9543,"mtime":1637045210903,"results":"451","hashOfConfig":"258"},{"size":27417,"mtime":1637045210904,"results":"452","hashOfConfig":"258"},{"size":2562,"mtime":1637045210907,"results":"453","hashOfConfig":"258"},{"size":511,"mtime":1637045210907,"results":"454","hashOfConfig":"258"},{"size":5156,"mtime":1637045210913,"results":"455","hashOfConfig":"258"},{"size":3286,"mtime":1637045210987,"results":"456","hashOfConfig":"258"},{"size":7423,"mtime":1637045210952,"results":"457","hashOfConfig":"258"},{"size":7287,"mtime":1637045210951,"results":"458","hashOfConfig":"258"},{"size":576,"mtime":1637045210952,"results":"459","hashOfConfig":"258"},{"size":4119,"mtime":1637045210952,"results":"460","hashOfConfig":"258"},{"size":6512,"mtime":1637045210950,"results":"461","hashOfConfig":"258"},{"size":3389,"mtime":1637045210954,"results":"462","hashOfConfig":"258"},{"size":5087,"mtime":1637045210955,"results":"463","hashOfConfig":"258"},{"size":5979,"mtime":1637045210954,"results":"464","hashOfConfig":"258"},{"size":5973,"mtime":1637045210955,"results":"465","hashOfConfig":"258"},{"size":15682,"mtime":1637045210998,"results":"466","hashOfConfig":"258"},{"size":13485,"mtime":1637045210981,"results":"467","hashOfConfig":"258"},{"size":14785,"mtime":1637045210982,"results":"468","hashOfConfig":"258"},{"size":22035,"mtime":1637045210996,"results":"469","hashOfConfig":"258"},{"size":28658,"mtime":1637506585398,"results":"470","hashOfConfig":"258"},{"size":14238,"mtime":1637045211016,"results":"471","hashOfConfig":"258"},{"size":14243,"mtime":1637045211015,"results":"472","hashOfConfig":"258"},{"size":11853,"mtime":1637045211014,"results":"473","hashOfConfig":"258"},{"size":15703,"mtime":1637045211015,"results":"474","hashOfConfig":"258"},{"size":11877,"mtime":1637045211014,"results":"475","hashOfConfig":"258"},{"size":11853,"mtime":1637045211015,"results":"476","hashOfConfig":"258"},{"size":15166,"mtime":1637045210923,"results":"477","hashOfConfig":"258"},{"size":15276,"mtime":1637045210923,"results":"478","hashOfConfig":"258"},{"size":24050,"mtime":1637045210924,"results":"479","hashOfConfig":"258"},{"size":13120,"mtime":1637045210921,"results":"480","hashOfConfig":"258"},{"size":14262,"mtime":1637045210922,"results":"481","hashOfConfig":"258"},{"size":13069,"mtime":1637045210924,"results":"482","hashOfConfig":"258"},{"size":12421,"mtime":1637045210920,"results":"483","hashOfConfig":"258"},{"size":16119,"mtime":1637564728468,"results":"484","hashOfConfig":"258"},{"size":22282,"mtime":1637694947614,"results":"485","hashOfConfig":"258"},{"size":41593,"mtime":1637045210959,"results":"486","hashOfConfig":"258"},{"size":18471,"mtime":1637092862115,"results":"487","hashOfConfig":"258"},{"size":16183,"mtime":1637078504710,"results":"488","hashOfConfig":"258"},{"size":11207,"mtime":1637045210983,"results":"489","hashOfConfig":"258"},{"size":13800,"mtime":1637268733854,"results":"490","hashOfConfig":"258"},{"size":2066,"mtime":1637045210901,"results":"491","hashOfConfig":"258"},{"size":1922,"mtime":1637045210985,"results":"492","hashOfConfig":"258"},{"size":2942,"mtime":1637045210986,"results":"493","hashOfConfig":"258"},{"size":1638,"mtime":1637045210986,"results":"494","hashOfConfig":"258"},{"size":2258,"mtime":1637045210986,"results":"495","hashOfConfig":"258"},{"size":1143,"mtime":1637045210987,"results":"496","hashOfConfig":"258"},{"size":1199,"mtime":1637045210987,"results":"497","hashOfConfig":"258"},{"size":1284,"mtime":1637045210915,"results":"498","hashOfConfig":"258"},{"size":611,"mtime":1637045210900,"results":"499","hashOfConfig":"258"},{"size":11350,"mtime":1637266729691,"results":"500","hashOfConfig":"258"},{"size":2299,"mtime":1637247438941,"results":"501","hashOfConfig":"258"},{"size":1009,"mtime":1637245994162,"results":"502","hashOfConfig":"258"},{"size":3966,"mtime":1637252212574,"results":"503","hashOfConfig":"258"},{"size":2369,"mtime":1637252285493,"results":"504","hashOfConfig":"258"},{"size":677,"mtime":1637362203669,"results":"505","hashOfConfig":"258"},{"size":743,"mtime":1637560129522,"results":"506","hashOfConfig":"258"},{"size":298,"mtime":1637521357583,"results":"507","hashOfConfig":"258"},{"size":1359,"mtime":1637562072599,"results":"508","hashOfConfig":"258"},{"size":942,"mtime":1637523350315,"results":"509","hashOfConfig":"258"},{"size":386,"mtime":1637597824701,"results":"510","hashOfConfig":"258"},{"size":141,"mtime":1637597585400,"results":"511","hashOfConfig":"258"},{"size":622,"mtime":1637598074386,"results":"512","hashOfConfig":"258"},{"size":579,"mtime":1637598958856,"results":"513","hashOfConfig":"258"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"taz3sf",{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"540"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":2,"source":"552"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"668"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689"},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"774"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"869"},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"874"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"890"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"893"},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916"},{"filePath":"917","messages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"942"},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"945","messages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"951"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956"},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"959"},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"962","messages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"964"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"977"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"980"},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"983"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1019"},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1022"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1028"},{"filePath":"1029","messages":"1030","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1031"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1034"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1040"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1048","messages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1058","messages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1071"},{"filePath":"1072","messages":"1073","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1074"},{"filePath":"1075","messages":"1076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1085"},{"filePath":"1086","messages":"1087","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1088","messages":"1089","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1090","messages":"1091","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1094"},"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\index.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\serviceWorker.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\App.js",["1095"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport { Switch, Redirect, BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Import Routes all\r\nimport { userRoutes, authRoutes } from \"./routes/allRoutes\";\r\n\r\n// Import all middleware\r\nimport Authmiddleware from \"./routes/middleware/Authmiddleware\";\r\n\r\n// layouts Format\r\nimport VerticalLayout from \"./components/VerticalLayout/\";\r\nimport HorizontalLayout from \"./components/HorizontalLayout/\";\r\nimport NonAuthLayout from \"./components/NonAuthLayout\";\r\n\r\n// Import scss\r\nimport \"./assets/scss/theme.scss\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n// import fakeBackend from \"./helpers/AuthType/fakeBackend\";\r\n\r\n// Activating fake backend\r\n// fakeBackend()\r\n\r\nconst App = (props) => {\r\n  function getLayout() {\r\n    let layoutCls = VerticalLayout;\r\n\r\n    switch (props.layout.layoutType) {\r\n      case \"horizontal\":\r\n        layoutCls = HorizontalLayout;\r\n        break;\r\n      default:\r\n        layoutCls = VerticalLayout;\r\n        break;\r\n    }\r\n    return layoutCls;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cookies.get(\"rememberMe\") === \"false\") {\r\n      localStorage.removeItem(\"authUser\");\r\n      <Redirect to={{ pathname: \"/login\", state: { from: props.location } }} />;\r\n    }\r\n  }, []);\r\n\r\n  const Layout = getLayout();\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          {authRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={NonAuthLayout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={false}\r\n            />\r\n          ))}\r\n\r\n          {userRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={Layout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={true}\r\n              exact\r\n            />\r\n          ))}\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  layout: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    layout: state.Layout,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\index.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\routes\\allRoutes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\routes\\middleware\\Authmiddleware.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\NonAuthLayout.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\index.js",["1096"],"import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport {\r\n  changeLayout,\r\n  changeTopbarTheme,\r\n  changeLayoutWidth,\r\n} from \"../../store/actions\";\r\n\r\n// Other Layout related Component\r\nimport Navbar from \"./Navbar\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Rightbar from \"../CommonForBoth/Rightbar\";\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isMenuOpened: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.isPreloader === true) {\r\n      document.getElementById(\"preloader\").style.display = \"block\";\r\n      document.getElementById(\"status\").style.display = \"block\";\r\n\r\n      setTimeout(function () {\r\n        document.getElementById(\"preloader\").style.display = \"none\";\r\n        document.getElementById(\"status\").style.display = \"none\";\r\n      }, 2500);\r\n    } else {\r\n      document.getElementById(\"preloader\").style.display = \"none\";\r\n      document.getElementById(\"status\").style.display = \"none\";\r\n    }\r\n\r\n    // Scrollto 0,0\r\n    window.scrollTo(0, 0);\r\n\r\n    const title = this.props.location.pathname;\r\n    let currentage = title.charAt(1).toUpperCase() + title.slice(2);\r\n\r\n    // document.title =\r\n    //   currentage + \" | Cococa\"\r\n\r\n    this.props.changeLayout(\"horizontal\");\r\n    if (this.props.topbarTheme) {\r\n      this.props.changeTopbarTheme(this.props.topbarTheme);\r\n    }\r\n    if (this.props.layoutWidth) {\r\n      this.props.changeLayoutWidth(this.props.layoutWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the menu - mobile\r\n   */\r\n  openMenu = () => {\r\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"preloader\">\r\n          <div id=\"status\">\r\n            <div className=\"spinner\">\r\n              <i className=\"uil-shutter-alt spin-icon\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"layout-wrapper\">\r\n          <header id=\"page-topbar\">\r\n            <Header\r\n              theme={this.props.topbarTheme}\r\n              isMenuOpened={this.state.isMenuOpened}\r\n              openLeftMenuCallBack={this.openMenu}\r\n            ></Header>\r\n            <Navbar menuOpen={this.state.isMenuOpened} />\r\n          </header>\r\n          <div className=\"main-content\">{this.props.children}</div>\r\n          <Footer />\r\n        </div>\r\n\r\n        {this.props.showRightSidebar ? <Rightbar /> : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLayout.propTypes = {\r\n  changeLayout: PropTypes.func,\r\n  changeLayoutWidth: PropTypes.func,\r\n  changeTopbarTheme: PropTypes.func,\r\n  children: PropTypes.object,\r\n  isPreloader: PropTypes.any,\r\n  layoutWidth: PropTypes.any,\r\n  location: PropTypes.object,\r\n  showRightSidebar: PropTypes.any,\r\n  topbarTheme: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    ...state.Layout,\r\n  };\r\n};\r\nexport default connect(mapStatetoProps, {\r\n  changeTopbarTheme,\r\n  changeLayout,\r\n  changeLayoutWidth,\r\n})(withRouter(Layout));\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\index.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\reducers.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\sagas.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Footer.js",["1097"],"import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <footer className=\"footer\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col sm={6}>\r\n              <p>\r\n                ©{new Date().getFullYear()} Hazel Green.\r\n              </p>\r\n            </Col>\r\n            <Col sm={6}>\r\n              <div className=\"text-sm-end d-none d-sm-block\">\r\n                <p style={{ color: \"#74788d\" }}>\r\n                  <a\r\n                    href=\"https://srvinfotech.com\"\r\n                    target=\"_blank\"\r\n                    style={{ color: \"#74788d\" }}\r\n                  >\r\n                    &nbsp;Powered by SRV InfoTech\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Sidebar.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\Header.js",["1098","1099","1100","1101"],"import PropTypes from \"prop-types\";\r\nimport React, { useState,useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Input, Button, Row, Col } from \"reactstrap\";\r\nimport accessToken from \"../../helpers/jwt-token-access/accessToken\";\r\nimport axios from \"axios\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Reactstrap\r\nimport { Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\";\r\n\r\n// Import menuDropdown\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\n\r\n// Import components\r\nimport MegaMenu from \"../MegaMenu/MegaMenu\";\r\n\r\nimport logoSm from \"../../assets/images/logo-sm.svg\";\r\nimport logoDark from \"../../assets/images/logo-dark.png\";\r\nimport logoLight from \"../../assets/images/logo-new.png\";\r\n\r\n// import images\r\nimport github from \"../../assets/images/brands/github.png\";\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\";\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\";\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\";\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\";\r\nimport slack from \"../../assets/images/brands/slack.png\";\r\nimport Select from \"react-select\";\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n// Redux Store\r\nimport {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n} from \"../../store/actions\";\r\n\r\nconst Header = (props) => {\r\n  const [userId, setUserId] = useState(null);\r\n  const [search, setsearch] = useState(false);\r\n  const [socialDrp, setsocialDrp] = useState(false);\r\n  const [showMegaMenu, setShowMegaMenu] = useState(false);\r\n  const [selectedMasterCompany, setselectedMasterCompany] = useState(null);\r\n  const [selectedMasterLocalbody, setselectedMasterLocalbody] = useState(null);\r\n  const [masterLocalbodyOptionsGroup,setMasterLocalbodyOptionsGroup] = useState(null);\r\n  const [masterComanyOptionsGroup,setMasterCompaniesOptionsGroup] = useState(null);\r\n\r\n  const API_URL = process.env.REACT_APP_APIURL || \"http://localhost:3099/\";\r\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n\r\nuseEffect(()=>{\r\n      if (localStorage.getItem('authUser')) {\r\n        var data = localStorage.getItem('authUser');\r\n        var user_obj = JSON.parse(data);\r\n        setUserId(user_obj._id);\r\n       fetchMasterCompanies(user_obj._id);\r\n       fetchMasterLocalbodies(user_obj._id);\r\n      }\r\n      \r\n      \r\n    \r\n  },[])\r\n  function fetchMasterCompanies(user_id)\r\n  {\r\n    axios\r\n    .get(`${API_URL}company/list/single_options?id=` + user_id,\r\n    {\r\n      headers: {\r\n        'x-access-token': accessToken,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      var companies =\r\n        res.data.data &&\r\n        res.data.data.map((item) => {\r\n          return {\r\n            label: item.company_name,\r\n            value: item._id,\r\n          };\r\n        });\r\n        var user_company =\r\n        res.data.user_company &&\r\n        res.data.user_company.map((item) => {\r\n          return {\r\n            label: item.company_name,\r\n            value: item._id,\r\n          };\r\n        });\r\n      setMasterCompaniesOptionsGroup([\r\n        {\r\n          options: companies,\r\n        },\r\n      ]);\r\n      handleSelectedMasterCompany(user_company[0]);\r\n    });\r\n  \r\n  }\r\n  \r\nfunction fetchMasterLocalbodies(user_id,id=null)\r\n{\r\n  var data = localStorage.getItem('authUser');\r\n  var user_obj = JSON.parse(data);\r\n  user_id = user_obj._id;\r\n  if(id!=null)\r\n  {\r\n    var url = `${API_URL}company/list/localbodies?id=` + user_id+`&cid=`+id;\r\n  }\r\n  else\r\n  {\r\n    var url = `${API_URL}company/list/localbodies?id=` + user_id;\r\n  }\r\n  axios\r\n  .get( url, \r\n  {\r\n    headers: {\r\n      'x-access-token': accessToken,\r\n    },\r\n  })\r\n  .then((res) => {\r\n    var localbodies =\r\n      res.data.data &&\r\n      res.data.data.map((item) => {\r\n        return {\r\n          label: item.localbody_name,\r\n          value: item._id,\r\n        };\r\n      });\r\n      var user_localbodies =\r\n      res.data.user_localbody &&\r\n      res.data.user_localbody.map((item) => {\r\n        return {\r\n          label: item.localbody_name,\r\n          value: item._id,\r\n        };\r\n      });\r\n    setMasterLocalbodyOptionsGroup([\r\n      {\r\n        options: localbodies,\r\n      },\r\n    ]);\r\n    setselectedMasterLocalbody(user_localbodies[0]);\r\n  });\r\n\r\n}\r\n\r\n  function toggleFullscreen() {\r\n    if (\r\n      !document.fullscreenElement &&\r\n      /* alternative standard method */ !document.mozFullScreenElement &&\r\n      !document.webkitFullscreenElement\r\n    ) {\r\n      // current working methods\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) {\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) {\r\n        document.documentElement.webkitRequestFullscreen(\r\n          Element.ALLOW_KEYBOARD_INPUT\r\n        );\r\n      }\r\n    } else {\r\n      if (document.cancelFullScreen) {\r\n        document.cancelFullScreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitCancelFullScreen) {\r\n        document.webkitCancelFullScreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  function tToggle() {\r\n    if (!isMobile) {\r\n      var body = document.body;\r\n      body.classList.toggle(\"vertical-collpsed\");\r\n      body.classList.toggle(\"sidebar-enable\");\r\n    }\r\n\r\n    props.toggleLeftmenu(!props.leftMenu);\r\n    if (props.leftSideBarType === \"default\") {\r\n      props.changeSidebarType(\"condensed\", isMobile);\r\n    } else if (props.leftSideBarType === \"condensed\") {\r\n      props.changeSidebarType(\"default\", isMobile);\r\n    }\r\n  }\r\n\r\n  function toggleMegaMenu() {\r\n    setShowMegaMenu(!showMegaMenu);\r\n  }\r\n  function handleSelectedMasterCompany(value) {\r\n    setselectedMasterCompany(value);\r\n    fetchMasterLocalbodies(userId,value.value);\r\n\r\n  }\r\n  function handleSelectedMasterLocalbody(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setselectedMasterLocalbody(value);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showMegaMenu ? <MegaMenu /> : null}\r\n      <header id=\"page-topbar\" >\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\">\r\n              <Link to=\"/\" className=\"logo logo-dark\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSm} alt=\"\" height=\"22\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoDark} alt=\"\" height=\"20\" />\r\n                </span>\r\n              </Link>\r\n\r\n              <Link to=\"/\" className=\"logo logo-light\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSm} alt=\"\" height=\"22\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoLight} alt=\"\" height=\"20\" />\r\n                </span>\r\n              </Link>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                tToggle();\r\n              }}\r\n              className=\"btn btn-sm px-3 font-size-16 header-item waves-effect vertical-menu-btn\"\r\n              id=\"vertical-menu-btn\"\r\n            >\r\n              <i className=\"fa fa-fw fa-bars\" />\r\n            </button>\r\n\r\n            {/* <div\r\n              className=\"app-search d-none d-lg-block mt-2\"\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <div\r\n                className=\"position-relative\"\r\n                onClick={() => toggleMegaMenu()}\r\n              >\r\n                Mega Menu\r\n                <i class=\"fas fa-sort-down\"></i>\r\n              </div>\r\n            </div> */}\r\n\r\n            <Form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={props.t(\"Search\") + \"...\"}\r\n                />\r\n                <span className=\"uil-search\"></span>\r\n              </div>\r\n            </Form>\r\n            <Form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\" style={{width:'200px'}}>\r\n              <Select\r\n                            name=\"master_company\"\r\n                            value={selectedMasterCompany}\r\n                            onChange={(value) => {\r\n                             handleSelectedMasterCompany(value);\r\n                            }}\r\n                            options={masterComanyOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                            placeholder=\"Company\"\r\n                          />\r\n              </div>\r\n            </Form>\r\n            <Form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\" style={{width:'200px'}}>\r\n              <Select\r\n                            name=\"master_localbody\"\r\n                            value={selectedMasterLocalbody}\r\n                            onChange={(value) => {\r\n                             handleSelectedMasterLocalbody(value);\r\n                            }}\r\n                            options={masterLocalbodyOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                            placeholder=\"Localboy\"\r\n                          />\r\n              </div>\r\n            </Form>\r\n          </div>\r\n\r\n          <div className=\"d-flex\">\r\n            <Dropdown\r\n              className=\"d-inline-block d-lg-none ms-2\"\r\n              onClick={() => {\r\n                setsearch(!search);\r\n              }}\r\n              type=\"button\"\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                id=\"page-header-search-dropdown\"\r\n                tag=\"button\"\r\n              >\r\n                {\" \"}\r\n                <i className=\"uil-search\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\r\n                <Form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Search ...\"\r\n                        aria-label=\"Recipient's username\"\r\n                      />\r\n                      <div className=\"input-group-append\">\r\n                        <Button className=\"btn btn-primary\" type=\"submit\">\r\n                          <i className=\"mdi mdi-magnify\"></i>\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Form>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <Dropdown\r\n              className=\"d-none d-lg-inline-block ms-1\"\r\n              isOpen={socialDrp}\r\n              toggle={() => {\r\n                setsocialDrp(!socialDrp);\r\n              }}\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                tag=\"button\"\r\n              >\r\n                <i className=\"uil-apps\"></i>\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                className=\"dropdown-menu-lg dropdown-menu-end\"\r\n                right\r\n              >\r\n                <div className=\"px-lg-2\">\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={github} alt=\"Github\" />\r\n                        <span>GitHub</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={bitbucket} alt=\"bitbucket\" />\r\n                        <span>Bitbucket</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dribbble} alt=\"dribbble\" />\r\n                        <span>Dribbble</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dropbox} alt=\"dropbox\" />\r\n                        <span>Dropbox</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                        <span>Mail Chimp</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={slack} alt=\"slack\" />\r\n                        <span>Slack</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <Dropdown className=\"d-none d-lg-inline-block ms-1\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  toggleFullscreen();\r\n                }}\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                data-toggle=\"fullscreen\"\r\n              >\r\n                <i className=\"uil-minus-path\"></i>\r\n              </button>\r\n            </Dropdown>\r\n\r\n            <NotificationDropdown />\r\n\r\n            <div\r\n              // onClick={() => {\r\n              //   props.showRightSidebarAction(!props.showRightSidebar);\r\n              // }}\r\n              className=\"dropdown d-inline-block\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n              >\r\n                <i className=\"uil-cog\"></i>\r\n              </button>\r\n            </div>\r\n\r\n            <ProfileMenu />\r\n\r\n            <Link to=\"/logout\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n              >\r\n                <i\r\n                  class=\"fas fa-power-off\"\r\n                  style={{\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                ></i>\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  changeSidebarType: PropTypes.func,\r\n  leftMenu: PropTypes.any,\r\n  leftSideBarType: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { layoutType, showRightSidebar, leftMenu, leftSideBarType } =\r\n    state.Layout;\r\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType };\r\n};\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n})(withTranslation()(Header));\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-starter.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-maintenance.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\User\\index.js",["1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n} from \"../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\nimport \"./user.scss\";\r\n\r\nconst Users = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [userId, setUserId] = useState(1);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setUserObject({ ['addedby']: 1 });\r\n    if (localStorage.getItem('authUser')) {\r\n      var data = localStorage.getItem('authUser');\r\n      const obj = JSON.parse(data);\r\n      console.log(obj);\r\n\r\n      setUserId(obj._id);\r\n      setUserObject({ ['addedby']: userId });\r\n    }\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  let preUpdateUser = (item) => {\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setUserIdToBeUpdated(item._id);\r\n    setUserObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateUserPassword = (item) => {\r\n    setUserIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setUserIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      item.privilage1 = item.privilage && item.privilage.name;\r\n      item.company1 = item.company && item.company.name;\r\n      item.branch1 = item.branch && item.branch.name;\r\n      userData.push(item);\r\n    });\r\n    setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"name1\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Email\",\r\n        field: \"email\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Username\",\r\n        field: \"username\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Mobile\",\r\n        field: \"mobile\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Privilage\",\r\n        field: \"privilage1\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Company\",\r\n        field: \"company1\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Branch\",\r\n        field: \"branch1\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  let privilagesOptionsData =\r\n    privilagesOptions &&\r\n    privilagesOptions.data &&\r\n    privilagesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let companiesOptionsData =\r\n    companiesOptions &&\r\n    companiesOptions.data &&\r\n    companiesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let branchesOptionsData =\r\n    branchesOptions &&\r\n    branchesOptions.data &&\r\n    branchesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  const privilagesOptionsGroup = [\r\n    {\r\n      options: privilagesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const companiesOptionsGroup = [\r\n    {\r\n      options: companiesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const branchesOptionsGroup = [\r\n    {\r\n      options: branchesOptionsData,\r\n    },\r\n  ];\r\n\r\n  function handleChangeUser(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setUserObject({ ...userObject, [name]: value });\r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setUserObject({ ...userObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setUserObject({ ...userObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setUserObject({ ...userObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    userIdTobeUpdated\r\n      ? dispatch(updateUser(userObject))\r\n      : dispatch(addUser(userObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: userIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateUser(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setUserIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteUser(userIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      <Modal\r\n        isOpen={showModal}\r\n        toggle={() => {\r\n          closeModal();\r\n        }}\r\n        centered={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">Confirmation</h5>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              closeModal();\r\n            }}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <AvForm\r\n          className=\"needs-validation\"\r\n          onValidSubmit={(e, v) => {\r\n            handleValidSubmitPassword(e, v);\r\n          }}\r\n        >\r\n          <div className=\"modal-body\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                  <AvField\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please provide a valid password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.password}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Confirm Password</Label>\r\n                  <AvField\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please confirm the password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.confirmPassword}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              className=\"btn btn-dark\"\r\n              style={{ marginRight: \"1rem\" }}\r\n              onClick={closeModal}\r\n            >\r\n              Close\r\n            </button>\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Confirm\r\n            </button>\r\n          </div>\r\n        </AvForm>\r\n      </Modal>\r\n\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Users\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">First name</Label>\r\n                          <AvField\r\n                            name=\"firstName\"\r\n                            placeholder=\"First name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter First Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.firstName}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Last name</Label>\r\n                          <AvField\r\n                            name=\"lastName\"\r\n                            placeholder=\"Last name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Last name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                            value={userObject.lastName}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Email</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            type=\"email\"\r\n                            errorMessage=\"Enter valid Email\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.email}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Username</Label>\r\n                          <AvField\r\n                            name=\"username\"\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid Username\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.username}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">Mobile</Label>\r\n                          <AvField\r\n                            name=\"mobile\"\r\n                            placeholder=\"Mobile\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Please provide a valid mobile.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                            value={userObject.mobile}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Prililage</Label>\r\n                          <Select\r\n                            name=\"privilage\"\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Company</Label>\r\n                          <Select\r\n                            name=\"company\"\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Branch</Label>\r\n                          <Select\r\n                            name=\"branch\"\r\n                            value={selectedBranch}\r\n                            onChange={(value) => {\r\n                              handleSelectedBranch(value);\r\n                            }}\r\n                            options={branchesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      {userIdTobeUpdated ? null : (\r\n                        <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                            <AvField\r\n                              name=\"password\"\r\n                              placeholder=\"Password\"\r\n                              type=\"password\"\r\n                              errorMessage=\" Please provide a valid password\"\r\n                              className=\"form-control\"\r\n                              validate={{ required: { value: true } }}\r\n                              id=\"validationCustom05\"\r\n                              value={userObject.password}\r\n                              onChange={handleChangeUser}\r\n                            />\r\n                          </div>\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n\r\n                    {userIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Users));\r\n\r\nUsers.propTypes = {\r\n  error: PropTypes.any,\r\n  users: PropTypes.array,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-comingsoon.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-timeline.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-faqs.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-404.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-500.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiCarousel.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiAlert.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiButtons.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\pages-pricing.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\index.js",["1113","1114","1115","1116"],"import React from \"react\";\r\nimport { Container, Row, Col, CardBody, Card } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n\r\n//Import Components\r\nimport MiniWidget from \"./mini-widget\";\r\nimport SalesAnalyticsChart from \"./salesanalytics-chart\";\r\nimport TopProduct from \"./topselling-product\";\r\nimport TopUser from \"./topuser\";\r\nimport RecentActivity from \"./recent-activity\";\r\nimport SocialSource from \"./socialsource\";\r\nimport LatestTransaction from \"./latest-transaction\";\r\n\r\n//Import Image\r\nimport setupanalytics from \"../../assets/images/setup-analytics-amico.svg\";\r\n\r\nconst series1 = [\r\n  {\r\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54],\r\n  },\r\n];\r\n\r\nconst options1 = {\r\n  fill: {\r\n    colors: [\"#5b73e8\"],\r\n  },\r\n  chart: {\r\n    width: 70,\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      columnWidth: \"50%\",\r\n    },\r\n  },\r\n  labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n  xaxis: {\r\n    crosshairs: {\r\n      width: 1,\r\n    },\r\n  },\r\n  tooltip: {\r\n    fixed: {\r\n      enabled: !1,\r\n    },\r\n    x: {\r\n      show: !1,\r\n    },\r\n    y: {\r\n      title: {\r\n        formatter: function (seriesName) {\r\n          return \"\";\r\n        },\r\n      },\r\n    },\r\n    marker: {\r\n      show: !1,\r\n    },\r\n  },\r\n};\r\n\r\nconst series2 = [70];\r\n\r\nconst options2 = {\r\n  fill: {\r\n    colors: [\"#34c38f\"],\r\n  },\r\n  chart: {\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  dataLabels: {\r\n    enabled: !1,\r\n  },\r\n  plotOptions: {\r\n    radialBar: {\r\n      hollow: {\r\n        margin: 0,\r\n        size: \"60%\",\r\n      },\r\n      track: {\r\n        margin: 0,\r\n      },\r\n      dataLabels: {\r\n        show: !1,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst series3 = [55];\r\n\r\nconst options3 = {\r\n  fill: {\r\n    colors: [\"#5b73e8\"],\r\n  },\r\n  chart: {\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  dataLabels: {\r\n    enabled: !1,\r\n  },\r\n  plotOptions: {\r\n    radialBar: {\r\n      hollow: {\r\n        margin: 0,\r\n        size: \"60%\",\r\n      },\r\n      track: {\r\n        margin: 0,\r\n      },\r\n      dataLabels: {\r\n        show: !1,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst series4 = [\r\n  {\r\n    data: [25, 66, 41, 89, 63, 25, 44, 12, 36, 9, 54],\r\n  },\r\n];\r\n\r\nconst options4 = {\r\n  fill: {\r\n    colors: [\"#f1b44c\"],\r\n  },\r\n  chart: {\r\n    width: 70,\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      columnWidth: \"50%\",\r\n    },\r\n  },\r\n  labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n  xaxis: {\r\n    crosshairs: {\r\n      width: 1,\r\n    },\r\n  },\r\n  tooltip: {\r\n    fixed: {\r\n      enabled: !1,\r\n    },\r\n    x: {\r\n      show: !1,\r\n    },\r\n    y: {\r\n      title: {\r\n        formatter: function (seriesName) {\r\n          return \"\";\r\n        },\r\n      },\r\n    },\r\n    marker: {\r\n      show: !1,\r\n    },\r\n  },\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const reports = [\r\n    {\r\n      id: 1,\r\n      icon: \"mdi mdi-arrow-up-bold\",\r\n      title: \"Total Revenue\",\r\n      value: 34152,\r\n      prefix: \"$\",\r\n      suffix: \"\",\r\n      badgeValue: \"2.65%\",\r\n      decimal: 0,\r\n      charttype: \"bar\",\r\n      chartheight: 40,\r\n      chartwidth: 70,\r\n      color: \"success\",\r\n      desc: \"since last week\",\r\n      series: series1,\r\n      options: options1,\r\n    },\r\n    {\r\n      id: 2,\r\n      icon: \"mdi mdi-arrow-down-bold\",\r\n      title: \"Orders\",\r\n      value: 5643,\r\n      decimal: 0,\r\n      charttype: \"radialBar\",\r\n      chartheight: 45,\r\n      chartwidth: 45,\r\n      prefix: \"\",\r\n      suffix: \"\",\r\n      badgeValue: \"0.82%\",\r\n      color: \"danger\",\r\n      desc: \"since last week\",\r\n      series: series2,\r\n      options: options2,\r\n    },\r\n    {\r\n      id: 3,\r\n      icon: \"mdi mdi-arrow-down-bold\",\r\n      title: \"Customers\",\r\n      value: 45254,\r\n      decimal: 0,\r\n      prefix: \"\",\r\n      suffix: \"\",\r\n      charttype: \"radialBar\",\r\n      chartheight: 45,\r\n      chartwidth: 45,\r\n      badgeValue: \"6.24%\",\r\n      color: \"danger\",\r\n      desc: \"since last week\",\r\n      series: series3,\r\n      options: options3,\r\n    },\r\n    {\r\n      id: 4,\r\n      icon: \"mdi mdi-arrow-up-bold\",\r\n      title: \"Growth\",\r\n      value: 12.58,\r\n      decimal: 2,\r\n      prefix: \"+\",\r\n      suffix: \"%\",\r\n      charttype: \"bar\",\r\n      chartheight: 40,\r\n      chartwidth: 70,\r\n      badgeValue: \"10.51%\",\r\n      color: \"success\",\r\n      desc: \"since last week\",\r\n      series: series4,\r\n      options: options4,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          <Breadcrumbs title=\"Minible\" breadcrumbItem=\"Dashboard\" />\r\n          <Row>\r\n            <MiniWidget reports={reports} />\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col xl={8}>\r\n              <SalesAnalyticsChart />\r\n            </Col>\r\n            <Col xl={4}>\r\n              <Card className=\"bg-primary\">\r\n                <CardBody>\r\n                  <Row className=\"align-items-center\">\r\n                    <Col sm={8}>\r\n                      <p className=\"text-white font-size-18\">\r\n                        Enhance your <b>Campaign</b> for better outreach{\" \"}\r\n                        <i className=\"mdi mdi-arrow-right\"></i>\r\n                      </p>\r\n                      <div className=\"mt-4\">\r\n                        <Link\r\n                          to=\"#\"\r\n                          className=\"btn btn-success waves-effect waves-light\"\r\n                        >\r\n                          Upgrade Account!\r\n                        </Link>\r\n                      </div>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                      <div className=\"mt-4 mt-sm-0\">\r\n                        <img\r\n                          src={setupanalytics}\r\n                          className=\"img-fluid\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n              <TopProduct />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiCards.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiGrid.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiDropdown.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiLightbox.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiGeneral.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiImages.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiProgressbar.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiColors.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiModal.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiSweetAlert.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiTypography.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiTabsAccordions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiVideo.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiRangeSlider.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiRating.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\UiSessionTimeout.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\ui-image-cropper.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\ui-notifications.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormRepeater.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormEditors.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\BasicElements.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormLayouts.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormUpload.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormAdvanced.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormMask.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormWizard.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormXeditable.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Forms\\FormValidations.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\BasicTables.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\Apexcharts.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\ResponsiveTables.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\EditableTables.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Tables\\DatatableTables.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\charts-knob.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\EChart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\SparklineChart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Charts\\ChartjsChart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconDripicons.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsGoogle.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconBoxicons.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsVector.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconUnicons.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconMaterialdesign.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Icons\\IconFontawesome.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\Rightbar.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\saga.js",["1117"],"import { takeEvery, put, call } from 'redux-saga/effects';\r\n\r\nimport { GET_Menu_OPTIONS } from './actionTypes';\r\n\r\nimport { getMenusOptionsSuccess, getMenusOptionsFail } from './actions';\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getMenusOptions } from '../../helpers/backend_helper';\r\n\r\nfunction* fetchMenu({userId:userId}) {\r\n  try {\r\n    const response = yield call(getMenusOptions,userId);\r\n    yield put(getMenusOptionsSuccess(response.data));\r\n  } catch (error) {\r\n    yield put(getMenusOptionsFail(error));\r\n  }\r\n}\r\n\r\nfunction* menusSaga() {\r\n  yield takeEvery(GET_Menu_OPTIONS, fetchMenu);\r\n}\r\n\r\nexport default menusSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\saga.js",["1118"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport{\r\nGET_WASTEITEMS,\r\nGET_WASTE_TYPES,\r\nGET_WASTE_CATEGORIES,\r\nADD_WASTE_ITEM,\r\nUPDATE_WASTE_ITEM,\r\nDELETE_WASTE_ITEM\r\n} from \"./actionTypes\"\r\n\r\nimport{\r\ngetWasteItemsSuccess,\r\ngetWasteItemsFail,\r\ngetWasteTypesSuccess,\r\ngetWasteTypesFail,\r\ngetWasteCategoriesSuccess,\r\ngetWasteCategoriesFail,\r\naddWasteItemFail,\r\naddWasteItemSuccess,\r\nupdateWasteItemFail,\r\nupdateWasteItemSuccess,\r\ndeleteWasteItemFail,\r\ndeleteWasteItemSuccess\r\n\r\n} from \"./actions\"\r\n\r\nimport {getWasteItems,\r\n  getWasteTypes,\r\n  getWasteCategories,\r\n  addWasteItem,\r\n  updateWasteItem,\r\ndeleteWasteItem} from \"../../helpers/backend_helper\"\r\n\r\nfunction* fetchWasteItems() {\r\n    try {\r\n      const response = yield call(getWasteItems);\r\n      yield put(getWasteItemsSuccess(response));\r\n    } catch (error) {\r\n      yield put(getWasteItemsFail(error));\r\n    }\r\n  }\r\n  function* fetchWasteTypes() {\r\n    try {\r\n      const response = yield call(getWasteTypes);\r\n      yield put(getWasteTypesSuccess(response));\r\n    } catch (error) {\r\n      yield put(getWasteTypesFail(error));\r\n    }\r\n  }\r\n\r\n  function* fetchWasteCategories() {\r\n    try {\r\n      const response = yield call(getWasteCategories);\r\n      yield put(getWasteCategoriesSuccess(response));\r\n    } catch (error) {\r\n      yield put(getWasteCategoriesFail(error));\r\n    }\r\n  }\r\n\r\n \r\n\r\n  function* onAddWasteItem({ payload: wasteItem }) {\r\n    try {\r\n      const response = yield call(addWasteItem, wasteItem);\r\n      yield put(addWasteItemSuccess(response));\r\n    } catch (error) {\r\n      yield put(addWasteItemFail(error.response));\r\n    }\r\n  }\r\n  function* onUpdateWasteItem({ payload: wasteItem }) {\r\n    delete wasteItem.name1;\r\n    delete wasteItem.privilage1;\r\n    delete wasteItem.company1;\r\n    delete wasteItem.branch1;\r\n    delete wasteItem.action;\r\n    console.log(wasteItem);\r\n    if (wasteItem.privilage) {\r\n      wasteItem.privilage = wasteItem.privilage._id;\r\n    }\r\n    if (wasteItem.company) {\r\n      wasteItem.company = wasteItem.company._id;\r\n    }\r\n    if (wasteItem.branch) {\r\n      wasteItem.branch = wasteItem.branch._id;\r\n    }\r\n  \r\n    try {\r\n      const response = yield call(updateWasteItem, wasteItem);\r\n      yield put(updateWasteItemSuccess(response));\r\n    } catch (error) {\r\n      yield put(updateWasteItemFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onDeleteWasteItem({ payload: wasteItemId }) {\r\n    try {\r\n      const response = yield call(deleteWasteItem, wasteItemId);\r\n      yield put(deleteWasteItemSuccess(response));\r\n    } catch (error) {\r\n      yield put(deleteWasteItemFail(error.response));\r\n    }\r\n  }\r\n  function* wasteItemSaga() {\r\n    yield takeEvery(GET_WASTEITEMS, fetchWasteItems);\r\n    yield takeEvery(GET_WASTE_TYPES, fetchWasteTypes);\r\n    yield takeEvery(GET_WASTE_CATEGORIES, fetchWasteCategories);\r\n    yield takeEvery(ADD_WASTE_ITEM,onAddWasteItem);\r\n    yield takeEvery(UPDATE_WASTE_ITEM,onUpdateWasteItem);\r\n    yield takeEvery(DELETE_WASTE_ITEM,onDeleteWasteItem);\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n  export default wasteItemSaga;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\reducer.js",["1119","1120","1121","1122"],"import{\r\n  GET_WASTEITEMS,\r\n  GET_WASTEITEMS_SUCCESS,\r\n  GET_WASTEITEMS_FAIL,\r\n  GET_WASTE_TYPES,\r\n  GET_WASTE_TYPES_SUCCESS,\r\n  GET_WASTE_TYPES_FAIL,\r\n  GET_WASTE_CATEGORIES,\r\n  GET_WASTE_CATEGORIES_FAIL,\r\n  GET_WASTE_CATEGORIES_SUCCESS,\r\n  ADD_WASTE_ITEM,\r\n  ADD_WASTE_ITEM_SUCCESS,\r\n  ADD_WASTE_ITEM_FAIL,\r\n  UPDATE_WASTE_ITEM,\r\n  UPDATE_WASTE_ITEM_SUCCESS,\r\n  UPDATE_WASTE_ITEM_FAIL,\r\n  DELETE_WASTE_ITEM,\r\n  DELETE_WASTE_ITEM_SUCCESS,\r\n  DELETE_WASTE_ITEM_FAIL,\r\n\r\n\r\n} from \"./actionTypes\"\r\n\r\nconst INIT_STATE={\r\n  wasteItems:[],\r\n  error:{},\r\n  wasteTypes:[],\r\n  categories:[],\r\n  addingWasteItem: false,\r\ndeletingWasteItem: false,\r\naddWasteItemResponse: {},\r\nupdateWasteItemResponse: {},\r\ndeleteWasteItemResponse: {},\r\nwasteItemIdToBeDeleted: \"\",\r\nwasteItem:{},\r\n}\r\n\r\nconst WasteItems = (state=INIT_STATE, action) => {\r\n  switch (action.type) {\r\n   case GET_WASTEITEMS:\r\n     return{\r\n       ...state,\r\n       params:action.payload,\r\n\r\n     };\r\n    case GET_WASTEITEMS_SUCCESS:\r\n      return {\r\n        ...state,\r\n       wasteItems: action.payload.data,\r\n      };\r\n\r\n    case GET_WASTEITEMS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n\r\n\r\n\r\n    case GET_WASTE_TYPES:\r\n     return{\r\n       ...state,\r\n       params:action.payload,\r\n     };\r\n     case GET_WASTE_TYPES_SUCCESS:\r\n      return{\r\n        ...state,\r\n        wasteTypes:action.payload.data,\r\n      } ;\r\n      case GET_WASTE_TYPES_FAIL:\r\n        return{\r\n          ...state,\r\n          error:action.payload,\r\n        } ; \r\n\r\n\r\n      case GET_WASTE_CATEGORIES:\r\n        return{\r\n          ...state,\r\n          params:action.payload,\r\n\r\n        };\r\n        case GET_WASTE_CATEGORIES_SUCCESS:\r\n          return{\r\n            ...state,\r\n            categories:action.payload.data,\r\n\r\n          };\r\n          case GET_WASTE_CATEGORIES_FAIL:\r\n            return{\r\n              ...state,\r\n              error:action.payload,\r\n  \r\n            };\r\n\r\n            case ADD_WASTE_ITEM:\r\n              \r\n              return {\r\n                ...state,\r\n                addingWasteItem: true,\r\n                wasteItem: action.payload,\r\n              };\r\n        \r\n            case ADD_WASTE_ITEM_SUCCESS:\r\n              let newWasteItems = [...state.wasteItems, action.payload.data];\r\n              return {\r\n                ...state,\r\n                addingWasteItem: false,\r\n                addWasteItemResponse: {\r\n                  type: \"success\",\r\n                  message: \"wasteitem added successfully\",\r\n                },\r\n                wasteItems: newWasteItems,\r\n                error: {},\r\n              };\r\n        \r\n            case ADD_WASTE_ITEM_FAIL:\r\n              return {\r\n                ...state,\r\n                addingWasteItem: false,\r\n                addWasteItemResponse: { type: \"failure\", message: \"Adding localbody failed\" },\r\n                error: action.payload,\r\n              };\r\n            case DELETE_WASTE_ITEM:\r\n              return {\r\n                ...state,\r\n                deletingLocalbody: true,\r\n                wasteItemIdToBeDeleted: action.payload,\r\n              };\r\n\r\n              case DELETE_WASTE_ITEM_SUCCESS:\r\n                let newWasteItemss = state.wasteItems.filter((item) => {\r\n                 return item._id != state.wasteItemIdToBeDeleted;\r\n               });\r\n               return {\r\n                 ...state,\r\n                 deletingWasteItem: false,\r\n                 wasteItemIdToBeDeleted: \"\",\r\n                 deletingWasteItem: false,\r\n                 deleteWasteItemResponse: {\r\n                   type: \"success\",\r\n                   message: \"wasteitem deleted successfully\",\r\n                 },\r\n                 wasteItems: newWasteItemss,\r\n               };\r\n\r\n               case DELETE_WASTE_ITEM_FAIL:\r\n                return {\r\n                  ...state,\r\n                  deletingWasteItem: false,\r\n                  deleteWasteItemResponse: {\r\n                    type: \"failure\",\r\n                    message: \"Deleting wasteItem failed\",\r\n                  },\r\n                  error: action.payload,\r\n                };\r\n          \r\n              case UPDATE_WASTE_ITEM:\r\n                return {\r\n                  ...state,\r\n                  updatingWasteItem: true,\r\n                  wasteItem: action.payload,\r\n                };\r\n\r\n                case UPDATE_WASTE_ITEM_SUCCESS:\r\n                  let newWasteItemsss = state.wasteItems.map((item) => {\r\n                    if (item._id == state.wasteItem._id) {\r\n                      return action.payload.data;\r\n                    } else {\r\n                      return item;\r\n                    }\r\n                  });\r\n                  return {\r\n                    ...state,\r\n                    updatingWasteItem: false,\r\n                    wasteItem: \"\",\r\n                    updatingWasteItem: false,\r\n                    updateWasteItemResponse: {\r\n                      type: \"success\",\r\n                      message: \" updated successfully\",\r\n                    },\r\n                    wasteItems: newWasteItemsss,\r\n                  };\r\n            \r\n                case UPDATE_WASTE_ITEM_FAIL:\r\n                  return {\r\n                    ...state,\r\n                    updatingWasteItem: false,\r\n                    updateWasteItemResponse: {\r\n                      type: \"failure\",\r\n                      message: \"Updating  failed\",\r\n                    },\r\n                    error: action.payload,\r\n                  };\r\n            \r\n\r\n\r\n\r\n        \r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\nexport default WasteItems","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\saga.js",["1123"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport{\r\n    GET_GROUPS,\r\n    GET_GROUP,\r\n    ADD_GROUP,\r\n    UPDATE_GROUP,\r\n    DELETE_GROUP\r\n} from \"./actionTypes\"\r\n\r\nimport{\r\n  \r\n    getGroupsSuccess,\r\n    getGroupsFail,\r\n    getGroupSuccess,\r\n    getGroupFail,\r\n    addGroupFail,\r\n    addGroupSuccess,\r\n    deleteGroupSuccess,\r\n    deleteGroupFail,\r\n    updateGroupSuccess,\r\n    updateGroupFail\r\n} from \"./actions\"\r\n\r\nimport{ getGroups,getGroup,\r\naddGroup,updateGroup,deleteGroup} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchGroups() {\r\n    try {\r\n      const response = yield call(getGroups);\r\n      yield put(getGroupsSuccess(response));\r\n    } catch (error) {\r\n      yield put(getGroupsFail(error));\r\n    }\r\n  }\r\n\r\n  function* onGetGroup() {\r\n    try {\r\n      const response = yield call(getGroup);\r\n      yield put(getGroupSuccess(response));\r\n    } catch (error) {\r\n      yield put(getGroupFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onAddGroup({ payload: group }) {\r\n    try {\r\n      const response = yield call(addGroup, group);\r\n      yield put(addGroupSuccess(response));\r\n    } catch (error) {\r\n      yield put(addGroupFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onUpdateGroup({ payload: group }) {\r\n    delete group.name1;\r\n    delete group.privilage1;\r\n    delete group.company1;\r\n    delete group.branch1;\r\n    delete group.action;\r\n    console.log(group);\r\n    if (group.privilage) {\r\n      group.privilage = group.privilage._id;\r\n    }\r\n    if (group.company) {\r\n      group.company = group.company._id;\r\n    }\r\n    if (group.branch) {\r\n      group.branch = group.branch._id;\r\n    }\r\n  \r\n    try {\r\n      const response = yield call(updateGroup, group);\r\n      yield put(updateGroupSuccess(response));\r\n    } catch (error) {\r\n      yield put(updateGroupFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onDeleteGroup({ payload: groupId }) {\r\n    try {\r\n      const response = yield call(deleteGroup, groupId);\r\n      yield put(deleteGroupSuccess(response));\r\n    } catch (error) {\r\n      yield put(deleteGroupFail(error.response));\r\n    }\r\n  }\r\n  \r\n\r\n  function* groupSaga() {\r\n    yield takeEvery(GET_GROUPS, fetchGroups);\r\n    yield takeEvery(GET_GROUP, onGetGroup);\r\n    yield takeEvery(ADD_GROUP, onAddGroup);\r\n    yield takeEvery(UPDATE_GROUP, onUpdateGroup);\r\n    yield takeEvery(DELETE_GROUP, onDeleteGroup);\r\n  }\r\n\r\nexport default groupSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\saga.js",["1124"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\n\r\nimport{\r\n    GET_CUSTOMERS\r\n    \r\n} from \"./actionTypes\";\r\n\r\nimport{\r\n    \r\n    getCustomersSuccess,\r\n    getCustomersFail,\r\n\r\n} from \"./actions\";\r\n\r\nimport{\r\n    getCustomers\r\n\r\n}from \"../../helpers/backend_helper\";\r\n\r\n\r\nfunction* fetchCustomers(){\r\n    try{\r\n        const response=yield call(getCustomers);\r\n        yield put(getCustomersSuccess(response));\r\n    }catch (error){\r\n        yield put(getCustomersFail(error));\r\n    }\r\n}\r\n\r\nfunction* customerSaga() {\r\n    yield takeEvery(GET_CUSTOMERS, fetchCustomers);\r\n    \r\n  }\r\n  \r\n  export default customerSaga;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\saga.js",["1125"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_LOCALBODY,\r\n  ADD_LOCALBODY,\r\n  DELETE_LOCALBODY,\r\n  UPDATE_LOCALBODY,\r\n  GET_LOCALBODIES,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getLocalbodiesSuccess,\r\n  getLocalbodiesFail,\r\n  getLocalbodySuccess,\r\n  getLocalbodyFail,\r\n  addLocalbodyFail,\r\n  addLocalbodySuccess,\r\n  updateLocalbodyFail,\r\n  updateLocalbodySuccess,\r\n  deleteLocalbodyFail,\r\n  deleteLocalbodySuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getLocalbodies,\r\n  getLocalbody,\r\n  addLocalbody,\r\n  updateLocalbody,\r\n  deleteLocalbody\r\n  \r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchLocalbodies() {\r\n  try {\r\n    const response = yield call(getLocalbodies);\r\n    yield put(getLocalbodiesSuccess(response));\r\n  } catch (error) {\r\n    yield put(getLocalbodiesFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetLocalbody() {\r\n  try {\r\n    const response = yield call(getLocalbody);\r\n    yield put(getLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(getLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddLocalbody({ payload: localbody }) {\r\n  try {\r\n    const response = yield call(addLocalbody, localbody);\r\n    yield put(addLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(addLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateLocalbody({ payload: localbody }) {\r\n  delete localbody.name1;\r\n  delete localbody.privilage1;\r\n  delete localbody.company1;\r\n  delete localbody.branch1;\r\n  delete localbody.action;\r\n  console.log(localbody);\r\n  if (localbody.privilage) {\r\n    localbody.privilage = localbody.privilage._id;\r\n  }\r\n  if (localbody.company) {\r\n    localbody.company = localbody.company._id;\r\n  }\r\n  if (localbody.branch) {\r\n    localbody.branch = localbody.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateLocalbody, localbody);\r\n    yield put(updateLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(updateLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteLocalbody({ payload: localbodyId }) {\r\n  try {\r\n    const response = yield call(deleteLocalbody, localbodyId);\r\n    yield put(deleteLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* localbodySaga() {\r\n  yield takeEvery(GET_LOCALBODIES, fetchLocalbodies);\r\n  yield takeEvery(GET_LOCALBODY, onGetLocalbody);\r\n  yield takeEvery(ADD_LOCALBODY, onAddLocalbody);\r\n  yield takeEvery(UPDATE_LOCALBODY, onUpdateLocalbody);\r\n  yield takeEvery(DELETE_LOCALBODY, onDeleteLocalbody);\r\n}\r\n\r\nexport default localbodySaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\saga.js",["1126"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_WARD,\r\n  ADD_WARD,\r\n  DELETE_WARD,\r\n  UPDATE_WARD,\r\n  GET_WARDS,\r\n  GET_WARD_OPTIONS,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getWardsSuccess,\r\n  getWardsFail,\r\n  getWardSuccess,\r\n  getWardFail,\r\n  addWardFail,\r\n  addWardSuccess,\r\n  updateWardFail,\r\n  updateWardSuccess,\r\n  deleteWardFail,\r\n  deleteWardSuccess,\r\n  getWardOptionsSuccess,\r\n  getWardOptionsFail,\r\n  \r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getWards,\r\n  getWard,\r\n  addWard,\r\n  updateWard,\r\n  deleteWard,\r\n  getWardOptions\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchWards() {\r\n  try {\r\n    const response = yield call(getWards);\r\n    yield put(getWardsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getWardsFail(error));\r\n  }\r\n}\r\n\r\nfunction* fetchWardOptions({ payload: localbodyId }) {\r\n  try {\r\n    const response = yield call(getWardOptions, localbodyId);\r\n    yield put(getWardOptionsSuccess(response));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(getWardOptionsFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetWard() {\r\n  try {\r\n    const response = yield call(getWard);\r\n    yield put(getWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(getWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddWard({ payload: ward }) {\r\n  try {\r\n    const response = yield call(addWard, ward);\r\n    yield put(addWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(addWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateWard({ payload: ward }) {\r\n  delete ward.name1;\r\n  delete ward.privilage1;\r\n  delete ward.company1;\r\n  delete ward.branch1;\r\n  delete ward.action;\r\n  console.log(ward);\r\n  if (ward.privilage) {\r\n    ward.privilage = ward.privilage._id;\r\n  }\r\n  if (ward.company) {\r\n    ward.company = ward.company._id;\r\n  }\r\n  if (ward.branch) {\r\n    ward.branch = ward.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateWard, ward);\r\n    yield put(updateWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteWard({ payload: wardId }) {\r\n  try {\r\n    const response = yield call(deleteWard, wardId);\r\n    yield put(deleteWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* wardSaga() {\r\n  yield takeEvery(GET_WARDS, fetchWards);\r\n  yield takeEvery(GET_WARD_OPTIONS,fetchWardOptions);\r\n  yield takeEvery(GET_WARD, onGetWard);\r\n  yield takeEvery(ADD_WARD, onAddWard);\r\n  yield takeEvery(UPDATE_WARD, onUpdateWard);\r\n  yield takeEvery(DELETE_WARD, onDeleteWard);\r\n}\r\n\r\nexport default wardSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Master_Setting\\index.js",["1127","1128","1129","1130","1131","1132","1133"],"import React from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Save from \"@mui/icons-material/Save\";\r\nimport Refresh from \"@mui/icons-material/ResetTvRounded\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n  CardHeader,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./settings.scss\";\r\n\r\nconst DatatableTables = () => {\r\n  \r\n\r\n  const [member, setMember] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleChange = (event) => {\r\n    setMember(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  const [language, setLanguage] = React.useState(\"\");\r\n  const [open1, setOpen1] = React.useState(false);\r\n  const handleChange1 = (event) => {\r\n    setLanguage(event.target.value);\r\n  };\r\n\r\n  const handleClose1 = () => {\r\n    setOpen1(false);\r\n  };\r\n\r\n  const handleOpen1 = () => {\r\n    setOpen1(true);\r\n  };\r\n\r\n\r\n  const [account, setAccount] = React.useState(\"\");\r\n  const [open2, setOpen2] = React.useState(false);\r\n  const handleChange2 = (event) => {\r\n    setAccount(event.target.value);\r\n  };\r\n\r\n  const handleClose2 = () => {\r\n    setOpen2(false);\r\n  };\r\n\r\n  const handleOpen2 = () => {\r\n    setOpen2(true);\r\n  };\r\n\r\n\r\n  const [date, setDate] = React.useState(\"\");\r\n  const [open3, setOpen3] = React.useState(false);\r\n  const handleChange3 = (event) => {\r\n    setDate(event.target.value);\r\n  };\r\n\r\n  const handleClose3 = () => {\r\n    setOpen3(false);\r\n  };\r\n\r\n  const handleOpen3 = () => {\r\n    setOpen3(true);\r\n  };\r\n\r\n  \r\n  const [month, setMonth] = React.useState(\"\");\r\n  const [open4, setOpen4] = React.useState(false);\r\n\r\n  const handleChange4 = (event) => {\r\n    setMonth(event.target.value);\r\n  };\r\n\r\n  const handleClose4 = () => {\r\n    setOpen4(false);\r\n  };\r\n\r\n  const handleOpen4 = () => {\r\n    setOpen4(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Settings\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    {/*First row*/}\r\n                    <Row>\r\n                      <Col md=\"1\">\r\n                        <Label htmlFor=\"validationCustom05\">Basic:</Label>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <FormControl sx={{ m: 1, width: 273 }}>\r\n                            <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Members\r\n                            </InputLabel>\r\n                            <Select\r\n                         \r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              onOpen={handleOpen}\r\n                              value={member}\r\n                              label=\"member\"\r\n                              onChange={handleChange}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>--Select Customer Label--</em>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem value={1}>Client</MenuItem>\r\n                              <MenuItem value={2}>Customer</MenuItem>\r\n                              <MenuItem value={3}>Members</MenuItem>\r\n                              <MenuItem value={4}>Guest</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\"    className=\"txt-fields\" >\r\n                        <Label\r\n                          htmlFor=\"validationCustom05\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          Customer:\r\n                        </Label>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <Label htmlFor=\"validationCustom05\">Customer</Label>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Second row*/}\r\n                    <Row>\r\n                      <Col md=\"1\"></Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <FormControl sx={{ m: 1, width: 273 }}>\r\n                            <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Select Language\r\n                            </InputLabel>\r\n                            <Select\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open1}\r\n                              onClose={handleClose1}\r\n                              onOpen={handleOpen1}\r\n                              value={language}\r\n                              label=\"State\"\r\n                              onChange={handleChange1}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>--Select Language--</em>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem value={1}>English</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\" className=\"txt-fields\">\r\n                        <Label\r\n                          htmlFor=\"validationCustom05\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          Language:\r\n                        </Label>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <Label htmlFor=\"validationCustom05\">English</Label>\r\n                      </Col>\r\n\r\n                      {/*Third row*/}\r\n                      <Row>\r\n                        <Col md=\"1\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Accountings:\r\n                          </Label>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <FormControl sx={{ m: 1, width: 273 }}>\r\n                              <InputLabel id=\"demo-controlled-open-select-label\">\r\n                                Select Currency\r\n                              </InputLabel>\r\n                              <Select\r\n                                labelId=\"demo-controlled-open-select-label\"\r\n                                id=\"demo-controlled-open-select\"\r\n                                open={open2}\r\n                                onClose={handleClose2}\r\n                                onOpen={handleOpen2}\r\n                                value={account}\r\n                                label=\"State\"\r\n                                onChange={handleChange2}\r\n                              >\r\n                                <MenuItem value=\"\">\r\n                                  <em>--Selct Currency--</em>\r\n                                </MenuItem>\r\n\r\n                                <MenuItem value={1}>INR-Rupee</MenuItem>\r\n                                <MenuItem value={2}>USD-Dollar</MenuItem>\r\n                                <MenuItem value={3}>EUR-Euro</MenuItem>\r\n                                <MenuItem value={4}>AED-Dirham</MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div>\r\n                        </Col>\r\n                        <Col md=\"3\" className=\"txt-fields\" >\r\n                          <Label\r\n                            htmlFor=\"validationCustom05\"\r\n                            style={{ fontWeight: \"bold\" }}\r\n                          >\r\n                            Currency:\r\n                          </Label>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            INR - Rupee\r\n                          </Label>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      {/*Fourth row*/}\r\n                      <Row>\r\n                        <Col md=\"1\"></Col>\r\n                        <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <FormControl sx={{ m: 1, width: 273 }}>\r\n                              <InputLabel id=\"demo-controlled-open-select-label\">\r\n                                MM-DD-YYYY\r\n                              </InputLabel>\r\n                              <Select\r\n                                labelId=\"demo-controlled-open-select-label\"\r\n                                id=\"demo-controlled-open-select\"\r\n                                open={open3}\r\n                                onClose={handleClose3}\r\n                                onOpen={handleOpen3}\r\n                                value={date}\r\n                                label=\"State\"\r\n                                onChange={handleChange3}\r\n                              >\r\n                                <MenuItem value=\"\">\r\n                                  <em>--Selct Date Formate--</em>\r\n                                </MenuItem>\r\n\r\n                                <MenuItem value={1}>MM-DD-YYYY</MenuItem>\r\n                                <MenuItem value={2}>DD-MM-YYYY</MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div>\r\n                        </Col>\r\n                        <Col md=\"3\" className=\"txt-fields\" >\r\n                          <Label\r\n                            htmlFor=\"validationCustom05\"\r\n                            style={{ fontWeight: \"bold\" }}\r\n                          >\r\n                            Date Formate:\r\n                          </Label>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor=\"validationCustom05\">DD-MM-YY</Label>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      {/*Fifth row*/}\r\n                      <Row>\r\n                        <Col md=\"1\"></Col>\r\n                        <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <FormControl sx={{ m: 1, width: 273 }}>\r\n                              <InputLabel id=\"demo-controlled-open-select-label\">\r\n                                Select Account Month\r\n                              </InputLabel>\r\n                              <Select\r\n                                labelId=\"demo-controlled-open-select-label\"\r\n                                id=\"demo-controlled-open-select\"\r\n                                open={open4}\r\n                                onClose={handleClose4}\r\n                                onOpen={handleOpen4}\r\n                                value={month}\r\n                                label=\"State\"\r\n                                onChange={handleChange4}\r\n                              >\r\n                                <MenuItem value=\"\">\r\n                                  <em>--Selct Account Month--</em>\r\n                                </MenuItem>\r\n\r\n                                <MenuItem value={1}>January</MenuItem>\r\n                                <MenuItem value={2}>February</MenuItem>\r\n                                <MenuItem value={3}>March</MenuItem>\r\n                                <MenuItem value={4}>April</MenuItem>\r\n                                <MenuItem value={5}>May</MenuItem>\r\n                                <MenuItem value={6}>June</MenuItem>\r\n                                <MenuItem value={7}>July</MenuItem>\r\n                                <MenuItem value={8}>August</MenuItem>\r\n                                <MenuItem value={9}>September</MenuItem>\r\n                                <MenuItem value={10}>October</MenuItem>\r\n                                <MenuItem value={11}>November</MenuItem>\r\n                                <MenuItem value={12}>December</MenuItem>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </div>\r\n                        </Col>\r\n                        <Col md=\"3\" className=\"txt-fields\" >\r\n                          <Label\r\n                            htmlFor=\"validationCustom05\"\r\n                            style={{ fontWeight: \"bold\" }}\r\n                          >\r\n                            Account Month:\r\n                          </Label>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor=\"validationCustom05\">November</Label>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <Box m={2} pt={3}>\r\n                          <div className=\"mt-4\">\r\n                            <Button color=\"primary\" type=\"submit\">\r\n                              <Save></Save>\r\n                              {\"  \"}Submit\r\n                            </Button>\r\n                            {\"  \"}\r\n                            <Button color=\"danger\" type=\"submit\">\r\n                              <Refresh></Refresh>\r\n                              {\"  \"}Resete\r\n                            </Button>\r\n                          </div>\r\n                        </Box>\r\n                      </Row>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Privilage\\index.js",["1134","1135","1136","1137"],"import React from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Save from \"@mui/icons-material/Save\";\r\nimport Resete from \"@mui/icons-material/ResetTvRounded\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n  CardHeader,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./previlage.scss\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nconst DatatableTables = () => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"SI#\",\r\n        field: \"si\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Privilage Name\",\r\n        field: \"name\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Privilage Shortcode\",\r\n        field: \"pcode\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Company Name\",\r\n        field: \"cname\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      // {\r\n      //   label:\"Branch Name\",\r\n      //   field:\"branch\",\r\n      //   sort:\"asc\",\r\n      //   width:150,\r\n      // },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        si: \"1\",\r\n        name: \"Admin\",\r\n        pcode: \"ADM\",\r\n        office: \"Edinburgh\",\r\n        age: \"61\",\r\n        date: \"2011/04/25\",\r\n        salary: \"$320\",\r\n        cname: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                style={{marginRight: \"15%\"}}\r\n                  value=\"end\"\r\n                  control={<Checkbox />}\r\n                  label=\"Mavoor road - Calicut\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n\r\n                <FormControlLabel\r\n                  value=\"end\"\r\n                  control={<Checkbox />}\r\n                  label=\"City Center - Thrissur\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n\r\n              \r\n\r\n                <FormControlLabel\r\n                style={{marginRight: \"15%\"}}\r\n                  value=\"end\"\r\n                  control={<Checkbox />}\r\n                  label=\"Kottakal - Malapuram\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"end\"\r\n                  control={<Checkbox />}\r\n                  label=\"Kochi\"\r\n                  labelPlacement=\"end\"\r\n                />\r\n\r\n                <Grid item lg=\"5\"></Grid>\r\n<Row style={{marginLeft: \"-237px\"}} >\r\n  <Col md=\"3\">\r\n                <FormControlLabel\r\n                className=\"check-fields\"\r\n                // style={{marginLeft:\"-248px\"}}\r\n                  value=\"end\"\r\n                  control={<Checkbox />}\r\n                  label=\"Australia\"\r\n                  labelPlacement=\"end\"\r\n                /></Col></Row>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n     \r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Privilage\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Previlage</Label>\r\n                          <AvField\r\n                            name=\"firstname\"\r\n                            placeholder=\"Privilage name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Previlage Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Shortcode</Label>\r\n                          <AvField\r\n                            name=\"lastname\"\r\n                            placeholder=\"Privilage Shortcode\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Privilage Shortcode\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            <Save></Save>\r\n                            {\"  \"}\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"danger\" type=\"submit\">\r\n                            <Resete></Resete>\r\n                            {\"  \"}\r\n                            Resete\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle>View Privileges</CardTitle>\r\n                  <hr />\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Company\\index.js",["1138","1139","1140","1141","1142","1143"],"import React from \"react\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteForeverOutlined\";\r\nimport EditIcon from \"@mui/icons-material/EditOutlined\";\r\nimport RemoveRedEye from \"@mui/icons-material/VpnKey\";\r\nimport Save from \"@mui/icons-material/Save\";\r\nimport Upload from \"@mui/icons-material/Upload\";\r\n\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./company.scss\";\r\n\r\nconst DatatableTables = () => {\r\n  const [state, setState] = React.useState(\"\");\r\n  const [city, setCity] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const [open1, setOpen1] = React.useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleChange1 = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const handleClose1 = () => {\r\n    setOpen1(false);\r\n  };\r\n\r\n  const handleOpen1 = () => {\r\n    setOpen1(true);\r\n  };\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Company ID\",\r\n        field: \"cid\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Company Name\",\r\n        field: \"cname\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Code\",\r\n        field: \"code\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Person Name\",\r\n        field: \"pname\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Mobile\",\r\n        field: \"mobile\",\r\n        sort: \"asc\",\r\n        width: 10,\r\n      },\r\n      {\r\n        label: \"City\",\r\n        field: \"city\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Added By\",\r\n        field: \"addedby\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Company\" />\r\n\r\n          {/*Text field 1*/}\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Company Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"companyname\"\r\n                            placeholder=\"Company Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Company Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Short Code</Label>\r\n                          <AvField\r\n                            name=\"shortcode\"\r\n                            placeholder=\"Short Code\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Short code\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Contact Person\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"contactperson\"\r\n                            placeholder=\"Contact Person\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Contact Person\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Designation\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"designation\"\r\n                            placeholder=\"Designation\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Designation\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      {/*Text field 2*/}\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Mobile No.</Label>\r\n                          <AvField\r\n                            name=\"mobileno\"\r\n                            placeholder=\"Mobile No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Mobile No..\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">\r\n                            Landline No.\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"landlineno\"\r\n                            placeholder=\"Landline No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Landline No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Email ID</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email ID\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a valid Email ID.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Website</Label>\r\n                          <AvField\r\n                            name=\"website\"\r\n                            placeholder=\"Website\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a Website url.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 3*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Address</Label>\r\n                          <AvField\r\n                            name=\"address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your Address\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Select State\r\n                          </Label>\r\n                          <FormControl style={{width: \"97%\"}} sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                            style={{height: \"30px\"}}\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              onOpen={handleOpen}\r\n                              value={state}\r\n                              label=\"State\"\r\n                              onChange={handleChange}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem value={1}>Andhra Pradesh</MenuItem>\r\n                              <MenuItem value={2}>Arunachal Pradesh</MenuItem>\r\n                              <MenuItem value={3}>Assam</MenuItem>\r\n                              <MenuItem value={4}>Bihar</MenuItem>\r\n                              <MenuItem value={5}>Chhattisgarh</MenuItem>\r\n                              <MenuItem value={6}>Goa</MenuItem>\r\n                              <MenuItem value={7}>Gujarat</MenuItem>\r\n                              <MenuItem value={8}>Haryana</MenuItem>\r\n                              <MenuItem value={9}>Himachal Pradesh</MenuItem>\r\n                              <MenuItem value={10}>Jammu and Kashmir</MenuItem>\r\n                              <MenuItem value={11}>Jharkhand</MenuItem>\r\n                              <MenuItem value={12}>Karnataka</MenuItem>\r\n                              <MenuItem value={13}>Kerala</MenuItem>\r\n\r\n                              <MenuItem value={14}>Madhya Pradesh</MenuItem>\r\n                              <MenuItem value={15}>Maharashtra</MenuItem>\r\n                              <MenuItem value={16}>Manipur</MenuItem>\r\n                              <MenuItem value={17}>Meghalaya</MenuItem>\r\n                              <MenuItem value={18}>Mizoram</MenuItem>\r\n                              <MenuItem value={19}>Nagaland</MenuItem>\r\n                              <MenuItem value={20}>Odisha</MenuItem>\r\n                              <MenuItem value={21}>Punjab</MenuItem>\r\n                              <MenuItem value={22}>Rajasthan</MenuItem>\r\n                              <MenuItem value={23}>Sikkim</MenuItem>\r\n                              <MenuItem value={24}>Tamil Nadu</MenuItem>\r\n                              <MenuItem value={25}>Telangana</MenuItem>\r\n                              <MenuItem value={26}>Tripura</MenuItem>\r\n                              <MenuItem value={27}>Uttar Pradesh</MenuItem>\r\n                              <MenuItem value={28}>Uttarakhand</MenuItem>\r\n                              <MenuItem value={29}>West Bengal</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Select City\r\n                          </Label>\r\n                          <FormControl style={{width: \"97%\"}} sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                            style={{height: \"30px\"}}\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open1}\r\n                              onClose={handleClose1}\r\n                              onOpen={handleOpen1}\r\n                              value={city}\r\n                              label=\"City\"\r\n                              onChange={handleChange1}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              <MenuItem value={1}>City1</MenuItem>\r\n                              <MenuItem value={2}>City2</MenuItem>\r\n                              <MenuItem value={3}>City3</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Pincode</Label>\r\n                          <AvField\r\n                            name=\"pincode\"\r\n                            placeholder=\"Pincode\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a Pincode.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 4*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">GSTIN</Label>\r\n                          <AvField\r\n                            name=\"gstin\"\r\n                            placeholder=\"GSTIN\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your GSTIN\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">PAN No.</Label>\r\n                          <AvField\r\n                            name=\"panno\"\r\n                            placeholder=\"PAN No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter PAN No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">CIN No.</Label>\r\n                          <AvField\r\n                            name=\"cinno\"\r\n                            placeholder=\"CIN No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your CIN No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">TDS No.</Label>\r\n                          <AvField\r\n                            name=\"tdsno\"\r\n                            placeholder=\"TDS No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your TDS No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 5*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">\r\n                            Company Logo(300x400)\r\n                          </Label>\r\n                          <br />\r\n                          <Button variant=\"contained\" component=\"label\">\r\n                            <Upload></Upload>\r\n                            {\"  \"}\r\n                            Upload File\r\n                            <input type=\"file\" hidden />\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Latitude</Label>\r\n                          <AvField\r\n                            name=\"latitude\"\r\n                            placeholder=\"Latitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Latitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">Longitude</Label>\r\n                          <AvField\r\n                            name=\"longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\" style={{ marginTop: \"3%\" }}>\r\n                        <div className=\"mb-3\">\r\n                          <div className=\"form-check mb-3\">\r\n                            <input\r\n                              className=\"form-check-input\"\r\n                              type=\"checkbox\"\r\n                              value=\"\"\r\n                              id=\"invalidCheck\"\r\n                              required\r\n                            />\r\n                            <label\r\n                              className=\"form-check-label\"\r\n                              htmlFor=\"invalidCheck\"\r\n                            >\r\n                              Agree to terms and conditions\r\n                            </label>\r\n                            <div className=\"invalid-feedback\">\r\n                              You must agree before submitting.\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text Field End*/}\r\n\r\n                    <Button color=\"primary\" type=\"submit\">\r\n                      <Save></Save> {\"  \"}\r\n                      Submit\r\n                    </Button>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Manage Branch\\index.js",["1144","1145","1146","1147","1148","1149"],"import React from \"react\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport RemoveRedEye from \"@mui/icons-material/RemoveRedEye\";\r\nimport Save from \"@mui/icons-material/Save\";\r\nimport Upload from \"@mui/icons-material/Upload\";\r\n\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./branch.scss\";\r\n\r\nconst DatatableTables = () => {\r\n  const [state, setState] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  const [city, setCity] = React.useState(\"\");\r\n  const [open1, setOpen1] = React.useState(false);\r\n  const handleChange1 = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const handleClose1 = () => {\r\n    setOpen1(false);\r\n  };\r\n\r\n  const handleOpen1 = () => {\r\n    setOpen1(true);\r\n  };\r\n\r\n  const [company, setCompany] = React.useState(\"\");\r\n  const [open2, setOpen2] = React.useState(false);\r\n  const handleChange2 = (event) => {\r\n    setCompany(event.target.value);\r\n  };\r\n\r\n  const handleClose2 = () => {\r\n    setOpen2(false);\r\n  };\r\n\r\n  const handleOpen2 = () => {\r\n    setOpen2(true);\r\n  };\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Company ID\",\r\n        field: \"cid\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Company Name\",\r\n        field: \"cname\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Code\",\r\n        field: \"code\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Person Name\",\r\n        field: \"pname\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Mobile\",\r\n        field: \"mobile\",\r\n        sort: \"asc\",\r\n        width: 10,\r\n      },\r\n      {\r\n        label: \"City\",\r\n        field: \"city\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Added By\",\r\n        field: \"addedby\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n      {\r\n        cid: \"MK0001\",\r\n        cname: \"SRV Infotech\",\r\n        code: \"SRV\",\r\n        pname: \"abc\",\r\n        mobile: \"9999999999\",\r\n        city: \"Kannur\",\r\n        addedby: \"admin\",\r\n        action: (\r\n          <>\r\n            {\" \"}\r\n            <RemoveRedEye />\r\n            <EditIcon />\r\n            <DeleteIcon />\r\n          </>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Branch\" />\r\n\r\n          {/*Text field 1*/}\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Select Company\r\n                          </Label>\r\n                          <FormControl style={{width: \"97%\"}} sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                              style={{ height: \"31px\" }}\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open2}\r\n                              onClose={handleClose2}\r\n                              onOpen={handleOpen2}\r\n                              value={company}\r\n                              label=\"State\"\r\n                              onChange={handleChange2}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem value={10}>company 1</MenuItem>\r\n                              <MenuItem value={20}>Company 2</MenuItem>\r\n                              <MenuItem value={30}>Company 3</MenuItem>\r\n                              <MenuItem value={10}>Company 4</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Branch Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"companyname\"\r\n                            placeholder=\"Select Branch\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Company Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Short Code</Label>\r\n                          <AvField\r\n                            name=\"shortcode\"\r\n                            placeholder=\"Short Code\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Short code\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Contact Person\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"contactperson\"\r\n                            placeholder=\"Contact Person\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Contact Person\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      {/*Text field 2*/}\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">\r\n                            Designation\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"designation\"\r\n                            placeholder=\"Designation\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Designation\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Mobile No.</Label>\r\n                          <AvField\r\n                            name=\"mobileno\"\r\n                            placeholder=\"Mobile No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Mobile No..\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">\r\n                            Landline No.\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"landlineno\"\r\n                            placeholder=\"Landline No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Landline No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Email ID</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email ID\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a valid Email ID.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 3*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Website</Label>\r\n                          <AvField\r\n                            name=\"website\"\r\n                            placeholder=\"Website\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a Website url.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Address</Label>\r\n                          <AvField\r\n                            name=\"address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your Address\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Select State\r\n                          </Label>\r\n                          <FormControl style={{width: \"97%\"}} sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                              style={{ height: \"31px\" }}\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              onOpen={handleOpen}\r\n                              value={state}\r\n                              label=\"State\"\r\n                              onChange={handleChange}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n\r\n                              <MenuItem value={10}>Andhra Pradesh</MenuItem>\r\n                              <MenuItem value={20}>Arunachal Pradesh</MenuItem>\r\n                              <MenuItem value={30}>Assam</MenuItem>\r\n                              <MenuItem value={10}>Bihar</MenuItem>\r\n                              <MenuItem value={20}>Chhattisgarh</MenuItem>\r\n                              <MenuItem value={30}>Goa</MenuItem>\r\n                              <MenuItem value={10}>Gujarat</MenuItem>\r\n                              <MenuItem value={20}>Haryana</MenuItem>\r\n                              <MenuItem value={30}>Himachal Pradesh</MenuItem>\r\n                              <MenuItem value={10}>Jammu and Kashmir</MenuItem>\r\n                              <MenuItem value={20}>Jharkhand</MenuItem>\r\n                              <MenuItem value={30}>Karnataka</MenuItem>\r\n                              <MenuItem value={20}>Kerala</MenuItem>\r\n\r\n                              <MenuItem value={10}>Madhya Pradesh</MenuItem>\r\n                              <MenuItem value={20}>Maharashtra</MenuItem>\r\n                              <MenuItem value={30}>Manipur</MenuItem>\r\n                              <MenuItem value={10}>Meghalaya</MenuItem>\r\n                              <MenuItem value={20}>Mizoram</MenuItem>\r\n                              <MenuItem value={30}>Nagaland</MenuItem>\r\n                              <MenuItem value={10}>Odisha</MenuItem>\r\n                              <MenuItem value={20}>Punjab</MenuItem>\r\n                              <MenuItem value={30}>Rajasthan</MenuItem>\r\n                              <MenuItem value={10}>Sikkim</MenuItem>\r\n                              <MenuItem value={20}>Tamil Nadu</MenuItem>\r\n                              <MenuItem value={30}>Telangana</MenuItem>\r\n                              <MenuItem value={10}>Tripura</MenuItem>\r\n                              <MenuItem value={20}>Uttar Pradesh</MenuItem>\r\n                              <MenuItem value={30}>Uttarakhand</MenuItem>\r\n                              <MenuItem value={10}>West Bengal</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Select City\r\n                          </Label>\r\n                          <FormControl style={{width: \"97%\"}} sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                              style={{ height: \"31px\" }}\r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open1}\r\n                              onClose={handleClose1}\r\n                              onOpen={handleOpen1}\r\n                              value={city}\r\n                              label=\"City\"\r\n                              onChange={handleChange1}\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              <MenuItem value={10}>City1</MenuItem>\r\n                              <MenuItem value={20}>City2</MenuItem>\r\n                              <MenuItem value={30}>City3</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 4*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Pincode</Label>\r\n                          <AvField\r\n                            name=\"pincode\"\r\n                            placeholder=\"Pincode\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a Pincode.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">GSTIN</Label>\r\n                          <AvField\r\n                            name=\"gstin\"\r\n                            placeholder=\"GSTIN\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your GSTIN\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">PAN No.</Label>\r\n                          <AvField\r\n                            name=\"panno\"\r\n                            placeholder=\"PAN No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter PAN No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">CIN No.</Label>\r\n                          <AvField\r\n                            name=\"cinno\"\r\n                            placeholder=\"CIN No.\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your CIN No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text field 5*/}\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">TDS No.</Label>\r\n                          <AvField\r\n                            name=\"tdsno\"\r\n                            placeholder=\"TDS No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Your TDS No.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">\r\n                            Company Logo(300x400)\r\n                          </Label>\r\n                          <br />\r\n                          <Button variant=\"contained\" component=\"label\">\r\n                            <Upload></Upload>\r\n                            {\"  \"}\r\n                            Upload File\r\n                            <input type=\"file\" hidden />\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Latitude</Label>\r\n                          <AvField\r\n                            name=\"latitude\"\r\n                            placeholder=\"Latitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Latitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">Longitude</Label>\r\n                          <AvField\r\n                            name=\"longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">\r\n                            Delivery Area(Km)\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">\r\n                            Delivery Type Rate\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">\r\n                            Delivery Slot\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\" style={{ marginTop: \"3%\" }}>\r\n                        <div className=\"mb-3\">\r\n                          <div className=\"form-check mb-3\">\r\n                            <input\r\n                              className=\"form-check-input\"\r\n                              type=\"checkbox\"\r\n                              value=\"\"\r\n                              id=\"invalidCheck\"\r\n                              required\r\n                            />\r\n                            <label\r\n                              className=\"form-check-label\"\r\n                              htmlFor=\"invalidCheck\"\r\n                            >\r\n                              Agree to terms and conditions\r\n                            </label>\r\n                            <div className=\"invalid-feedback\">\r\n                              You must agree before submitting.\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {/*Text Field End*/}\r\n\r\n                    <Button color=\"primary\" type=\"submit\">\r\n                      <Save></Save> {\"  \"}\r\n                      Submit\r\n                    </Button>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\MasterSettings\\Rules\\index.js",["1150","1151","1152","1153","1154","1155"],"import React from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Settings from \"@mui/icons-material/Settings\";\r\n\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\nimport Select from \"@mui/material/Select\";\r\n\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n  CardHeader,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./rules.scss\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nconst DatatableTables = () => {\r\n  const [state, setState] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    setState(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Main Menu\",\r\n        field: \"mmenu\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Sub Menu\",\r\n        field: \"smenu\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox />}\r\n                  label=\"View\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        field: \"view\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox />}\r\n                  label=\"Edit\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        field: \"edit\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox />}\r\n                  label=\"Delete\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        field: \"delete\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  value=\"start\"\r\n                  control={<Checkbox />}\r\n                  label=\"Export\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        field: \"export\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: [\r\n      //1st row start\r\n      {\r\n        mmenu: <>Accounts</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Free\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Account Head\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Expense\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Expense Analysis\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Monthly Report\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //2nd Row start\r\n\r\n      {\r\n        mmenu: <>Careers</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Career\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"job Application\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Subscribers\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Career Enquiries\"\r\n                />\r\n                <Grid item lg=\"10\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Internship\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //3rd Row start\r\n\r\n      {\r\n        mmenu: <>Certification</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Certificates\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Process Certificates\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Certification Request\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Certificates\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Process Certificates\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //4th Row start\r\n\r\n      {\r\n        mmenu: <>Curriculam</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Curriculum\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //5th Row start\r\n\r\n      {\r\n        mmenu: <>Daily report</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Daily report\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //6th Row start\r\n\r\n      {\r\n        mmenu: <>Dashboard</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Dashboard\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //7th row start\r\n      {\r\n        mmenu: <>Enquiry</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Enquiry\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"View Enquiry\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"web Enquiry\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Curriculum\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Franchise\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Complaints\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Franchise\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Contact Us\"\r\n                />\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //8th Row start\r\n\r\n      {\r\n        mmenu: <>Event Registration</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"ICF\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //9th row start\r\n      {\r\n        mmenu: <>Manage</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"New Course\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"New Software \"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Assign Software\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Syllabus\"\r\n                />\r\n                <Grid item lg=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //10th row start\r\n      {\r\n        mmenu: <>Placements</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Company\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Add Job \"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Placement Registration\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n\r\n      //11th row start\r\n      {\r\n        mmenu: <>Students</>,\r\n        smenu: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Web Registration\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"New Registration \"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Ongoing Students\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Logging Students\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Upcoming Students\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Completed Students\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Certificates Students\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"Textbooks\"\r\n                />\r\n                <Grid item lg=\"9\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n\r\n        view: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        edit: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        delete: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox defaultChecked />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n        export: (\r\n          <>\r\n            <FormControl component=\"fieldset\">\r\n              <FormGroup aria-label=\"position\" row>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n                <FormControlLabel\r\n                  control={<Checkbox />}\r\n                  label=\"\"\r\n                  style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n                />\r\n                <Grid item md=\"8\"></Grid>\r\n              </FormGroup>\r\n            </FormControl>\r\n          </>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Rules\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Set Rules</Label>\r\n                          <FormControl sx={{ m: 1, width: 273 }}>\r\n                            {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                              Age\r\n                            </InputLabel> */}\r\n                            <Select\r\n                            \r\n                              labelId=\"demo-controlled-open-select-label\"\r\n                              id=\"demo-controlled-open-select\"\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              onOpen={handleOpen}\r\n                              value={state}\r\n                              label=\"State\"\r\n                              onChange={handleChange}\r\n                            >\r\n                              <MenuItem value={0}>Admin</MenuItem>\r\n\r\n                              <MenuItem value={1}>Director</MenuItem>\r\n                              <MenuItem value={2}>Center Manager</MenuItem>\r\n                              <MenuItem value={3}>Marketing & Sales</MenuItem>\r\n                              <MenuItem value={4}>Accounts</MenuItem>\r\n                              <MenuItem value={5}>General Manager</MenuItem>\r\n                              <MenuItem value={6}>Business Head</MenuItem>\r\n                              <MenuItem value={7}>Trainee</MenuItem>\r\n                              <MenuItem value={8}>Masters</MenuItem>\r\n                              <MenuItem value={9}>Accounts Master</MenuItem>\r\n                              <MenuItem value={10}>\r\n                                Central Manager - Australia\r\n                              </MenuItem>\r\n                              <MenuItem value={11}>Technical Head</MenuItem>\r\n                              <MenuItem value={12}>RH Admin</MenuItem>\r\n                              <MenuItem value={13}>Technical Manager</MenuItem>\r\n                              <MenuItem value={14}>\r\n                                Centre Manager - TCR\r\n                              </MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\" className=\"rules\">\r\n                            <Settings></Settings>\r\n                            {\"  \"}Set Rules\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle>View Rules</CardTitle>\r\n                  <hr />\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\Vectormap.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\Common\\Breadcrumb.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\piechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\dountchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\polarchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\barchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\radarchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\scatterchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\linechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\bubblechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\candlestickchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\doughnutchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\piechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\gaugechart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\knob\\knob.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linebarchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\wasteItem\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\backend_helper.js",["1156"],"import axios from \"axios\";\r\nimport { post, del, get, put } from \"./api_helper\";\r\nimport * as url from \"./url_helper\";\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n  const user = localStorage.getItem(\"user\");\r\n  if (user) return JSON.parse(user);\r\n  return null;\r\n};\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n  return getLoggedInUser() !== null;\r\n};\r\n\r\n// Login Method\r\nconst login = (data) => post(url.POST_LOGIN, data);\r\n\r\nexport const checkAuth = (data) => post(url.CHECK_AUTH, data);\r\n\r\n// get menu options\r\nexport const getMenusOptions = (userId) => get(`${url.GET_Menu_OPTIONS}?id=${userId}`);\r\n// postForgetPwd\r\n// const postJwtForgetPwd = (data) =>\r\n//   post(url.POST_FAKE_JWT_PASSWORD_FORGET, data);\r\n\r\n// get Product detail\r\n// export const getProductDetail = (id) =>\r\n//   get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } });\r\n\r\nexport const getUserProfile = () => get(url.GET_USER_PROFILE);\r\n\r\n// get users\r\nexport const getUsers = () => get(url.GET_USERS);\r\n\r\n// add user\r\nexport const addUser = (user) => post(url.ADD_USER, user);\r\nexport const getUser = (userId) => get(url.GET_USER, userId);\r\nexport const updateUser = (user) => put(`${url.UPDATE_USER}/${user._id}`, user);\r\nexport const deleteUser = (userId) => del(url.DELETE_USER, userId);\r\n\r\n\r\n// get users\r\nexport const getDistricts = () => get(url.GET_DISTRICTS);\r\n\r\n// add user\r\nexport const addDistrict = (district) => post(url.ADD_DISTRICT, district);\r\nexport const getDistrict = (userId) => get(url.GET_DISTRICT, userId);\r\nexport const updateDistrict = (district) => put(`${url.UPDATE_DISTRICT}/${district._id}`, district);\r\nexport const deleteDistrict = (userId) => del(url.DELETE_DISTRICT, userId);\r\n\r\n// get wards\r\nexport const getWards  = () => get(url.GET_WARDS);\r\n\r\n// add ward\r\nexport const addWard = (ward) => post(url.ADD_WARD, ward);\r\nexport const getWard = (wardId) => get(url.GET_WARD, wardId);\r\nexport const updateWard = (ward) => put(`${url.UPDATE_WARD}/${ward._id}`, ward);\r\nexport const deleteWard = (wardId) => del(url.DELETE_WARD, wardId);\r\n\r\n\r\n// get localbodies\r\nexport const getLocalbodies  = () => get(url.GET_LOCALBODIES);\r\n\r\n// add localbodies\r\nexport const addLocalbody = (localbody) => post(url.ADD_LOCALBODY, localbody);\r\nexport const getLocalbody = (localbodyname) => get(`${url.GET_LOCALBODY}/${localbodyname}`, {localbodyname:localbodyname});\r\nexport const updateLocalbody = (localbody) => put(`${url.UPDATE_LOCALBODY}/${localbody._id}`, localbody);\r\nexport const deleteLocalbody= (localbodyId) => del(url.DELETE_LOCALBODY, localbodyId);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// get privilages options\r\nexport const getPrivilagesOptions = () => get(url.GET_PRIVILAGES_OPTIONS);\r\n\r\n// get companies options\r\nexport const getCompaniesOptions = () => get(url.GET_COMPANIES_OPTIONS);\r\nexport const getCompaniesMasterOptions = (company_id) => get(url.GET_COMPANIES_MASTER_OPTIONS+\"?id=\"+company_id);\r\nexport const getLocalbodiesMasterOptions = (company_id) => get(url.GET_LOCALBODIES_MASTER_OPTIONS+\"?id=\"+company_id);\r\n\r\n// get Branches options\r\nexport const getBranchesOptions = (companyId) =>\r\n  get(`${url.GET_BRANCHES_OPTIONS}/${companyId}`, { companyId: companyId });\r\n\r\nexport { getLoggedInUser, isUserAuthenticated, login };\r\n\r\n\r\n// get Groups\r\nexport const getGroups  = () => get(url.GET_GROUPS);\r\n\r\nexport const addGroup = (group) => post(url.ADD_GROUP, group);\r\nexport const getGroup = (groupname) => get(url.GET_GROUP, groupname);\r\nexport const updateGroup = (group) => put(`${url.UPDATE_GROUP}/${group._id}`, group);\r\nexport const deleteGroup= (groupId) => del(url.DELETE_GROUP, groupId);\r\n\r\n\r\n//get customers\r\nexport const getCustomers = () =>get(url.GET_CUSTOMERS);\r\n\r\nexport const getWardOptions = (localbodyId) =>\r\n  get(`${url.GET_WARD_OPTIONS}/${localbodyId}`, { localbodyId: localbodyId });\r\n\r\n//waste items\r\n  export const getWasteItems = () => get(url.GET_WASTEITEMS);\r\n  export const getWasteTypes = () => get(url.GET_WASTE_TYPES);\r\n  export const getWasteCategories = () => get(url.GET_WASTE_CATEGORIES);\r\n  export const addWasteItem = (wasteItem) => post(url.ADD_WASTE_ITEM, wasteItem);\r\n  export const updateWasteItem = (wasteItem) => put(`${url.UPDATE_WASTE_ITEM}/${wasteItem.get('id')}`, wasteItem);\r\n export const deleteWasteItem= (wasteItemId) => del(url.DELETE_WASTE_ITEM, wasteItemId);\r\n\r\n //customer categories\r\n export const getCustomerCategories=()=>get(url.GET_CUST_CATEGORIES)\r\n export const addCategory= (category) => post(url.ADD_CUST_CATEGORY, category);\r\nexport const getCategory = (catId) => get(url.GET_CUST_CATEGORY, catId);\r\nexport const updateCategory = (category) => put(`${url.UPDATE_CUST_CATEGORY}/${category._id}`, category);\r\nexport const deleteCategory = (catId) => del(url.DELETE_CUST_CATEGORY, catId);\r\n\r\n\r\nexport const getQrcode  = () => get(url.GET_QRCODE);\r\n\r\nexport const addQrcode = (data) => post(url.ADD_QRCODE, data);\r\n\r\nexport const getTariff=()=>get(url.GET_TARIFF);","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\url_helper.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\api_helper.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\jwt-token-access\\accessToken.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\PieChart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\RadialChart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\LineColumnArea.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dountchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\apaexlinecolumn.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\barchart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\ColumnWithDataLabels.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dashedLine.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\SplineArea.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\chartapex.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\latest-transaction.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\socialsource.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\recent-activity.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\topuser.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\topselling-product.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\salesanalytics-chart.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Dashboard\\mini-widget.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Utility\\card-pricing.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidedark.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slideindividual.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithfade.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithindicator.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcaption.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slide.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcontrol.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SidebarContent.js",["1157","1158","1159","1160","1161","1162","1163","1164"],"import PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useState, useRef } from 'react';\r\nimport { sidebarItem } from './SideBardata';\r\nimport SubMenu from './SideBarMenu';\r\nimport jwt_decode from 'jwt-decode';\r\n// //Import Scrollbar\r\nimport SimpleBar from 'simplebar-react';\r\n\r\n// MetisMenu\r\nimport MetisMenu from 'metismenujs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n//i18n\r\nimport { withTranslation } from 'react-i18next';\r\nimport { DropdownMenu } from 'reactstrap';\r\nimport { getMenusOptions } from '../../store/menu/actions';\r\n\r\nconst SidebarContent = (props) => {\r\n  const ref = useRef();\r\n  const dispatch = useDispatch();\r\n  const menuOptions = useSelector((state) => state.Menus.menuOptions);\r\n  const [userId, setUserId] = useState(1);\r\n\r\n  useEffect(() => {\r\n      var data = localStorage.getItem('authUser');\r\n      dispatch(getMenusOptions(JSON.parse(data)._id));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SimpleBar\r\n        style={{ maxHeight: '100%' }}\r\n        ref={ref}\r\n        className=\"sidebar-menu-scroll\"\r\n      >\r\n        <div id=\"sidebar-menu\">\r\n          {menuOptions &&\r\n            menuOptions.map((item, index) => {\r\n              return <SubMenu item={item} key={index} />;\r\n            })}\r\n        </div>\r\n      </SimpleBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSidebarContent.propTypes = {\r\n  location: PropTypes.object,\r\n  t: PropTypes.any,\r\n};\r\n\r\nexport default withRouter(withTranslation()(SidebarContent));\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js",["1165"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// users\r\nimport user4 from \"../../../assets/images/users/avatar-4.jpg\";\r\n\r\nconst ProfileMenu = (props) => {\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [menu, setMenu] = useState(false);\r\n\r\n  const [username, setusername] = useState(\"Admin\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n      setusername(obj.firstName);\r\n    }\r\n  }, [props.success]);\r\n\r\n  let logout = () => {\r\n    localStorage.removeItem(\"authUser\");\r\n    props.history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dropdown\r\n        isOpen={menu}\r\n        toggle={() => setMenu(!menu)}\r\n        className=\"d-inline-block\"\r\n      >\r\n        <DropdownToggle\r\n          className=\"btn header-item waves-effect\"\r\n          id=\"page-header-user-dropdown\"\r\n          tag=\"button\"\r\n        >\r\n          <img\r\n            className=\"rounded-circle header-profile-user\"\r\n            src={user4}\r\n            alt=\"Header Avatar\"\r\n          />\r\n          <span className=\"d-none d-xl-inline-block ms-1 fw-medium font-size-15\">\r\n            {username}\r\n          </span>{\" \"}\r\n          <i className=\"uil-angle-down d-none d-xl-inline-block font-size-15\"></i>\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"dropdown-menu-end\">\r\n          <DropdownItem tag=\"a\" href=\"/profile\">\r\n            {\" \"}\r\n            <i className=\"uil uil-user-circle font-size-18 align-middle text-muted me-1\"></i>\r\n            {props.t(\"View Profile\")}{\" \"}\r\n          </DropdownItem>\r\n          <DropdownItem tag=\"a\" href=\"/\">\r\n            <i className=\"uil uil-history font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"History\")}\r\n          </DropdownItem>\r\n          <DropdownItem tag=\"a\" href=\"#\">\r\n            <i className=\"uil uil-cog font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"Settings\")}\r\n            <span className=\"badge bg-soft-success rounded-pill mt-1 ms-2\">\r\n              03\r\n            </span>\r\n          </DropdownItem>\r\n          {/* <DropdownItem tag=\"a\" href=\"auth-lock-screen\">\r\n            <i className=\"uil uil-lock-alt font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"Lock screen\")}\r\n          </DropdownItem> */}\r\n          <div className=\"dropdown-divider\" />\r\n          <div\r\n            className=\"dropdown-item\"\r\n            onClick={logout}\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <i className=\"uil uil-sign-out-alt font-size-18 align-middle me-1 text-muted\"></i>\r\n            <span>{props.t(\"Logout\")}</span>\r\n          </div>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nProfileMenu.propTypes = {\r\n  success: PropTypes.any,\r\n  t: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, {})(withTranslation()(ProfileMenu))\r\n);\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\saga.js",["1166"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_DISTRICT,\r\n  ADD_DISTRICT,\r\n  DELETE_DISTRICT,\r\n  UPDATE_DISTRICT,\r\n  GET_DISTRICTS,\r\n  \r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getDistrictsSuccess,\r\n  getDistrictsFail,\r\n  getDistrictSuccess,\r\n  getDistrictFail,\r\n  addDistrictFail,\r\n  addDistrictSuccess,\r\n  updateDistrictFail,\r\n  updateDistrictSuccess,\r\n  deleteDistrictFail,\r\n  deleteDistrictSuccess,\r\n  \r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getDistricts,\r\n  getDistrict,\r\n  addDistrict,\r\n  updateDistrict,\r\n  deleteDistrict,\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchDistricts() {\r\n  try {\r\n    const response = yield call(getDistricts);\r\n    yield put(getDistrictsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getDistrictsFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetDistrict() {\r\n  try {\r\n    const response = yield call(getDistrict);\r\n    yield put(getDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(getDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddDistrict({ payload: user }) {\r\n  try {\r\n    const response = yield call(addDistrict, user);\r\n    yield put(addDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(addDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateDistrict({ payload: user }) {\r\n  delete user.name1;\r\n  delete user.privilage1;\r\n  delete user.company1;\r\n  delete user.branch1;\r\n  delete user.action;\r\n  console.log(user);\r\n  if (user.privilage) {\r\n    user.privilage = user.privilage._id;\r\n  }\r\n  if (user.company) {\r\n    user.company = user.company._id;\r\n  }\r\n  if (user.branch) {\r\n    user.branch = user.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateDistrict, user);\r\n    yield put(updateDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteDistrict({ payload: userId }) {\r\n  try {\r\n    const response = yield call(deleteDistrict, userId);\r\n    yield put(deleteDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteDistrictFail(error.response));\r\n  }\r\n}\r\n\r\n\r\nfunction* userSaga() {\r\n  yield takeEvery(GET_DISTRICTS, fetchDistricts);\r\n  yield takeEvery(GET_DISTRICT, onGetDistrict);\r\n  yield takeEvery(ADD_DISTRICT, onAddDistrict);\r\n  yield takeEvery(UPDATE_DISTRICT, onUpdateDistrict);\r\n  yield takeEvery(DELETE_DISTRICT, onDeleteDistrict);\r\n \r\n\r\n}\r\n\r\nexport default userSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\saga.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\saga.js",["1167"],"import { takeEvery, put, call } from \"redux-saga/effects\";\r\n\r\nimport { GET_COMPANIES_OPTIONS,GET_COMPANIES_MASTER_OPTIONS } from \"./actionTypes\";\r\n\r\nimport { getCompaniesOptionsSuccess, getCompaniesOptionsFail, getCompaniesMasterOptionsSuccess, getCompaniesMasterOptionsFail } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getCompaniesOptions, getCompaniesMasterOptions } from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchCompanies() {\r\n  try {\r\n    const response = yield call(getCompaniesOptions);\r\n    yield put(getCompaniesOptionsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getCompaniesOptionsFail(error));\r\n  }\r\n}\r\n\r\nfunction* fetchMasterCompanies({company_id:company_id}) {\r\n  try {\r\n    const response = yield call(getCompaniesMasterOptions,company_id);\r\n    yield put(getCompaniesMasterOptionsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getCompaniesMasterOptionsFail(error));\r\n  }\r\n}\r\nfunction* companiesSaga() {\r\n  yield takeEvery(GET_COMPANIES_OPTIONS, fetchCompanies);\r\n  yield takeEvery(GET_COMPANIES_MASTER_OPTIONS, fetchMasterCompanies);\r\n}\r\n\r\nexport default companiesSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\saga.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\saga.js",["1168"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_USER,\r\n  ADD_USER,\r\n  DELETE_USER,\r\n  UPDATE_USER,\r\n  GET_USERS,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getUsersSuccess,\r\n  getUsersFail,\r\n  getUserSuccess,\r\n  getUserFail,\r\n  addUserFail,\r\n  addUserSuccess,\r\n  updateUserFail,\r\n  updateUserSuccess,\r\n  deleteUserFail,\r\n  deleteUserSuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getUsers,\r\n  getUser,\r\n  addUser,\r\n  updateUser,\r\n  deleteUser,\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchUsers() {\r\n  try {\r\n    const response = yield call(getUsers);\r\n    yield put(getUsersSuccess(response));\r\n  } catch (error) {\r\n    yield put(getUsersFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetUser() {\r\n  try {\r\n    const response = yield call(getUser);\r\n    yield put(getUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(getUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddUser({ payload: user }) {\r\n  try {\r\n    const response = yield call(addUser, user);\r\n    yield put(addUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(addUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateUser({ payload: user }) {\r\n  delete user.name1;\r\n  delete user.privilage1;\r\n  delete user.company1;\r\n  delete user.branch1;\r\n  delete user.action;\r\n  console.log(user);\r\n  if (user.privilage) {\r\n    user.privilage = user.privilage._id;\r\n  }\r\n  if (user.company) {\r\n    user.company = user.company._id;\r\n  }\r\n  if (user.branch) {\r\n    user.branch = user.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateUser, user);\r\n    yield put(updateUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteUser({ payload: userId }) {\r\n  try {\r\n    const response = yield call(deleteUser, userId);\r\n    yield put(deleteUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* userSaga() {\r\n  yield takeEvery(GET_USERS, fetchUsers);\r\n  yield takeEvery(GET_USER, onGetUser);\r\n  yield takeEvery(ADD_USER, onAddUser);\r\n  yield takeEvery(UPDATE_USER, onUpdateUser);\r\n  yield takeEvery(DELETE_USER, onDeleteUser);\r\n}\r\n\r\nexport default userSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\saga.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\saga.js",["1169","1170","1171","1172","1173","1174","1175"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { EDIT_PROFILE } from \"./actionTypes\";\r\nimport { profileSuccess, profileError } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeProfile,\r\n  postJwtProfile,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\nfunction* editProfile({ payload: { user } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(\r\n  //       fireBaseBackend.editProfileAPI,\r\n  //       user.username,\r\n  //       user.idx\r\n  //     );\r\n  //     yield put(profileSuccess(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtProfile, \"/post-jwt-profile\", {\r\n  //       username: user.username,\r\n  //       idx: user.idx,\r\n  //     });\r\n  //     yield put(profileSuccess(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\r\n  //     const response = yield call(postFakeProfile, {\r\n  //       username: user.username,\r\n  //       idx: user.idx,\r\n  //     });\r\n  //     yield put(profileSuccess(response));\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(profileError(error));\r\n  // }\r\n}\r\nexport function* watchProfile() {\r\n  yield takeEvery(EDIT_PROFILE, editProfile);\r\n}\r\n\r\nfunction* ProfileSaga() {\r\n  yield all([fork(watchProfile)]);\r\n}\r\n\r\nexport default ProfileSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\saga.js",["1176","1177","1178","1179","1180","1181","1182"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { FORGET_PASSWORD } from \"./actionTypes\";\r\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeForgetPwd,\r\n  postJwtForgetPwd,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(fireBaseBackend.forgetPassword, user.email);\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\r\n  //       email: user.email,\r\n  //     });\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   } else {\r\n  //     const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\r\n  //       email: user.email,\r\n  //     });\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(userForgetPasswordError(error));\r\n  // }\r\n}\r\n\r\nexport function* watchUserPasswordForget() {\r\n  yield takeEvery(FORGET_PASSWORD, forgetUser);\r\n}\r\n\r\nfunction* forgetPasswordSaga() {\r\n  yield all([fork(watchUserPasswordForget)]);\r\n}\r\n\r\nexport default forgetPasswordSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\saga.js",["1183","1184"],"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { CHECK_AUTH, LOGIN_USER, LOGOUT_USER } from \"./actionTypes\";\r\nimport { apiError, loginSuccess } from \"./actions\";\r\nimport { login, checkAuth } from \"../../../helpers/backend_helper\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n//Include Both Helper File with needed methods\r\n\r\nfunction* loginUser({ payload: { user, history } }) {\r\n  try {\r\n    const response = yield call(login, {\r\n      username: user.username,\r\n      password: user.password,\r\n    });\r\n    yield put(loginSuccess());\r\n    localStorage.setItem(\"authUser\", JSON.stringify(response.data));\r\n    cookies.set(\"rememberMe\", \"true\", { path: \"/\" });\r\n    history.push(\"/dashboard\");\r\n    window.location.reload();\r\n  } catch (error) {\r\n    yield put(apiError(error.response));\r\n  }\r\n}\r\n\r\nfunction* checkAuthentication({ payload: history }) {\r\n  try {\r\n    let adminData = JSON.parse(localStorage.getItem(\"authUser\"));\r\n    const response = yield call(checkAuth, {\r\n      token: adminData.token,\r\n    });\r\n    history.push(\"/dashboard\");\r\n  } catch (error) {\r\n    localStorage.removeItem(\"authUser\");\r\n    history.push(\"/login\");\r\n  }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n  try {\r\n    localStorage.removeItem(\"authUser\");\r\n    history.push(\"/login\");\r\n  } catch (error) {\r\n    yield put(apiError(error));\r\n  }\r\n}\r\n\r\nfunction* authSaga() {\r\n  yield takeEvery(LOGIN_USER, loginUser);\r\n  yield takeEvery(LOGOUT_USER, logoutUser);\r\n  yield takeEvery(CHECK_AUTH, checkAuthentication);\r\n}\r\n\r\nexport default authSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\saga.js",["1185","1186","1187","1188","1189","1190","1191"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from \"./actionTypes\";\r\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeRegister,\r\n  postJwtRegister,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\n// initialize relavant method of both Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(\r\n  //       fireBaseBackend.registerUser,\r\n  //       user.email,\r\n  //       user.password\r\n  //     );\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtRegister, \"/post-jwt-register\", user);\r\n  //     console.log(response);\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\r\n  //     const response = yield call(postFakeRegister, user);\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(registerUserFailed(error));\r\n  // }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n  yield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n  yield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customer\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\localbody\\reducer.js",["1192","1193","1194","1195"],"import {\r\n  GET_LOCALBODIES,\r\n  GET_LOCALBODIES_FAIL,\r\n  GET_LOCALBODIES_SUCCESS,\r\n  ADD_LOCALBODY,\r\n  ADD_LOCALBODY_FAIL,\r\n  ADD_LOCALBODY_SUCCESS,\r\n  DELETE_LOCALBODY,\r\n  DELETE_LOCALBODY_SUCCESS,\r\n  DELETE_LOCALBODY_FAIL,\r\n  UPDATE_LOCALBODY,\r\n  UPDATE_LOCALBODY_SUCCESS,\r\n  UPDATE_LOCALBODY_FAIL,\r\n  GET_LOCALBODY,\r\n  GET_LOCALBODY_SUCCESS,\r\n  GET_LOCALBODY_FAIL\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  localbodies: [],\r\n  addingLocalbody: false,\r\n  deletingLocalbody: false,\r\n  addLocalbodyResponse: {},\r\n  updateLocalbodyResponse: {},\r\n  deleteLocalbodyResponse: {},\r\n  localbodyIdToBeDeleted: \"\",\r\n  localbody: {},\r\n  error: {},\r\n};\r\n\r\nconst Localbody = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_LOCALBODIES:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_LOCALBODIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        localbodies: action.payload.data,\r\n      };\r\n\r\n    case GET_LOCALBODIES_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n     \r\n      \r\n      case GET_LOCALBODY:\r\n        return {\r\n          ...state,\r\n          params: action.payload,\r\n        };\r\n        case GET_LOCALBODY_SUCCESS:\r\n          return {\r\n            ...state,\r\n            localbody: action.payload.data,\r\n          };\r\n          case GET_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        addingLocalbody: true,\r\n        localbody: action.payload,\r\n      };\r\n\r\n    case ADD_LOCALBODY_SUCCESS:\r\n      let newLocalbodys = [...state.localbodies, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingLocalbody: false,\r\n        addLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody added successfully\",\r\n        },\r\n        localbodies: newLocalbodys,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        addingLocalbody: false,\r\n        addLocalbodyResponse: { type: \"failure\", message: \"Adding localbody failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: true,\r\n        localbodyIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_LOCALBODY_SUCCESS:\r\n       let newLocalbodyss = state.localbodies.filter((item) => {\r\n        return item._id != state.localbodyIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: false,\r\n        localbodyIdToBeDeleted: \"\",\r\n        deletingLocalbody: false,\r\n        deleteLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody deleted successfully\",\r\n        },\r\n        localbodies: newLocalbodyss,\r\n      };\r\n\r\n    case DELETE_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: false,\r\n        deleteLocalbodyResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting localbody failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: true,\r\n        localbody: action.payload,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY_SUCCESS:\r\n      let newLocalbodysss = state.localbodies.map((item) => {\r\n        if (item._id == state.localbody._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: false,\r\n        localbody: \"\",\r\n        updatingLocalbody: false,\r\n        updateLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody updated successfully\",\r\n        },\r\n        localbodies: newLocalbodysss,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: false,\r\n        updateLocalbodyResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating localbody failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Localbody;\r\n\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\group\\reducer.js",["1196","1197","1198","1199"],"import{\r\n    GET_GROUPS,\r\n    GET_GROUPS_SUCCESS,\r\n    GET_GROUPS_FAIL,\r\n    GET_GROUP,\r\n    GET_GROUP_SUCCESS,\r\n    GET_GROUP_FAIL,\r\n    ADD_GROUP,\r\n    ADD_GROUP_SUCCESS,\r\n    ADD_GROUP_FAIL,\r\n    UPDATE_GROUP,\r\n    UPDATE_GROUP_SUCCESS,\r\n    UPDATE_GROUP_FAIL,\r\n    DELETE_GROUP,\r\n    DELETE_GROUP_SUCCESS,\r\n    DELETE_GROUP_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE={\r\n  groups:[],\r\n  addingGroup: false,\r\n  deletingGroup: false,\r\n  addGroupResponse: {},\r\n  updateGroupResponse: {},\r\n  deleteGroupResponse: {},\r\n  groupIdToBeDeleted: \"\",\r\n  group: {},\r\n  error: {},\r\n}\r\n\r\n\r\n\r\nconst Group = (state=INIT_STATE, action) => {\r\n    switch (action.type) {\r\n     case GET_GROUPS:\r\n       return{\r\n         ...state,\r\n         params:action.payload,\r\n\r\n       };\r\n      case GET_GROUPS_SUCCESS:\r\n        return {\r\n          ...state,\r\n         groups: action.payload.data,\r\n        };\r\n  \r\n      case GET_GROUPS_FAIL:\r\n        return {\r\n          ...state,\r\n          error: action.payload,\r\n        };\r\n        case GET_GROUP:\r\n          return {\r\n            ...state,\r\n            params: action.payload,\r\n          };\r\n          case GET_GROUP_SUCCESS:\r\n            return {\r\n              ...state,\r\n              group: action.payload.data,\r\n            };\r\n            case GET_GROUP_FAIL:\r\n        return {\r\n          ...state,\r\n          error: action.payload,\r\n        };\r\n      case ADD_GROUP:\r\n        return {\r\n          ...state,\r\n          addingGroup: true,\r\n          group: action.payload,\r\n        };\r\n  \r\n      case ADD_GROUP_SUCCESS:\r\n        let newGroups = [...state.groups, action.payload.data];\r\n        return {\r\n          ...state,\r\n          addingGroup: false,\r\n          addGroupResponse: {\r\n            type: \"success\",\r\n            message: \"Group added successfully\",\r\n          },\r\n          groups: newGroups,\r\n          error: {},\r\n        };\r\n  \r\n      case ADD_GROUP_FAIL:\r\n        return {\r\n          ...state,\r\n          addingGroup: false,\r\n          addGroupResponse: { type: \"failure\", message: \"Adding GROUP failed\" },\r\n          error: action.payload,\r\n        };\r\n      case DELETE_GROUP:\r\n        return {\r\n          ...state,\r\n          deletingGroup: true,\r\n          groupIdToBeDeleted: action.payload,\r\n        };\r\n  \r\n      case DELETE_GROUP_SUCCESS:\r\n         let newGroupss = state.groups.filter((item) => {\r\n          return item._id != state.groupIdToBeDeleted;\r\n        });\r\n        return {\r\n          ...state,\r\n          deletingGroup: false,\r\n          groupIdToBeDeleted: \"\",\r\n          deletingGroup: false,\r\n          deleteGroupResponse: {\r\n            type: \"success\",\r\n            message: \"Group deleted successfully\",\r\n          },\r\n          groups: newGroupss,\r\n        };\r\n  \r\n      case DELETE_GROUP_FAIL:\r\n        return {\r\n          ...state,\r\n          deletingGroup: false,\r\n          deleteGroupResponse: {\r\n            type: \"failure\",\r\n            message: \"Deleting group failed\",\r\n          },\r\n          error: action.payload,\r\n        };\r\n  \r\n      case UPDATE_GROUP:\r\n        return {\r\n          ...state,\r\n          updatingGroup: true,\r\n          group: action.payload,\r\n        };\r\n  \r\n      case UPDATE_GROUP_SUCCESS:\r\n        let newGroupsss = state.groups.map((item) => {\r\n          if (item._id == state.group._id) {\r\n            return action.payload.data;\r\n          } else {\r\n            return item;\r\n          }\r\n        });\r\n        return {\r\n          ...state,\r\n          updatingGroup: false,\r\n          group: \"\",\r\n          updatingGroup: false,\r\n          updateGroupResponse: {\r\n            type: \"success\",\r\n            message: \" Group updated successfully\",\r\n          },\r\n          groups: newGroupsss,\r\n        };\r\n  \r\n      case UPDATE_GROUP_FAIL:\r\n        return {\r\n          ...state,\r\n          updatingGroup: false,\r\n          updateGroupResponse: {\r\n            type: \"failure\",\r\n            message: \"Updating group failed\",\r\n          },\r\n          error: action.payload,\r\n        };\r\n        default:\r\n           return state\r\n    }\r\n}\r\n\r\n    export default Group;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\ward\\reducer.js",["1200","1201","1202","1203"],"import {\r\n  GET_WARDS,\r\n  GET_WARDS_FAIL,\r\n  GET_WARDS_SUCCESS,\r\n  ADD_WARD,\r\n  ADD_WARD_FAIL,\r\n  ADD_WARD_SUCCESS,\r\n  DELETE_WARD,\r\n  DELETE_WARD_SUCCESS,\r\n  DELETE_WARD_FAIL,\r\n  UPDATE_WARD,\r\n  UPDATE_WARD_SUCCESS,\r\n  UPDATE_WARD_FAIL,\r\n  GET_WARD_OPTIONS_FAIL,\r\n  GET_WARD_OPTIONS_SUCCESS,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  wards: [],\r\n  addingWard: false,\r\n  deletingWard: false,\r\n  addWardResponse: {},\r\n  updateWardResponse: {},\r\n  deleteWardResponse: {},\r\n  wardIdToBeDeleted: \"\",\r\n  ward: {},\r\n  wardOptions:[],\r\n  error: {},\r\n};\r\n\r\nconst Ward = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_WARDS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_WARDS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        wards: action.payload.data,\r\n      };\r\n\r\n    case GET_WARDS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_WARD:\r\n      return {\r\n        ...state,\r\n        addingWard: true,\r\n        ward: action.payload,\r\n      };\r\n\r\n    case ADD_WARD_SUCCESS:\r\n      let newWards = [...state.wards, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingWard: false,\r\n        addWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward added successfully\",\r\n        },\r\n        wards: newWards,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        addingWard: false,\r\n        addWardResponse: { type: \"failure\", message: \"Adding ward failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_WARD:\r\n      return {\r\n        ...state,\r\n        deletingWard: true,\r\n        wardIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_WARD_SUCCESS:\r\n       let newWardss = state.wards.filter((item) => {\r\n        return item._id != state.wardIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingWard: false,\r\n        wardIdToBeDeleted: \"\",\r\n        deletingWard: false,\r\n        deleteWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward deleted successfully\",\r\n        },\r\n        wards: newWardss,\r\n      };\r\n\r\n    case DELETE_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingWard: false,\r\n        deleteWardResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting ward failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_WARD:\r\n      return {\r\n        ...state,\r\n        updatingWard: true,\r\n        ward: action.payload,\r\n      };\r\n\r\n    case UPDATE_WARD_SUCCESS:\r\n      let newWardsss = state.wards.map((item) => {\r\n        if (item._id == state.ward._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingWard: false,\r\n        ward: \"\",\r\n        updatingWard: false,\r\n        updateWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward updated successfully\",\r\n        },\r\n        wards: newWardsss,\r\n      };\r\n\r\n    case UPDATE_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingWard: false,\r\n        updateWardResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating ward failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n      case GET_WARD_OPTIONS_SUCCESS:\r\n        console.log(action.payload, \"ward reducer\");\r\n        return {\r\n          ...state,\r\n          wardOptions: action.payload,\r\n        };\r\n  \r\n      case GET_WARD_OPTIONS_FAIL:\r\n        return {\r\n          ...state,\r\n          error: action.payload,\r\n        };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Ward;\r\n\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\district\\reducer.js",["1204","1205","1206","1207"],"import {\r\n  GET_DISTRICTS,\r\n  GET_DISTRICTS_FAIL,\r\n  GET_DISTRICTS_SUCCESS,\r\n  ADD_DISTRICT,\r\n  ADD_DISTRICT_FAIL,\r\n  ADD_DISTRICT_SUCCESS,\r\n  DELETE_DISTRICT,\r\n  DELETE_DISTRICT_SUCCESS,\r\n  DELETE_DISTRICT_FAIL,\r\n  UPDATE_DISTRICT,\r\n  UPDATE_DISTRICT_SUCCESS,\r\n  UPDATE_DISTRICT_FAIL,\r\n  \r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  districts: [],\r\n  addingDistrict: false,\r\n  deletingDistrict: false,\r\n  addDistrictResponse: {},\r\n  updateDistrictResponse: {},\r\n  deleteDistrictResponse: {},\r\n  districtIdToBeDeleted: \"\",\r\n  district: {},\r\n  error: {},\r\n};\r\n\r\nconst District = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_DISTRICTS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_DISTRICTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        districts: action.payload.data,\r\n      };\r\n\r\n    case GET_DISTRICTS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_DISTRICT:\r\n      return {\r\n        ...state,\r\n        addingDistrict: true,\r\n        district: action.payload,\r\n      };\r\n\r\n    case ADD_DISTRICT_SUCCESS:\r\n      let newUers = [...state.districts, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingDistrict: false,\r\n        addDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District added successfully\",\r\n         \r\n        },\r\n      \r\n        districts: newUers,\r\n        error: {},\r\n        \r\n      };\r\n\r\n    case ADD_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        addingDistrict: false,\r\n        addDistrictResponse: { type: \"failure\", message: \"Adding district failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_DISTRICT:\r\n      return {\r\n        ...state,\r\n        deletingDistrict: true,\r\n        districtIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_DISTRICT_SUCCESS:\r\n      let newDistricts = state.districts.filter((item) => {\r\n        return item._id != state.districtIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingDistrict: false,\r\n        districtIdToBeDeleted: \"\",\r\n        deletingDistrict: false,\r\n        deleteDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District deleted successfully\",\r\n        },\r\n        districts: newDistricts,\r\n      };\r\n\r\n    case DELETE_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingDistrict: false,\r\n        deleteDistrictResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting district failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_DISTRICT:\r\n      return {\r\n        ...state,\r\n        updatingDistrict: true,\r\n        district: action.payload,\r\n      };\r\n\r\n    case UPDATE_DISTRICT_SUCCESS:\r\n      let newDistricts1 = state.districts.map((item) => {\r\n        if (item._id == state.district._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingDistrict: false,\r\n        district: \"\",\r\n        updatingDistrict: false,\r\n        updateDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District updated successfully\",\r\n        },\r\n        districts: newDistricts1,\r\n      };\r\n\r\n    case UPDATE_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingDistrict: false,\r\n        updateDistrictResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating district failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n     \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default District;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\branches\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\companies\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\privilages\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\users\\reducer.js",["1208","1209","1210","1211"],"import {\r\n  GET_USERS,\r\n  GET_USERS_FAIL,\r\n  GET_USERS_SUCCESS,\r\n  ADD_USER,\r\n  ADD_USER_FAIL,\r\n  ADD_USER_SUCCESS,\r\n  DELETE_USER,\r\n  DELETE_USER_SUCCESS,\r\n  DELETE_USER_FAIL,\r\n  UPDATE_USER,\r\n  UPDATE_USER_SUCCESS,\r\n  UPDATE_USER_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  users: [],\r\n  addingUser: false,\r\n  deletingUser: false,\r\n  addUserResponse: {},\r\n  updateUserResponse: {},\r\n  deleteUserResponse: {},\r\n  userIdToBeDeleted: \"\",\r\n  user: {},\r\n  error: {},\r\n};\r\n\r\nconst User = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_USERS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        users: action.payload.data,\r\n      };\r\n\r\n    case GET_USERS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_USER:\r\n      return {\r\n        ...state,\r\n        addingUser: true,\r\n        user: action.payload,\r\n      };\r\n\r\n    case ADD_USER_SUCCESS:\r\n      let newUers = [...state.users, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingUser: false,\r\n        addUserResponse: {\r\n          type: \"success\",\r\n          message: \"User added successfully\",\r\n        },\r\n        users: newUers,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        addingUser: false,\r\n        addUserResponse: { type: \"failure\", message: \"Adding user failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_USER:\r\n      return {\r\n        ...state,\r\n        deletingUser: true,\r\n        userIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_USER_SUCCESS:\r\n      let newUsers = state.users.filter((item) => {\r\n        return item._id != state.userIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingUser: false,\r\n        userIdToBeDeleted: \"\",\r\n        deletingUser: false,\r\n        deleteUserResponse: {\r\n          type: \"success\",\r\n          message: \"User deleted successfully\",\r\n        },\r\n        users: newUsers,\r\n      };\r\n\r\n    case DELETE_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingUser: false,\r\n        deleteUserResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting user failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        updatingUser: true,\r\n        user: action.payload,\r\n      };\r\n\r\n    case UPDATE_USER_SUCCESS:\r\n      let newUsers1 = state.users.map((item) => {\r\n        if (item._id == state.user._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingUser: false,\r\n        user: \"\",\r\n        updatingUser: false,\r\n        updateUserResponse: {\r\n          type: \"success\",\r\n          message: \"User updated successfully\",\r\n        },\r\n        users: newUsers1,\r\n      };\r\n\r\n    case UPDATE_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingUser: false,\r\n        updateUserResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating user failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default User;\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\menu\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\profile\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\register\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\auth\\login\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\layout\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\MegaMenu\\MegaMenu.jsx",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Footer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Header.js",["1212"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Redux Store\r\nimport { showRightSidebarAction, toggleLeftmenu } from \"../../store/actions\";\r\n// reactstrap\r\nimport { Row, Col, Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\";\r\n\r\n// Import menuDropdown\r\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\";\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\n\r\nimport logo from \"../../assets/images/logo-sm.png\";\r\nimport logoLight from \"../../assets/images/logo-light.png\";\r\nimport logoDark from \"../../assets/images/logo-dark.png\";\r\n\r\n// import images\r\nimport github from \"../../assets/images/brands/github.png\";\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\";\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\";\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\";\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\";\r\nimport slack from \"../../assets/images/brands/slack.png\";\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nconst Header = (props) => {\r\n  const [isSearch, setSearch] = useState(false);\r\n  const [socialDrp, setsocialDrp] = useState(false);\r\n\r\n  function toggleFullscreen() {\r\n    if (\r\n      !document.fullscreenElement &&\r\n      /* alternative standard method */ !document.mozFullScreenElement &&\r\n      !document.webkitFullscreenElement\r\n    ) {\r\n      // current working methods\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) {\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) {\r\n        document.documentElement.webkitRequestFullscreen(\r\n          Element.ALLOW_KEYBOARD_INPUT\r\n        );\r\n      }\r\n    } else {\r\n      if (document.cancelFullScreen) {\r\n        document.cancelFullScreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitCancelFullScreen) {\r\n        document.webkitCancelFullScreen();\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"navbar-header\">\r\n        <div className=\"d-flex\">\r\n          <div className=\"navbar-brand-box\">\r\n            <Link to=\"/\" className=\"logo logo-dark\">\r\n              <span className=\"logo-sm\">\r\n                <img src={logo} alt=\"\" height=\"22\" />\r\n              </span>\r\n              <span className=\"logo-lg\">\r\n                <img src={logoDark} alt=\"\" height=\"17\" />\r\n              </span>\r\n            </Link>\r\n\r\n            <Link to=\"/\" className=\"logo logo-light\">\r\n              <span className=\"logo-sm\">\r\n                <img src={logo} alt=\"\" height=\"22\" />\r\n              </span>\r\n              <span className=\"logo-lg\">\r\n                <img src={logoLight} alt=\"\" height=\"19\" />\r\n              </span>\r\n            </Link>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm px-3 font-size-16 d-lg-none header-item waves-effect waves-light\"\r\n            data-toggle=\"collapse\"\r\n            onClick={() => {\r\n              props.toggleLeftmenu(!props.leftMenu);\r\n            }}\r\n            data-target=\"#topnav-menu-content\"\r\n          >\r\n            <i className=\"fa fa-fw fa-bars\" />\r\n          </button>\r\n          <form className=\"app-search d-none d-lg-block\">\r\n            <div className=\"position-relative\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search...\"\r\n              />\r\n              <span className=\"uil-search\"></span>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"d-flex\">\r\n          <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              id=\"page-header-search-dropdown\"\r\n              onClick={() => setSearch(!isSearch)}\r\n            >\r\n              <i className=\"uil-search\"></i>\r\n            </button>\r\n            <div\r\n              className={\r\n                isSearch\r\n                  ? \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0 show\"\r\n                  : \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0\"\r\n              }\r\n              aria-labelledby=\"page-header-search-dropdown\"\r\n            >\r\n              <form className=\"p-3\">\r\n                <div className=\"form-group m-0\">\r\n                  <div className=\"input-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder={props.t(\"Search\") + \"...\"}\r\n                      aria-label=\"Recipient's username\"\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                      <button className=\"btn btn-primary\" type=\"submit\">\r\n                        <i className=\"mdi mdi-magnify\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          <Dropdown\r\n            className=\"d-none d-lg-inline-block ms-1\"\r\n            isOpen={socialDrp}\r\n            toggle={() => {\r\n              setsocialDrp(!socialDrp);\r\n            }}\r\n          >\r\n            <DropdownToggle\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              caret\r\n              tag=\"button\"\r\n            >\r\n              <i className=\"bx bx-customize\" />\r\n            </DropdownToggle>\r\n            <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\" right>\r\n              <div className=\"px-lg-2\">\r\n                <Row className=\"g-0\">\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={github} alt=\"Github\" />\r\n                      <span>GitHub</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={bitbucket} alt=\"bitbucket\" />\r\n                      <span>Bitbucket</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={dribbble} alt=\"dribbble\" />\r\n                      <span>Dribbble</span>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"g-0\">\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={dropbox} alt=\"dropbox\" />\r\n                      <span>Dropbox</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                      <span>Mail Chimp</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={slack} alt=\"slack\" />\r\n                      <span>Slack</span>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n\r\n          <div className=\"dropdown d-none d-lg-inline-block ms-1\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              onClick={() => {\r\n                toggleFullscreen();\r\n              }}\r\n              data-toggle=\"fullscreen\"\r\n            >\r\n              <i className=\"uil-minus-path\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <NotificationDropdown />\r\n          <div className=\"dropdown d-inline-block\">\r\n            <button\r\n              onClick={() => {\r\n                props.showRightSidebarAction(!props.showRightSidebar);\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n            >\r\n              <i className=\"uil-cog\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <ProfileMenu />\r\n          <Link to=\"/logout\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n            >\r\n              <i\r\n                class=\"fas fa-power-off\"\r\n                style={{\r\n                  fontSize: \"1.2em\",\r\n                }}\r\n              ></i>\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  leftMenu: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { layoutType, showRightSidebar, leftMenu } = state.Layout;\r\n  return { layoutType, showRightSidebar, leftMenu };\r\n};\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n})(withTranslation()(Header));\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Navbar.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SideBarMenu.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\VerticalLayout\\SideBardata.js",["1213"],"import react from 'react';\r\n\r\nexport const sidebarItem = [\r\n  {\r\n    path: '/dashboard',\r\n    title: 'Dashboard',\r\n    icon: 'uil-home-alt',\r\n  },\r\n  {\r\n    path: '/user',\r\n    title: 'user',\r\n    icon: 'uil-user',\r\n\r\n    subNav: [\r\n      {\r\n        path: '/user',\r\n        title: 'Add/manage user',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    path: '#',\r\n    title: 'security',\r\n    icon: 'uil-lock',\r\n\r\n    subNav: [\r\n      {\r\n        path: '/community',\r\n        title: 'Manage Security',\r\n      },\r\n    ],\r\n  },\r\n];\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\helpers\\firebase_helper.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\MapsLeaflet.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Register.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Login.js",["1214","1215","1216"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Row, Col, Alert, Container, CardBody, Card } from \"reactstrap\";\r\nimport toastr from \"toastr\";\r\n\r\n// Redux\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// actions\r\nimport { loginUser, apiError } from \"../../store/actions\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\nimport { checkAuth } from \"../../store/actions\";\r\n\r\nconst Login = (props) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  const { loading, error, loginResponse } = useSelector((state) => state.Login);\r\n\r\n  useEffect(() => {\r\n    props.checkAuth(props.history);\r\n  }, []);\r\n\r\n  // handleValidSubmit\r\n  const handleValidSubmit = (event, values) => {\r\n    console.log(values, \"values\");\r\n    props.loginUser(values, props.history);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (loginResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, loginResponse.message);\r\n    }\r\n  }, [loginResponse]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"account-pages my-5 pt-sm-5\">\r\n          <Container>\r\n            <Row className=\"align-items-center justify-content-center\">\r\n              <Col md={8} lg={6} xl={5}>\r\n                <Card>\r\n                  <CardBody className=\"p-4\">\r\n                    <Row>\r\n                      <Col lg={12}>\r\n                        <div className=\"text-center\">\r\n                          <Link to=\"/\" className=\"mb-3 d-block auth-logo\">\r\n                            <img\r\n                              src={logo}\r\n                              alt=\"\"\r\n                              height=\"22\"\r\n                              className=\"logo logo-dark\"\r\n                            />\r\n                            <img\r\n                              src={logolight}\r\n                              alt=\"\"\r\n                              height=\"22\"\r\n                              className=\"logo logo-light\"\r\n                            />\r\n                          </Link>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"text-center mt-2\">\r\n                      <h5>Welcome Back !</h5>\r\n                      <p className=\"text-muted\">\r\n                        Sign in to continue to Hazel Green.\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"p-2 mt-4\">\r\n                      <AvForm\r\n                        className=\"form-horizontal\"\r\n                        onValidSubmit={(e, v) => {\r\n                          handleValidSubmit(e, v);\r\n                        }}\r\n                      >\r\n                        {props.error && typeof props.error === \"string\" ? (\r\n                          <Alert color=\"danger\">{props.error}</Alert>\r\n                        ) : null}\r\n\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"username\"\r\n                            label=\"Username\"\r\n                            value={username}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            required\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            value={password}\r\n                            type=\"password\"\r\n                            required\r\n                            placeholder=\"Enter Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          />\r\n                        </div>\r\n\r\n                        <Row className=\"mt-4\">\r\n                          <Col lg={6}>\r\n                            <div style={{ display: \"flex\" }}>\r\n                              <AvField\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id=\"customControlInline\"\r\n                                name=\"rememberMe\"\r\n                                value={rememberMe}\r\n                                onChange={() => setRememberMe(!rememberMe)}\r\n                              />\r\n                              <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"customControlInline\"\r\n                              >\r\n                                Remember me\r\n                              </label>\r\n                            </div>\r\n                          </Col>\r\n                          <Col lg={6} md={12} sm={12} className=\"right-button\">\r\n                            <div>\r\n                              <button\r\n                                disabled={loading ? true : false}\r\n                                className=\"btn btn-primary w-md waves-effect waves-light\"\r\n                                type=\"submit\"\r\n                              >\r\n                                {loading ? \"Logging in\" : \"Log In\"}\r\n                              </button>\r\n                            </div>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <div className=\"mt-4\">\r\n                          <Link to=\"/forgot-password\" className=\"text-muted\">\r\n                            <i class=\"mdi mdi-lock\"></i>\r\n                            &nbsp;Forgot password?\r\n                          </Link>\r\n                        </div>\r\n                      </AvForm>\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                <div className=\"mt-5 text-center text-dark\">\r\n                  <p>\r\n                    ©{new Date().getFullYear()} Hazel Green.\r\n                    <a href=\"https://srvinfotech.com\" target=\"_blank\">\r\n                      &nbsp;Powered by SRV InfoTech\r\n                    </a>\r\n                  </p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { error } = state.Login;\r\n  return { error };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { loginUser, checkAuth, apiError })(Login)\r\n);\r\n\r\nLogin.propTypes = {\r\n  error: PropTypes.any,\r\n  history: PropTypes.object,\r\n  loginUser: PropTypes.func,\r\n  checkAuth: PropTypes.func,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\Logout.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\user-profile.js",["1217"],"import PropTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Alert,\r\n  CardBody,\r\n  Media,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\r\n\r\nimport avatar from \"../../assets/images/users/avatar-1.jpg\";\r\n// actions\r\nimport { editProfile, resetProfileFlag } from \"../../store/actions\";\r\n\r\nconst UserProfile = (props) => {\r\n  const [email, setemail] = useState(\"\");\r\n  const [name, setname] = useState(\"\");\r\n  const [mobile, setmobile] = useState(\"\");\r\n\r\n  const [userId, setUserId] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n\r\n      setname(obj.username);\r\n      setemail(obj.email);\r\n      setmobile(obj.mobile);\r\n      setUserId(obj.userId);\r\n\r\n      setTimeout(() => {\r\n        props.resetProfileFlag();\r\n      }, 3000);\r\n    }\r\n  }, [props.success, props]);\r\n\r\n  function handleValidSubmit(event, values) {\r\n    props.editProfile(values);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          {/* Render Breadcrumb */}\r\n          <Breadcrumb title=\"Minible\" breadcrumbItem=\"Profile\" />\r\n\r\n          <Row>\r\n            <Col lg=\"12\">\r\n              {props.error && props.error ? (\r\n                <Alert color=\"danger\">{props.error}</Alert>\r\n              ) : null}\r\n              {props.success && props.success ? (\r\n                <Alert color=\"success\">{props.success}</Alert>\r\n              ) : null}\r\n\r\n              <Card>\r\n                <CardBody>\r\n                  <Media className=\"d-flex\">\r\n                    <div className=\"ms-3\">\r\n                      <img\r\n                        src={avatar}\r\n                        alt=\"\"\r\n                        className=\"avatar-md rounded-circle img-thumbnail\"\r\n                      />\r\n                    </div>\r\n                    <Media body className=\"flex-1 align-self-center\">\r\n                      <div className=\"text-muted\">\r\n                        <h5>{name}</h5>\r\n                        <p className=\"mb-1\">{email}</p>\r\n                        <p className=\"mb-0\">Id no: #{userId}</p>\r\n                      </div>\r\n                    </Media>\r\n                  </Media>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <h4 className=\"card-title mb-4\">Change User Name</h4>\r\n\r\n          <Card>\r\n            <CardBody>\r\n              <AvForm\r\n                className=\"form-horizontal\"\r\n                onValidSubmit={(e, v) => {\r\n                  handleValidSubmit(e, v);\r\n                }}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <AvField\r\n                    name=\"username\"\r\n                    label=\"User Name\"\r\n                    value={name}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter User Name\"\r\n                    type=\"text\"\r\n                    required\r\n                  />\r\n                  <AvField name=\"userId\" value={userId} type=\"hidden\" />\r\n                </div>\r\n                <div className=\"text-center mt-4\">\r\n                  <Button type=\"submit\" color=\"danger\">\r\n                    Update User Name\r\n                  </Button>\r\n                </div>\r\n              </AvForm>\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUserProfile.propTypes = {\r\n  editProfile: PropTypes.func,\r\n  error: PropTypes.any,\r\n  success: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, { editProfile, resetProfileFlag })(UserProfile)\r\n);\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Authentication\\ForgetPassword.js",["1218"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Row, Col, Alert, Container, CardBody, Card } from \"reactstrap\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// action\r\nimport { userForgetPassword } from \"../../store/actions\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\n\r\nconst ForgetPasswordPage = (props) => {\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  function handleValidSubmit(event, values) {\r\n    props.userForgetPassword(values, props.history);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"home-btn d-none d-sm-block\">\r\n          <Link to=\"/\" className=\"text-dark\">\r\n            <i className=\"mdi mdi-home-variant h2\"></i>\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"account-pages my-5  pt-sm-5\">\r\n          <Container>\r\n            <div className=\"row justify-content-center\">\r\n              <div className=\"col-md-8 col-lg-6 col-xl-5\">\r\n                <div>\r\n                  <Card>\r\n                    <CardBody className=\"p-4\">\r\n                      <div className=\"row\">\r\n                        <a href=\"/\" className=\"mb-3 d-block auth-logo\">\r\n                          <img\r\n                            src={logo}\r\n                            alt=\"\"\r\n                            height=\"22\"\r\n                            className=\"logo logo-dark\"\r\n                          />\r\n                          <img\r\n                            src={logolight}\r\n                            alt=\"\"\r\n                            height=\"22\"\r\n                            className=\"logo logo-light\"\r\n                          />\r\n                        </a>\r\n                      </div>\r\n                      <div className=\"text-center mt-2\">\r\n                        <h5 className=\"text-primary\">Reset Password</h5>\r\n                        <p className=\"text-muted\">\r\n                          Reset Password with Minible.\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"p-2 mt-4\">\r\n                        <div\r\n                          className=\"alert alert-success text-center mb-4\"\r\n                          role=\"alert\"\r\n                        >\r\n                          Enter your Email and instructions will be sent to you!\r\n                        </div>\r\n                        {props.forgetError && props.forgetError ? (\r\n                          <Alert\r\n                            color=\"danger\"\r\n                            className=\"text-center mb-4\"\r\n                            style={{ marginTop: \"13px\" }}\r\n                          >\r\n                            {props.forgetError}\r\n                          </Alert>\r\n                        ) : null}\r\n                        {props.forgetSuccessMsg ? (\r\n                          <Alert\r\n                            color=\"success\"\r\n                            className=\"text-center mb-4\"\r\n                            style={{ marginTop: \"13px\" }}\r\n                          >\r\n                            {props.forgetSuccessMsg}\r\n                          </Alert>\r\n                        ) : null}\r\n\r\n                        <AvForm\r\n                          className=\"form-horizontal\"\r\n                          onValidSubmit={(e, v) => handleValidSubmit(e, v)}\r\n                        >\r\n                          <div className=\"mb-3\">\r\n                            <AvField\r\n                              name=\"email\"\r\n                              label=\"Email\"\r\n                              className=\"form-control\"\r\n                              placeholder=\"Enter email\"\r\n                              type=\"email\"\r\n                              required\r\n                            />\r\n                          </div>\r\n                          <Row className=\"row mb-0\">\r\n                            <Col className=\"col-12 text-end\">\r\n                              <button\r\n                                className=\"btn btn-primary w-md waves-effect waves-light\"\r\n                                type=\"submit\"\r\n                              >\r\n                                Reset\r\n                              </button>\r\n                            </Col>\r\n                          </Row>\r\n                          <div className=\"mt-4 text-center\">\r\n                            <p className=\"mb-0\">\r\n                              Remember It ?{\" \"}\r\n                              <Link\r\n                                to=\"/login\"\r\n                                className=\"fw-medium text-primary\"\r\n                              >\r\n                                {\" \"}\r\n                                Signin{\" \"}\r\n                              </Link>\r\n                            </p>\r\n                          </div>\r\n                        </AvForm>\r\n                      </div>\r\n                    </CardBody>\r\n                  </Card>\r\n                  <div className=\"mt-5 text-center text-dark\">\r\n                    <p>\r\n                      ©{new Date().getFullYear()} Cococa Ecommerce Private\r\n                      Limited.\r\n                      <a\r\n                        href=\"https://srvinfotech.com\"\r\n                        target=\"_blank\"\r\n                        style={{ color: \"#343a40\" }}\r\n                      >\r\n                        &nbsp;Powered by SRV InfoTech\r\n                      </a>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nForgetPasswordPage.propTypes = {\r\n  forgetError: PropTypes.any,\r\n  forgetSuccessMsg: PropTypes.any,\r\n  history: PropTypes.object,\r\n  userForgetPassword: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { forgetError, forgetSuccessMsg } = state.ForgetPassword;\r\n  return { forgetError, forgetSuccessMsg };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, { userForgetPassword })(ForgetPasswordPage)\r\n);\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Recoverpw.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\auth-lock-screen.js",["1219"],"import React, { useEffect, useState } from \"react\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\nimport { Container, Row, Col, CardBody, Card, Button } from \"reactstrap\";\r\n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\";\r\n\r\nconst LockScreen = (props) => {\r\n  const [username, setusername] = useState(\"Admin\");\r\n\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n      setusername(obj.firstName);\r\n    }\r\n  }, [props.success]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"home-btn d-none d-sm-block\">\r\n          <Link to=\"/\" className=\"text-dark\">\r\n            <i className=\"fas fa-home h2\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"account-pages my-5 pt-sm-5\">\r\n          <Container>\r\n            <Row className=\"justify-content-center\">\r\n              <Col md={8} lg={6} xl={5}>\r\n                <Card>\r\n                  <CardBody className=\"p-4\">\r\n                    <div className=\"row\">\r\n                      <Link to=\"/\" className=\"mb-5 d-block auth-logo\">\r\n                        <img\r\n                          src={logo}\r\n                          alt=\"\"\r\n                          height=\"22\"\r\n                          className=\"logo logo-dark\"\r\n                        />\r\n                        <img\r\n                          src={logolight}\r\n                          alt=\"\"\r\n                          height=\"22\"\r\n                          className=\"logo logo-light\"\r\n                        />\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"text-center mt-2\">\r\n                      <h5 className=\"text-primary\">Lock screen</h5>\r\n                      <p className=\"text-muted\">\r\n                        Enter your password to unlock the screen!\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"p-2 mt-4\">\r\n                      <div className=\"user-thumb text-center mb-4\">\r\n                        <img\r\n                          src={avatar4}\r\n                          className=\"rounded-circle img-thumbnail avatar-lg\"\r\n                          alt=\"thumbnail\"\r\n                        />\r\n                        <h5 className=\"font-size-15 mt-3\">{username}</h5>\r\n                      </div>\r\n                      <AvForm>\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            required\r\n                            placeholder=\"Enter Password\"\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3 text-end\">\r\n                          <Button\r\n                            color=\"primary\"\r\n                            className=\"w-sm waves-effect waves-light\"\r\n                            type=\"submit\"\r\n                          >\r\n                            Unlock\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"mt-4 text-center\">\r\n                          <p className=\"mb-0\">\r\n                            Not you ? return\r\n                            <Link\r\n                              to=\"/login\"\r\n                              className=\"fw-medium text-primary\"\r\n                            >\r\n                              Sign In\r\n                            </Link>\r\n                          </p>\r\n                        </div>\r\n                      </AvForm>\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                <div className=\"mt-5 text-center text-white\">\r\n                  <p>\r\n                    © {new Date().getFullYear()} Cococa Ecommerce Private\r\n                    Limited.\r\n                    <a href=\"https://srvinfotech.com\" target=\"_blank\">\r\n                      &nbsp;Powered by SRV InfoTech\r\n                    </a>\r\n                  </p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, {})(withTranslation()(LockScreen))\r\n);\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Login.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Register.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Receipt\\index.js",["1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst ViewReceipt = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Receipt No\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Customer ID\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Group\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tWard\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Amount\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tDue Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"View Receipt\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>District</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Localbody</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Ward</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Staff</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Row>\r\n                  <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"success\" type=\"submit\">\r\n                            Export\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(ViewReceipt));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Invoice\\AutoInvoice\\index.js",["1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AutoInvoice = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"\tInvoice No\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Customer ID\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"State\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Group\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Ward\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAmount\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Transaction Log\" />\r\n\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Staff</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <Col md=\"1\">\r\n                  <div className=\"mt-4\">\r\n                    <Button color=\"success\" type=\"submit\">\r\n                      Export\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AutoInvoice));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Invoice\\ViewInvoice\\index.js",["1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst ViewInvoice = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n \t\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \" Customer ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"State\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tGroup\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Ward\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Invoice Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Paid Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Due\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"View Invoice\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>District</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Ward</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Group</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"success\" type=\"submit\">\r\n                            Export\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          {/* <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                 \r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row> */}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(ViewInvoice));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Package\\AddTariff\\index.js",["1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n  Modal,\r\n  Table,\r\n} from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AddTariff = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  const [values, setValues] = useState([{}]);\r\n\r\n  const addMore = () => {\r\n    setValues([...values, {}]);\r\n  };\r\n\r\n  const handleRemove = (index) => {\r\n    const list = [...values];\r\n    list.splice(index, 1);\r\n    setValues(list);\r\n  };\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Localbody Type \",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n\r\n      {\r\n        label: \"Localbody Name\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n\r\n      {\r\n        label: \"Package\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Category\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Reg.Fee\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Basic Fee\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Package Validity in Days\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Visit/Month\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Free Bags\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Add tariff\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Package Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"Start\"\r\n                            placeholder=\"Start\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Start\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Category</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Registration Fee\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"RegistrationFee\"\r\n                            placeholder=\"Registration Fee\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Registration Fee\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Basic Fee</Label>\r\n                          <AvField\r\n                            name=\"BasicFee\"\r\n                            placeholder=\"Basic Fee\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Basic Fee\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Package Validity in Days\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"package validity\"\r\n                            placeholder=\"Package Validity in Days\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Package Validity in Days\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Visit/Month\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"visit\"\r\n                            placeholder=\"Visit/Monthnd\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Visit/Month\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <div className=\"container\">\r\n                          <Table className=\"table table-bordered mb-0\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>#</th>\r\n                                <th>Waste Item</th>\r\n                                <th>Free Bags</th>\r\n\r\n                                {values.length !== 1 ? <th>Action</th> : null}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {values.map((item, index) => {\r\n                                return (\r\n                                  <tr>\r\n                                    <td>{index + 1}</td>\r\n\r\n                                    <td>\r\n                                      {\" \"}\r\n                                      <div className=\"mb-3\">\r\n                                        <Select\r\n                                          name=\"customer_community_id\"\r\n                                          //   value={selectCommunity}\r\n                                          //   onChange={(value) => {\r\n                                          //     handleSelectedCommunities(value);\r\n                                          //   }}\r\n                                          //   options={communitiesOptionsGroup}\r\n                                          classNamePrefix=\"select2-selection\"\r\n                                        />\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>{item.default_unit}</td>\r\n                                    <td>\r\n                                      {values.length !== 1 && (\r\n                                        <i\r\n                                          className=\"uil-trash-alt\"\r\n                                          style={{\r\n                                            fontSize: \"23px\",\r\n                                            cursor: \"pointer\",\r\n                                            paddingLeft: \"5px\",\r\n                                          }}\r\n                                          onClick={() => handleRemove(index)}\r\n                                        ></i>\r\n                                      )}\r\n                                    </td>\r\n                                  </tr>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </Table>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Button\r\n                      onClick={() => addMore()}\r\n                      color=\"success\"\r\n                      className=\"mt-1\"\r\n                    >\r\n                      Add New Item\r\n                    </Button>\r\n                    <br /> <br /> <br /> <br />\r\n                    <Row>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AddTariff));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Package\\AddWaste\\index.js",["1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport axios from \"axios\";\r\nimport toastr from \"toastr\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n  Modal,\r\n  Table,\r\n  Progress,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  getWasteItems,\r\n  getWasteTypes,\r\n  getWasteCategories,\r\n  addWasteItem,\r\n  updateWasteItem,\r\n  deleteWasteItem\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AddWaste = (props) => {\r\nconst API_URL = process.env.REACT_APP_APIURL;\r\n\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState();\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [category, setCategory] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [wasteObject, setWasteObject] = useState(null);\r\n  const [itemsIdTobeUpdated, setItemsIdToBeUpdated] = useState(null);\r\n  const [itemsIdToBeDeleted, setItemsIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [wasteItemsForTable, setWasteItemsForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n  const [itemname, setItemname] = useState(\"\");\r\n  const [bags, setBags] = useState(\"\");\r\n  const [weight, setWeight] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\")\r\n  const[selectedImage,setSelectedImage]=useState(null);\r\n  const[loadedImage,setLoadedImage]=useState(null);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  const {\r\n    wasteItems,\r\n    wasteTypes,\r\n    categories,\r\n    addWasteItemResponse,\r\n    updateWasteItemResponse,\r\n    deleteWasteItemResponse,\r\n    addingWasteItem,\r\n    \r\n  }=useSelector((state)=>state.wasteItems);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n   \r\n    dispatch(getWasteItems());\r\n    dispatch(getWasteTypes());\r\n    dispatch(getWasteCategories())\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addWasteItemResponse.type === \"success\") {\r\n      dispatch(getWasteItems())\r\n      toastr.success(addWasteItemResponse.message);\r\n     \r\n      //  setSelectedDistrict(null);\r\n    } else if (addWasteItemResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addWasteItemResponse.message);\r\n    }\r\n  }, [addWasteItemResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteWasteItemResponse.type === \"success\") {\r\n     dispatch(getWasteItems())\r\n      toastr.success(deleteWasteItemResponse.message);\r\n      setItemsIdToBeDeleted(null);\r\n    } else if (deleteWasteItemResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteWasteItemResponse.message);\r\n    }\r\n  }, [deleteWasteItemResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateWasteItemResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setItemsIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateWasteItemResponse.message);\r\n    } else if (updateWasteItemResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateWasteItemResponse.message);\r\n    }\r\n  }, [updateWasteItemResponse]);\r\n\r\n     let preUpdateData = (item) => {\r\n       console.log(item.image)\r\n       setItemname(item.waste_items_name)\r\n       setBags(item.waste_items_bag)\r\n       setWeight(item.waste_items_weight)\r\n       setAmount(item.waste_items_amount)\r\n       \r\n       if(item.waste_items_type){\r\n       let waste_items_type={\r\n         label:item.waste_items_type.waste_cat_name,\r\n         value:item.waste_items_type.waste_cat_name,\r\n       }\r\n       handleSelectedType(waste_items_type)\r\n     }\r\n    if(item.waste_item_cat){\r\n      let waste_item_cat={\r\n        label:item.waste_item_cat.waste_category_name,\r\n        value:item.waste_item_cat.waste_category_name,\r\n      }\r\n      handleChangeCategory(waste_item_cat)\r\n    }\r\n    if(item.waste_items_image)\r\n    {\r\n      \r\n     \r\n    \r\n    \r\n    \r\n\r\n     // setSelectedImage(`${API_URL}uploads/waste_images/${item.waste_items_image[0].img}`)\r\n    setLoadedImage(`${API_URL}uploads/waste_images/${item.waste_items_image[0].img}`)\r\n    \r\n    }\r\n   // console.log(wasteObject.category._id)\r\n    setItemsIdToBeUpdated(item._id)\r\n     setWasteObject({...item,password:null})\r\n    }\r\n   \r\n    console.log(itemname)\r\n    console.log(wasteObject)\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let wasteItemsData = [];\r\n\r\n    wasteItems.map((item, index) => {\r\n      item.image=(\r\n        <div style={{display:\"flex\",justifyContent:\"space-evenly\", height:\"70px\" ,with:\"100px\"}}>\r\n          <img src={`${API_URL}uploads/waste_images/${item.waste_items_image[0].img}`}></img>\r\n        </div>\r\n\r\n      );\r\n      item.active = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div\r\n            className=\"\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              color: \"black\",\r\n              fontSize: \".7em\",\r\n              padding: \".5rem\",\r\n              borderRadius: \".3rem\",\r\n              background: \"#fb6262\",\r\n            }}\r\n            //onClick={() => }\r\n          >\r\n            Active\r\n          </div>\r\n        </div>\r\n      );\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n                 preUpdateData(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n                 preUpdateData(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n                setItemsIdToBeDeleted(item._id);\r\n                 setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n         item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      if(item.waste_items_type) item.wastetype=item.waste_items_type.waste_cat_name;\r\n      if(item.waste_item_cat) item.category=item.waste_item_cat.waste_category_name;\r\n      if(item.waste_item_addedby)item.staff=item.waste_item_addedby.username;\r\n     // item.image=item.waste_items_image[0].img\r\n        wasteItemsData.push(item);\r\n    });\r\n     setWasteItemsForTable(wasteItemsData);\r\n  }, [wasteItems]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Waste item\t \",\r\n        field: \"waste_items_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n\r\n      {\r\n        label: \"Category\t\",\r\n        field: \"category\",\r\n        width: 300,\r\n      },\r\n\r\n      {\r\n        label: \"Type\t\t\",\r\n        field: \"wastetype\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Bags\t\",\r\n        field: \"waste_items_bag\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"kg\t\t\",\r\n        field: \"waste_items_weight\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Amount\t\",\r\n        field: \"waste_items_amount\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Image\t\",\r\n\r\n       field:\"image\",\r\n      \r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Staff\t\",\r\n        field: \"staff\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Active/Inactive\",\r\n        field: \"active\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: wasteItemsForTable,\r\n   \r\n  };\r\nconsole.log(wasteItemsForTable)\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n  const handleValidSubmit = (event, values) => {\r\nconst data=new FormData();\r\n data.append(\"id\",itemsIdTobeUpdated)\r\ndata.append(\"name\",itemname)\r\ndata.append(\"bags\",bags)\r\ndata.append(\"weight\",weight)\r\ndata.append(\"amount\",amount)\r\ndata.append(\"category\",category.value)\r\ndata.append(\"Type\",selectedType.value)\r\ndata.append(\"file\",selectedImage)\r\n\r\nconst update=new FormData();\r\n/*update.append(\"id\",itemsIdTobeUpdated)\r\nif(wasteObject.Amount){\r\nupdate.append(\"amount\",wasteObject.Amount)}\r\nif(wasteObject.WasteItem){\r\nupdate.append(\"itemname\",wasteObject.WasteItem)}\r\nif(wasteObject.category._id){\r\nupdate.append(\"category\",wasteObject.category._id)}\r\nif(wasteObject.wasteType){\r\nupdate.append(\"Type\",wasteObject.wasteType._id)}\r\nif(wasteObject.Kg){\r\nupdate.append(\"kg\",wasteObject.Kg)}\r\nif(wasteObject.bags){\r\nupdate.append(\"Bags\",wasteObject.bags)}\r\nupdate.append(\"imageId\",wasteObject.waste_items_image._id)*/\r\nupdate.append(\"id\",itemsIdTobeUpdated)\r\nupdate.append(\"body\",JSON.stringify(wasteObject))\r\nupdate.append(\"file\",wasteObject.image)\r\n//console.log(data)\r\n    itemsIdTobeUpdated\r\n      ? \r\n     \r\n      dispatch(updateWasteItem(update))\r\n     : dispatch(addWasteItem(data));\r\n     setSelectedType(null);\r\n     setCategory(null);\r\n     setBags(\"\");\r\n     setWeight(\"\");\r\n     setAmount(\"\");\r\n     setItemname(\"\");\r\n     setLoadedImage(null);\r\n    //axios.post(\"http://localhost:3099/wasteItems/upload\",data).then(res=>console.log(res))\r\n  \r\n  };\r\n\r\n    function handleSelectedType(value) {\r\n     // console.log(value )\r\n      //console.log(e)\r\n      let newValue = {\r\n        name: value.label,\r\n         _id: value.value,\r\n       };\r\n      setSelectedType(value);\r\n     setWasteObject({ ...wasteObject, wasteType: newValue });\r\n    }\r\n    function handleChangeCategory(value) {\r\n     // console.log(value )\r\n      //console.log(e)\r\n      let newValue = {\r\n        name: value.label,\r\n         _id: value.value,\r\n       };\r\n      setCategory(value);\r\n     setWasteObject({ ...wasteObject, category: newValue });\r\n    }\r\n   \r\n    function handleChangeItemname(e) {\r\n     let name=e.target.name;\r\n     let value=e.target.value;\r\n    \r\n      setItemname(value);\r\n     setWasteObject({ ...wasteObject, [name]: value});\r\n    }\r\n    function handleChangeBags(e) {\r\n      let name=e.target.name;\r\n      let value=e.target.value;\r\n     \r\n       setBags(value);\r\n      setWasteObject({ ...wasteObject, [name]: value});\r\n     }\r\n     function handleChangeWeight(e) {\r\n      let name=e.target.name;\r\n      let value=e.target.value;\r\n     \r\n       setWeight(value);\r\n      setWasteObject({ ...wasteObject, [name]: value});\r\n     }\r\n     function handleChangeAmount(e) {\r\n      let name=e.target.name;\r\n      let value=e.target.value;\r\n     \r\n       setAmount(value);\r\n      setWasteObject({ ...wasteObject, [name]: value});\r\n     }\r\n     function handleSelectedImage(e){\r\n       console.log(e)\r\n      let  name=e.target.name;\r\n     let  value=e.target.files[0];\r\n       \r\n\r\nsetLoadedImage(URL.createObjectURL(value))\r\n       setSelectedImage(value)\r\n       setWasteObject({ ...wasteObject, [name]:value});\r\n     }\r\n     \r\n     console.log(selectedImage)\r\n    console.log(wasteObject)\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteWasteItem(itemsIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Add Waste\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"form-control\"\r\n                     onValidSubmit={(e, v) => {\r\n                       handleValidSubmit(e, v);\r\n                     }}\r\n                    enctype=\"multipart/form-data\" \r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Waste Item</Label>\r\n                          <AvField\r\n                            name=\"WasteItem\"\r\n                            placeholder=\"\"\r\n                            type=\"text\"\r\n                            value={itemname}\r\n                            errorMessage=\"Enter Waste Item\"\r\n                            className=\"form-control\"\r\n                           // validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                           onChange={handleChangeItemname}\r\n                           \r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Waste Category</Label>\r\n                          <Select\r\n                            name=\"waste_category\"\r\n                            value={category}\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                            options={\r\n                              categories.map((cat)=>{\r\n                              return{\r\n                                label:cat.waste_category_name,\r\n                                value:cat._id,\r\n                                key:cat._id\r\n                              }\r\n                              })\r\n                            }\r\n                          onChange={handleChangeCategory}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Waste Type</Label>\r\n                          <Select\r\n                            name=\"waste_type\"\r\n                            \r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                          \r\n                            classNamePrefix=\"select2-selection\"\r\n                            value={selectedType}\r\n                           options={\r\n                             wasteTypes.map((types)=>{\r\n                             return{\r\n                               label:types.waste_cat_name,\r\n                               value:types._id,\r\n                               key:types._id\r\n                             }\r\n                             })\r\n                           }\r\n                          onChange={handleSelectedType}  \r\n                            />\r\n                              \r\n                           \r\n                        \r\n                    \r\n                         \r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            No.of Bags\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"bags\"\r\n                            placeholder=\"\"\r\n                            type=\"text\"\r\n                            value={bags}\r\n                            errorMessage=\"Enter No. of Pages\"\r\n                            className=\"form-control\"\r\n                            //validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleChangeBags}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">No. of Kg</Label>\r\n                          <AvField\r\n                            name=\"Kg\"\r\n                            placeholder=\"No. of Kg\"\r\n                            value={weight}\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter No. of Kg\"\r\n                            className=\"form-control\"\r\n                            //validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleChangeWeight}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"Amount\"\r\n                            placeholder=\"Amount\"\r\n                            value={amount}\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            //validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleChangeAmount}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">\r\n                             Image\r\n                          </Label>\r\n\r\n                          {/* {productObject.product_image_main &&\r\n                          productObject.product_image_main.length > 2 ? ( */}\r\n                            {/* <div className=\"img-wraps\"> */}\r\n                              {/* {productObject.product_image_main &&\r\n                              productObject.product_image_main.startsWith(\r\n                                'http'\r\n                              ) ? (\r\n                                <img\r\n                                  className=\"img-thumbnail\"\r\n                                  alt=\"\"\r\n                                  width=\"200\"\r\n                                //   src={`${productObject.product_image_main}`}\r\n                                />\r\n                              ) : (\r\n                                <img\r\n                                  className=\"img-thumbnail\"\r\n                                  alt=\"\"\r\n                                  width=\"200\"\r\n                                //   src={`${API_URL}public/uploads/product-images/${productObject.product_image_main}`}\r\n                                />\r\n                              )}\r\n\r\n                              <button\r\n                                className=\"btn btn-danger btn-sm btn-block waves-effect waves-light btn btn-danger\"\r\n                                // onClick={deleteProductImage}\r\n                                style={{ width: '200px' }}\r\n                              >\r\n                                Delete\r\n                              </button>\r\n                            </div>\r\n                          ) : ( */}\r\n                            <AvField\r\n                              name=\"image\"\r\n                              type=\"file\"\r\n                              errorMessage=\"Select Image\"\r\n                              className=\"form-control\"\r\n                              id=\"myImageInput\"\r\n                              \r\n                              enctype=\"multipart/form-data\"\r\n                             \r\n                              \r\n                              onChange={handleSelectedImage}\r\n                              //  id=\"getFile\" style={{display:\"none\"}}\r\n                              // onChange={handleChangeInput}\r\n                            //   onChange={uploadImage}\r\n                            />\r\n                            <img src={loadedImage} style={{height:\"30px\"}}></img>\r\n                           {/* )} */}\r\n\r\n                          {uploadProgress && uploadProgress < 100 && (\r\n                            <div className=\"mt-4\">\r\n                              {' '}\r\n                              <Progress color=\"primary\" value={uploadProgress}>\r\n                                Uploading {uploadProgress}%\r\n                              </Progress>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                    <Col>\r\n                     <div className=\"mb-3\" style={{paddingTop:\"30px\"}}>\r\n                     {itemsIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWasteItem ? true : false}\r\n                       \r\n                      >\r\n                        {addingWasteItem ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWasteItem ? true : false}\r\n                       >\r\n                        {addingWasteItem ? \"Adding\" : \"Submit\"}\r\n                        \r\n                      </Button>\r\n                      \r\n                    )\r\n                    }\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AddWaste));\r\n\r\n AddWaste.propTypes = {\r\n  error: PropTypes.any,\r\n  wasteItems: PropTypes.array,\r\n };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\WastePlot\\index.js",["1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst WasteCollection = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Location\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"\tDistrict\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tLatitude\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Longitude\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Waste Plots\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <AvForm\r\n                  className=\"needs-validation\"\r\n                  // onValidSubmit={(e, v) => {\r\n                  //   handleValidSubmit(e, v);\r\n                  // }}\r\n                >\r\n                  <Row>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Location</Label>\r\n                        <AvField\r\n                          name=\"Location\"\r\n                          placeholder=\"Location\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Location\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>District</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Latitude</Label>\r\n                        <AvField\r\n                          name=\"Latitude\"\r\n                          placeholder=\"Latitude\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Latitude\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Longitude</Label>\r\n                        <AvField\r\n                          name=\"Longitude\"\r\n                          placeholder=\"Longitude\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Longitude\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"1\">\r\n                      <div className=\"mt-4\">\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                          Save\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"1\">\r\n                      <div className=\"mt-4\">\r\n                        <Button\r\n                          color=\"danger\"\r\n                          type=\"reset\"\r\n                          onClick={() => setAccountType(\"\")}\r\n                        >\r\n                          Reset\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </AvForm>\r\n              </CardBody>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardBody>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(WasteCollection)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\GroupWasteSpot\\index.js",["1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst WasteCollection = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Location\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"\tDistrict\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tLatitude\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Longitude\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Group Waste Spot\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <AvForm\r\n                  className=\"needs-validation\"\r\n                  // onValidSubmit={(e, v) => {\r\n                  //   handleValidSubmit(e, v);\r\n                  // }}\r\n                >\r\n                  <Row>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Location</Label>\r\n                        <AvField\r\n                          name=\"Location\"\r\n                          placeholder=\"Location\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Location\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>District</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Latitude</Label>\r\n                        <AvField\r\n                          name=\"Latitude\"\r\n                          placeholder=\"Latitude\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Latitude\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Longitude</Label>\r\n                        <AvField\r\n                          name=\"Longitude\"\r\n                          placeholder=\"Longitude\"\r\n                          type=\"text\"\r\n                          errorMessage=\"Enter Longitude\"\r\n                          className=\"form-control\"\r\n                          validate={{ required: { value: true } }}\r\n                          id=\"validationCustom05\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"1\">\r\n                      <div className=\"mt-4\">\r\n                        <Button color=\"primary\" type=\"submit\">\r\n                          Save\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"1\">\r\n                      <div className=\"mt-4\">\r\n                        <Button\r\n                          color=\"danger\"\r\n                          type=\"reset\"\r\n                          onClick={() => setAccountType(\"\")}\r\n                        >\r\n                          Reset\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </AvForm>\r\n              </CardBody>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardBody>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(WasteCollection)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\DriverDrop\\index.js",["1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst DriverDrop = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tSpot\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Bags\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Weight\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Driver Drop\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Plot</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(DriverDrop));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\HelperCollection\\index.js",["1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst HelperCollection = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Receipt No\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Customer ID\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Group\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tWard\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Amount\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tDue Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Helper Collection\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>District</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Localbody</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Ward</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Staff</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Row>\r\n                  <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"success\" type=\"submit\">\r\n                            Export\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(HelperCollection));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\DriverCollection\\index.js",["1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst DriverCollection = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tSpot\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Bags\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Weight\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Driver Collection\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Spot</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(DriverCollection)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\WasteCollection\\HelperDrop\\index.js",["1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst HelperDrop = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tSpot\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Bags\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tTotal Weight\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Helper Drop\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Spot</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(HelperDrop));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\CreditDebit\\index.js",["1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Credit = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Chart Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Debit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Credit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Added by\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Credit/Debit Fund\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Credit));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\FundTransfer\\index.js",["1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618","1619","1620"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Fund = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Transfer From\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Transfer To\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"status\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Fund Transfer\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>From Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>To Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Fund));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\IncomeExpenses\\index.js",["1621","1622","1623","1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst IncomeExpense = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Account Detail Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Chart of Account\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Found Source\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Approved By\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Income/Expense\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                          <div className=\"col-md-10\">\r\n                            <input\r\n                              className=\"form-control\"\r\n                              type=\"date\"\r\n                              defaultValue=\"2019-08-19\"\r\n                              id=\"example-date-input\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Amount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Account Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label> Account Details Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Charts of Account</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      {/* <Col className=\"mb-3\">\r\n                        <label\r\n                          htmlFor=\"example-date-input\"\r\n                          className=\"col-md-2 col-form-label\"\r\n                        >\r\n                          Date\r\n                        </label>\r\n                        <div className=\"col-md-10\">\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            defaultValue=\"2019-08-19\"\r\n                            id=\"example-date-input\"\r\n                          />\r\n                        </div>\r\n                      </Col> */}\r\n\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col md=\"4\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                        <div className=\"col-md-10\">\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            defaultValue=\"2019-08-19\"\r\n                            id=\"example-date-input\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Expense</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Account Detail Type</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Account Chart</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Staff</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(IncomeExpense)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\AccountDetails\\index.js",["1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671","1672","1673","1674","1675","1676"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AccountDetails = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Account Details\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                            <Label>Account Types</Label>\r\n                            <Select\r\n                              name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                              classNamePrefix=\"select2-selection\"\r\n                            />\r\n                          </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Account Type\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Account Type\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AccountDetails));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\Chart\\index.js",["1677","1678","1679","1680","1681","1682","1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Chart = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  // Account Type\tAccount Detail Type\tChart Name\tBalance\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account Detail Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Chart Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Balance\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Chart of account\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                            <Label>Account Detail Type</Label>\r\n                            <Select\r\n                              name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                              classNamePrefix=\"select2-selection\"\r\n                            />\r\n                          </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Chart Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Chart Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Balance\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"balance\"\r\n                            placeholder=\"Balance\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter balance\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Chart));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\TransactionLog\\index.js",["1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736","1737"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst TransactionLog = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Acc Category\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Account\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Debit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tCredit\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Balance\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tRemark\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Transaction Log\" />\r\n\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Transaction Type</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Month</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"month\"\r\n                        defaultValue=\"2019-08\"\r\n                        id=\"example-month-input\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(TransactionLog)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Accounts\\Account-Type\\index.js",["1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756","1757","1758","1759","1760","1761","1762","1763","1764","1765","1766"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AccountType = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Account Type\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Account Type\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Account Type\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AccountType));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\index.js",["1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785","1786","1787","1788","1789","1790","1791","1792","1793","1794","1795","1796","1797","1798","1799","1800"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport MyDocument from \"./Document\";\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  getLocalbodies,\r\n  addQrcode,\r\n  getQrcode,\r\n  getQrcodesSuccess,\r\n  getQrcodeFail\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst QrCode = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [qrObject, setQrObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [qrDataForTable, setqrDataForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [localbody,setLocalbody]=useState(null);\r\n  const[start,setStart]=useState(\"\");\r\n  const[end,setEnd]=useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n \r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n  \r\nconst {localbodies}=useSelector((state)=>state.localbodies)\r\nconst {qrcodes,adding,addResponse}=useSelector((state)=>state.qrcodes)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n   \r\n    dispatch(getLocalbodies())\r\n    dispatch(getQrcode())\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addResponse.type === \"success\") {\r\n      dispatch(getQrcode())\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n   \r\n    let qrData = [];\r\n\r\n    qrcodes?.map((item, index) => {\r\n      item.active = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div\r\n            className=\"\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              color: \"black\",\r\n              fontSize: \".7em\",\r\n              padding: \".5rem\",\r\n              borderRadius: \".3rem\",\r\n              background: \"#00bcd4\",\r\n            }}\r\n            //onClick={() => }\r\n          >\r\n              View PDF\r\n          </div>\r\n        </div>\r\n      );\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n        item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      if(item.qrcode_localbody_id!=null)\r\n        item.localbody = item.qrcode_localbody_id.localbody_name;\r\n        if(item.qrcode_addedby!=null)\r\n        item.user=item.qrcode_addedby.username\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n         qrData.push(item);\r\n    });\r\n     setqrDataForTable(qrData);\r\n  }, [qrcodes]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"qrcode_date\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\t\",\r\n        field: \"qrcode_time\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Local Body\",\r\n        field: \"localbody\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Added By\",\r\n        field: \"user\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"active\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: qrDataForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n  function handleChangeLocalbody(value) {\r\n    // console.log(value )\r\n     //console.log(e)\r\n     let newValue = {\r\n       name: value.label,\r\n        _id: value.value,\r\n      };\r\n     setLocalbody(value);\r\n    setQrObject({ ...qrObject, localbody: newValue });\r\n   }\r\n    function handleChangeStart(e) {\r\n       let name = e.target.name;\r\n      let value = e.target.value;\r\n      setQrObject({ ...qrObject, [name]: value });\r\n     }\r\n     function handleChangeEnd(e) {\r\n      let name = e.target.name;\r\n     let value = e.target.value;\r\n     setQrObject({ ...qrObject, [name]: value });\r\n    }\r\n\r\n    const handleValidSubmit = (event, values) => {\r\n     \r\n         dispatch(addQrcode(qrObject));\r\n       \r\n       \r\n    };\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n  // handleClick(){\r\n     \r\n // let uri=data.toDataURl('image/png',0.3)\r\n // setImage(uri)\r\n  //}\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Qr Code\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                     onValidSubmit={(e, v) => {\r\n                       handleValidSubmit(e, v);\r\n                     }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                              options={localbodies?.map((data)=>{\r\n                                return{\r\n                                  label:data.localbody_name,\r\n                                  value:data._id,\r\n                                  key:data._id,\r\n                                }\r\n                              })}\r\n                            classNamePrefix=\"select2-selection\"\r\n                            onChange={handleChangeLocalbody}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Start</Label>\r\n                          <AvField\r\n                            name=\"Start\"\r\n                            placeholder=\"Start\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Start\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleChangeStart}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">End</Label>\r\n                          <AvField\r\n                            name=\"End\"\r\n                            placeholder=\"End\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter End\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleChangeEnd}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"2\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\"\r\n                         >\r\n                            Generate Qr Code\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                         <div>\r\n                           {\r\n                             image ?\r\n                             <PDFViewer> <MyDocument src={image}/></PDFViewer> : null\r\n                           }\r\n                         </div>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(QrCode));\r\n\r\n QrCode.propTypes = {\r\n  error: PropTypes.any,\r\n  qrcodes: PropTypes.array,\r\n };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\viewTariff\\index.js",["1801","1802","1803","1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825","1826","1827","1828","1829","1830","1831","1832","1833","1834","1835","1836"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal, } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport RemoveRedEye from \"@mui/icons-material/RemoveRedEye\";\r\n\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport List from \"@mui/material/List\";\r\nimport Divider from \"@mui/material/Divider\";\r\n\r\n//Dialogue box table content's\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  getTariff\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst ViewTariff = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [tariffForTable, setTariffForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n  const [form, setForm] = React.useState(false);\r\nconst[tableData,setTableData]=useState([])\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const{tariff}=useSelector((state)=>state.tariff)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    dispatch(getTariff())\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n  const handleClickOpenForm = (item) => {\r\n  let itemData=[];\r\n\r\n    itemData.push(item);\r\n    setTableData(itemData)\r\n    \r\n    setForm(true);\r\n  };\r\n\r\n  const handleCloseForm = () => {\r\n    setForm(false);\r\n  };\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let tariffData = [];\r\n\r\n    tariff ?.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" ,}}>\r\n          <RemoveRedEye onClick={()=>{handleClickOpenForm(item)}}\r\n              style={{ cursor: \"pointer\" }}/>\r\n         \r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n     \r\n        tariffData.push(item);\r\n    });\r\n     setTariffForTable(tariffData);\r\n  }, [tariff]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"date\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"time\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Customer ID\",\r\n        field: \"customerId\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"cust_name\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Package\",\r\n        field: \"package\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Validity\",\r\n        field: \"validity\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"staff\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Basic fee\t\t\",\r\n        field: \"basicfee\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"status\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"action\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: tariffForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"View Tariff\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>District</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Localbody</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Package</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Status</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n    <div>\r\n        <Dialog open={form} onClose={handleCloseForm} fullWidth={true} maxWidth=\"xl\">\r\n          <DialogTitle style={{ textAlign: \"center\" }}>\r\n          \r\n          </DialogTitle>\r\n          <DialogContent >\r\n            <DialogContentText>\r\n              <TableContainer component={Paper}>\r\n              <Table sx={{ minWidth: 650 }} aria-label=\"caption table\">\r\n                  <TableHead>\r\n                \r\n                     </TableHead>\r\n               \r\n                 \r\n                  <TableBody>\r\n                  {tableData.map((row) => (\r\n                    <TableRow>\r\n                   \r\n                      <TableCell style={{ fontWeight: \"\" }}>\r\n                         Date:\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.date}</TableCell>\r\n                      <TableCell align=\"left\" style={{ fontWeight: \"\" }}>\r\n                         Time:\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.time}</TableCell>\r\n                      {/* <TableCell align=\"right\">Protein&nbsp;(g)</TableCell> */}\r\n\r\n                    </TableRow>\r\n                   \r\n                  ))}\r\n                    {tableData.map((row) => (\r\n                     \r\n                      <TableRow key={row.name}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                        customerID\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{row.customerId}</TableCell>\r\n                        <TableCell align=\"left\">Name</TableCell>\r\n                       \r\n                        <TableCell align=\"left\">{row.cust_name}</TableCell>\r\n                       \r\n\r\n                        \r\n                       \r\n            \r\n                      </TableRow>\r\n                    ))}\r\n                     {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                       <TableCell component=\"th\" scope=\"row\">\r\n                       Customer Type\r\n                       </TableCell>\r\n                       <TableCell align=\"left\">{}</TableCell>\r\n                       <TableCell align=\"left\">Localbody Type</TableCell>\r\n                      \r\n                       <TableCell align=\"left\">{}</TableCell>\r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                   ))}\r\n                    {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                       <TableCell component=\"th\" scope=\"row\">\r\n                       package Name\r\n                       </TableCell>\r\n                       <TableCell align=\"left\">{row.package}</TableCell>\r\n                       <TableCell align=\"left\">Package Validity</TableCell>\r\n                      \r\n                       <TableCell align=\"left\">{row.validity}</TableCell>\r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                     \r\n                   ))}\r\n                    {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                       <TableCell component=\"th\" scope=\"row\">\r\n                       Visit/month\r\n                       </TableCell>\r\n                       <TableCell align=\"left\">{row.visitperMonth}</TableCell>\r\n                       <TableCell align=\"left\">Registration Fee</TableCell>\r\n                      \r\n                       <TableCell align=\"left\">{row.regFee}</TableCell>\r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                   ))}\r\n                    {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                       <TableCell component=\"th\" scope=\"row\">\r\n                       Basic Fee\r\n                       </TableCell>\r\n                       <TableCell align=\"left\">{row.basicfee}</TableCell>\r\n                       <TableCell align=\"left\">Free Bags</TableCell>\r\n                      \r\n                       <TableCell align=\"left\">{}</TableCell>\r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                   ))}\r\n                    {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                       <TableCell component=\"th\" scope=\"row\">\r\n                       Staff\r\n                       </TableCell>\r\n                       <TableCell align=\"left\"></TableCell>\r\n                       \r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                   ))}\r\n                  </TableBody>\r\n                </Table>\r\n                <DialogTitle style={{ textAlign: \"center\" }}>\r\n                  Package Item Detailes\r\n          \r\n          </DialogTitle>\r\n          <Table>\r\n          <TableHead>\r\n                  {tableData.map((row) => (\r\n                    <TableRow>\r\n                   \r\n                      <TableCell style={{ fontWeight: \"bold\" }}>\r\n                         Item Name\r\n                      </TableCell>\r\n                     \r\n                      <TableCell align=\"left\" style={{ fontWeight: \"bold\" }}>\r\n                         Free Bags\r\n                      </TableCell>\r\n                      \r\n                      {/* <TableCell align=\"right\">Protein&nbsp;(g)</TableCell> */}\r\n\r\n                    </TableRow>\r\n                   \r\n                  ))}\r\n                  </TableHead>\r\n                  <TableBody>\r\n                   {tableData.map((row) => (\r\n                     \r\n                     <TableRow key={row.name}>\r\n                      \r\n                       <TableCell align=\"left\">{}</TableCell>\r\n                      \r\n                      \r\n                       <TableCell align=\"left\">{}</TableCell>\r\n                      \r\n\r\n                       \r\n                      \r\n           \r\n                     </TableRow>\r\n                     \r\n                   ))}\r\n                    </TableBody>\r\n                     </Table>\r\n              </TableContainer>\r\n             \r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseForm} color=\"success\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    </>\r\n    \r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(ViewTariff));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\AddCustomer\\index.js",["1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n\r\n  //getCustomerTypesOptions,\r\n  //getDesignationsOptions,\r\n  //getDistrictOptions,\r\n  //getLocalbodyOptions,\r\n  //getWardOptions,\r\n  //getPackageOptions,\r\n  //getBillingtypeOptions,\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  getCustomers,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./user.scss\";\r\n\r\nconst Customers = (props) => {\r\n  //edited\r\n\r\n  //const [selectedCustomerType,setSelectedCustomerType]=useState(null); \r\n  //const[selectedDesignation,setSelectedDesignation]=useState(null);\r\n  //const[selectedDistrict,setSelectedDistrict]=useState(null);\r\n  //const[selectedLocalbody,setSelectedLocalbody]=useState(null);\r\n  //const[selectedWard,setSelectedWard]=useState(null);\r\n  //const[selectedPackage,setSelectedPackage]=useState(null);\r\n  //const[selectedBillingtype,setSelectedBillingtype]=useState(null);\r\n  \r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n  \r\nconst {\r\n  customers\r\n}=useSelector((state)=>state.customers);\r\n  //edited\r\n  \r\n  // const customertypeOptions = useSelector(\r\n  //   (state)=> state.customertypes.customertypeOptions\r\n  // );\r\n\r\n  // const designationOptions = useSelector(\r\n  //   (state)=> state.designations.designationOptions\r\n  // );\r\n\r\n  // const districtOptions = useSelector(\r\n  //   (state)=> state.districts.districtOptions\r\n  // );\r\n\r\n  // const localbodyOptions = useSelector(\r\n  //   (state)=> state.localbodies.localbodyOptions\r\n  // );\r\n\r\n  // const WardOptions = useSelector(\r\n  //   (state)=> state.wards.wardsOptions\r\n  // );\r\n\r\n  // const PackageOptions = useSelector(\r\n  //   (state)=> state.packages.packageOptions\r\n  // );\r\n\r\n  // const BillingtypeOptions = useSelector(\r\n  //   (state)=> state.billingtypes.billingtypeOptions\r\n  // );\r\n\r\n\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getCustomers())\r\n    //dispatch(getUsers());\r\n    //dispatch(getPrivilagesOptions());\r\n   // dispatch(getCompaniesOptions());\r\n    //edited\r\n   //dispatch(getCustomerTypesOptions());\r\n    //dispatch(getDesignationOptions());\r\n    //dispatch(getDistrictOptions());\r\n    //dispatch(getLocalbodyOptions());\r\n    //dispatch(getWardOptions());\r\n    //dispatch(getPackageOptions());\r\n    //dispatch(getBillingtypeOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //edited\r\n      //setSelectedCustomerType(null);\r\n      //setSelectedDesignation(null);\r\n      //setSelectedDistrict(null);\r\n      //selectedLocalbody(null);\r\n      //selectedWard(null);\r\n      //selectedPackage(null);\r\n      //selectedBillingtype(null);\r\n\r\n\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  let preUpdateUser = (item) => {\r\n    //edited \r\n\r\n    // if (item.customertype) {\r\n    //   let customertype = {\r\n    //     label:item.customertype.name,\r\n    //     value: item.customertype._id,\r\n    //   };\r\n    //   handleSelectedCustomerType(customertype);\r\n    // }\r\n\r\n    // if (item.designation) {\r\n    //   let designation = {\r\n    //     label:item.designation.name,\r\n    //     value: item.designation._id,\r\n    //   };\r\n    //   handleSelectedDesignation(designation);\r\n    // }\r\n\r\n    // if (item.district) {\r\n    //   let district = {\r\n    //     label:item.district.name,\r\n    //     value: item.district._id,\r\n    //   };\r\n    //   handleSelectedDistrict(district);\r\n    // }\r\n\r\n    // if (item.localbody) {\r\n    //   let localbody = {\r\n    //     label:item.localbody.name,\r\n    //     value: item.localbody._id,\r\n    //   };\r\n    //   handleSelectedLocalbody(Localbody);\r\n    // }\r\n\r\n    // if (item.ward) {\r\n    //   let ward = {\r\n    //     label:item.ward.name,\r\n    //     value: item.ward._id,\r\n    //   };\r\n    //   handleSelectedWard(Ward);\r\n    // }\r\n\r\n    \r\n    // if (item.package) {\r\n    //   let package = {\r\n    //     label:item.package.name,\r\n    //     value: item.package._id,\r\n    //   };\r\n    //   handleSelectedPackage(package);\r\n    // }\r\n\r\n\r\n     // if (item.billingtype) {\r\n    //   let Billingtype = {\r\n    //     label:item.billingtype.name,\r\n    //     value: item.billingtype._id,\r\n    //   };\r\n    //   handleSelectedBillingtype(package);\r\n    // }\r\n\r\n\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setUserIdToBeUpdated(item._id);\r\n    setUserObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateUserPassword = (item) => {\r\n    setUserIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let customerData = [];\r\n\r\n    customers.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setUserIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.name1 = `${item.firstName} ${item.lastName}`;\r\n      item.privilage1 = item.privilage && item.privilage.name;\r\n      item.company1 = item.company && item.company.name;\r\n      item.branch1 = item.branch && item.branch.name;\r\n    // item.type=item.cust_type.customer_type_name;\r\n   // item.district=item.district.district_name\r\n      item.localbody=item.localbody_name.localbody_name;\r\n    if(item.ward!=null){item.ward=item.ward.ward_name}\r\n    else{item.ward=\"\"}\r\n    if(item.district!=null){item.district=item.district.district_name}\r\n    else{item.district=\"\"}\r\n     \r\n      if (item.cust_type!=null){\r\n        item.cust_type=item.cust_type.customer_type_name\r\n      }\r\n      else item.cust_type=\"\"\r\n      if(item.cust_added_by!=null){\r\n        item.addedby=item.cust_added_by.username\r\n      }\r\n      else item.addedby=\"\"\r\n      customerData.push(item);\r\n    });\r\n    setUsersForTable(customerData);\r\n  }, [customers]);\r\n\r\n  const data = {\r\n    columns: [\r\n              {\r\n                label: \"#\",\r\n                field: \"id\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Reg No\",\r\n                field: \"cust_reg_no\",\r\n                sort: \"asc\",\r\n                width: 400,\r\n              },\r\n              {\r\n                label: \"Type\",\r\n                field: \"cust_type\",\r\n                sort: \"asc\",\r\n                width: 200,\r\n              },\r\n              {\r\n                label: \"Name\",\r\n                field: \"cust_name\",\r\n                sort: \"asc\",\r\n                width: 200,\r\n              },\r\n              {\r\n                label: \"Phone\",\r\n                field: \"cust_phone\",\r\n                sort: \"asc\",\r\n                width: 200,\r\n              },\r\n             \r\n              {\r\n                label: \"District\",\r\n                field: \"district\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Localbody\",\r\n                field: \"localbody\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Ward\",\r\n                field: \"ward\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Staff\",\r\n                field: \"addedby\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Verification Status\",\r\n                field: \"cust_verification_status\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Action\",\r\n                field: \"action\",\r\n                width: 300,\r\n              },\r\n            ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //edited \r\n  \r\n  //  let customerTypeOptionsData =\r\n  //     customertypeOptions &&\r\n  //     customertypeOptions.data &&\r\n  //     customertypeOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let designationData =\r\n  //     designationOptions &&\r\n  //     designationOptions.data &&\r\n  //     designationOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let districtData =\r\n  //     districtOptions &&\r\n  //     districtOptions.data &&\r\n  //     districtOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let localbodyData =\r\n  //     localbodyOptions &&\r\n  //     localbodyOptionsdata &&\r\n  //     localbodyOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let wardData =\r\n  //     wardOptions &&\r\n  //     wardOptionsdata &&\r\n  //     wardOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let packagaData =\r\n  //     packageOptions &&\r\n  //     packageOptionsdata &&\r\n  //     packageOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let billingtypeData =\r\n  //     billingtypeOptions &&\r\n  //     billingtypeOptionsdata &&\r\n  //     billingtypeOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n\r\n  let privilagesOptionsData =\r\n    privilagesOptions &&\r\n    privilagesOptions.data &&\r\n    privilagesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let companiesOptionsData =\r\n    companiesOptions &&\r\n    companiesOptions.data &&\r\n    companiesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let branchesOptionsData =\r\n    branchesOptions &&\r\n    branchesOptions.data &&\r\n    branchesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n    //edited\r\n\r\n    // const customertypeOptionsGroup = [\r\n    //   {\r\n    //     options:customerTypeOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n\r\n    // const designationOptionsGroup = [\r\n    //   {\r\n    //     options:designationOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n   // const districtOptionsGroup = [\r\n    //   {\r\n    //     options:districtOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const localbodyOptionsGroup = [\r\n    //   {\r\n    //     options:localbodyOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const wardOptionsGroup = [\r\n    //   {\r\n    //     options:wardOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const packageOptionsGroup = [\r\n    //   {\r\n    //     options:packageOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const billingtypeOptionsGroup = [\r\n    //   {\r\n    //     options:billingtypeOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n  const privilagesOptionsGroup = [\r\n    {\r\n      options: privilagesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const companiesOptionsGroup = [\r\n    {\r\n      options: companiesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const branchesOptionsGroup = [\r\n    {\r\n      options: branchesOptionsData,\r\n    },\r\n  ];\r\n\r\n  function handleChangeCustomer(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setUserObject({ ...userObject, [name]: value });\r\n  }\r\n\r\n  //edited\r\n\r\n  // function  handleSelectedCustomerType(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedCustomerType(value);\r\n  //   setUserObject({ ...userObject, customertype: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedDesignation(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedDesignation(value);\r\n  //   setUserObject({ ...userObject, designation: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedDistrict(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedDistrict(value);\r\n  //   setUserObject({ ...userObject, district: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedLocalbody(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedLocalbody(value);\r\n  //   setUserObject({ ...userObject, localbody: newValue });\r\n  // }\r\n\r\n   // function  handleSelectedWard(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedWard(value);\r\n    //   setUserObject({ ...userObject, ward: newValue });\r\n    // }\r\n\r\n    // function  handleSelectedPackage(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedPackage(value);\r\n    //   setUserObject({ ...userObject, package: newValue });\r\n    // }\r\n  \r\n    // function  handleSelectedBillingtype(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedBillingtype(value);\r\n    //   setUserObject({ ...userObject, billingtype: newValue });\r\n    // }\r\n  \r\n  \r\n    function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setUserObject({ ...userObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setUserObject({ ...userObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setUserObject({ ...userObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    userIdTobeUpdated\r\n      ? dispatch(updateUser(userObject))\r\n      : dispatch(addUser(userObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: userIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateUser(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setUserIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteUser(userIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      <Modal\r\n        isOpen={showModal}\r\n        toggle={() => {\r\n          closeModal();\r\n        }}\r\n        centered={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">Confirmation</h5>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              closeModal();\r\n            }}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <AvForm\r\n          className=\"needs-validation\"\r\n          onValidSubmit={(e, v) => {\r\n            handleValidSubmitPassword(e, v);\r\n          }}\r\n        >\r\n          <div className=\"modal-body\">\r\n            {/* <Row>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                  <AvField\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please provide a valid password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.password}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Confirm Password</Label>\r\n                  <AvField\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please confirm the password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.confirmPassword}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row> */}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              className=\"btn btn-dark\"\r\n              style={{ marginRight: \"1rem\" }}\r\n              onClick={closeModal}\r\n            >\r\n              Close\r\n            </button>\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Confirm\r\n            </button>\r\n          </div>\r\n        </AvForm>\r\n      </Modal>\r\n\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Customers\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                        <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Customer Type</Label>\r\n                           <Select\r\n                            name=\"customer type\"\r\n                             //edited \r\n                             //value={selectedCustomerType}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                             //edited \r\n                             //handleSelectedCustomerType(value);\r\n                             handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={customertypeOptionsGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Name</Label>\r\n                          <AvField\r\n                            name=\"Name\"\r\n                            placeholder=\"Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                            value={userObject.Name}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Phone</Label>\r\n                          <AvField\r\n                            name=\"phone\"\r\n                            placeholder=\"Phone\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid phone\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.phone}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Land line number</Label>\r\n                          <AvField\r\n                            name=\"landnum\"\r\n                            placeholder=\"Land line number\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid number\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.landlineno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Watsapp Number</Label>\r\n                          <AvField\r\n                            name=\"watsapp number\"\r\n                            placeholder=\"Watsapp number\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Watsapp number\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.watsappno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Email</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Email\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.email}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Address</Label>\r\n                          <AvField\r\n                            name=\"address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Address\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.address}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Address 1</Label>\r\n                          <AvField\r\n                            name=\"Address1\"\r\n                            placeholder=\"Address1\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Address1\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.address1}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">House No</Label>\r\n                          <AvField\r\n                            name=\"House no\"\r\n                            placeholder=\"House No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter House no\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.houseno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Number of Members</Label>\r\n                          <AvField\r\n                            name=\"Number of Members\"\r\n                            placeholder=\"Number of Members\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter number of members\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.noofmembers}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Designation</Label>\r\n                          <Select\r\n                            name=\"Designation\"\r\n                            //edited\r\n                            //value={selectedDesignation}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedDesignation(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={designationOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>District</Label>\r\n                          <Select\r\n                            name=\"District\"\r\n                            //edited\r\n                            //value={selectedDistrict}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedDistrict(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={districtOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Local Body</Label>\r\n                          <Select\r\n                            name=\"Local Body\"\r\n                            //edited\r\n                            //value={selectedLocalbody}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedLocalbody(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={localbodyOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Ward</Label>\r\n                          <Select\r\n                            name=\"Ward\"\r\n                            //edited\r\n                            //value={selectedWard}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedWard(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={wardOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Packages</Label>\r\n                          <Select\r\n                            name=\"Packages\"\r\n                            //edited\r\n                            //value={selectedPackage}\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedPackage(value)\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            //edited\r\n                            //options={packageOptionGroup}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Group</Label>\r\n                          <AvField\r\n                            name=\"Group\"\r\n                            placeholder=\"Group\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Group\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.group}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Latitude</Label>\r\n                          <AvField\r\n                            name=\"Latitude\"\r\n                            placeholder=\"Latitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Latitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.latitude}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Longitude</Label>\r\n                          <AvField\r\n                            name=\"Longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.longitude}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                       <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Building Image</Label>\r\n                          <AvField\r\n                            name=\"mobile_icon_svg\"\r\n                            id=\"mobile_icon_svg\"\r\n                            type=\"file\"\r\n                            errorMessage=\"Upload  Image\"\r\n                            className=\"form-control\"\r\n                            //onChange={onChangeHandler}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Billing Type</Label>\r\n                          <Select\r\n                            name=\"Billing Type\"\r\n                            //edited\r\n                            //value={selectedBillingtype}\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedBillingtype(value)\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            //edited\r\n                            //options={BillingtypeOptionGroup}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     \r\n                      {/* {userIdTobeUpdated ? null : (\r\n                          <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                            <AvField\r\n                              name=\"password\"\r\n                              placeholder=\"Password\"\r\n                              type=\"password\"\r\n                              errorMessage=\" Please provide a valid password\"\r\n                              className=\"form-control\"\r\n                              validate={{ required: { value: true } }}\r\n                              id=\"validationCustom05\"\r\n                              value={userObject.password}\r\n                              onChange={handleChangeUser}\r\n                            />\r\n                          </div>\r\n                        </Col>\r\n                        \r\n                      )} */}\r\n                    </Row>\r\n\r\n                    {userIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Customers));\r\n\r\nCustomers.propTypes = {\r\n  error: PropTypes.any,\r\n  users: PropTypes.array,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Group\\index.js",["1852","1853","1854","1855","1856","1857","1858","1859","1860","1861","1862","1863","1864","1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal, Input } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\n\r\n\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  getGroups,\r\n  getLocalbodies,\r\n  getGroup,\r\n  addGroup,deleteGroup,updateGroup,\r\n  getWardOptions,\r\n  getWards\r\n\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Group = (props) => {\r\n  \r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [groupIdTobeUpdated, setGroupIdToBeUpdated] = useState(null);\r\n  const [groupIdToBeDeleted, setGroupIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [groupDataForTable, setgroupDataForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n  const [selectedLocalbody, setselectedLocalbody] = useState({});\r\n  const [selectedWard, setSelectedWard] = useState(null);\r\n  const [groupname, setGroupname] = useState(\"\");\r\n  \r\n  const[groupObject,setgroupObject]=useState({})\r\n \r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n  const{\r\n    groups,addingGroup,\r\n    addGroupResponse,\r\n    deleteGroupResponse,\r\n    updateGroupResponse\r\n  } =useSelector((state)=>state.groups)\r\n  const localbodiesOPtions=useSelector((state)=>state.localbodies.localbodies)\r\n \r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  )\r\n \r\n    const WardOptions= useSelector(\r\n      (state) => state.wards.wardOptions.data\r\n    )\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n  // dispatch(getUsers())\r\n     dispatch(getGroups());\r\n     dispatch(getLocalbodies());\r\n    // dispatch(getWardOptions(selectedLocalbody))\r\n     \r\n    }, []);\r\n   \r\n    useEffect(() => {\r\n      if (addGroupResponse.type === \"success\") {\r\n        dispatch(getGroups())\r\n        toastr.success(addGroupResponse.message);\r\n        setSelectedPrivilage({});\r\n        setSelectedCompany(null);\r\n        setSelectedBranch(null);\r\n      } else if (addGroupResponse.type === \"failure\") {\r\n        toastr.error(error.data.message, addGroupResponse.message);\r\n      }\r\n    }, [addGroupResponse]);\r\n    useEffect(() => {\r\n      if (deleteGroupResponse.type === \"success\") {\r\n        dispatch(getGroups())\r\n        toastr.success(deleteGroupResponse.message);\r\n        setGroupIdToBeDeleted(null);\r\n      } else if (deleteGroupResponse.type === \"failure\") {\r\n        toastr.error(error.data.message, deleteGroupResponse.message);\r\n      }\r\n    }, [deleteGroupResponse]);\r\n  \r\n    useEffect(() => {\r\n      if (updateGroupResponse.type === \"success\") {\r\n        dispatch(getGroups())\r\n        setShowModal(false);\r\n        setGroupIdToBeUpdated(null);\r\n        setPasswordObject({});\r\n        toastr.success(updateGroupResponse.message);\r\n      } else if (updateGroupResponse.type === \"failure\") {\r\n        toastr.error(error.data.message, updateGroupResponse.message);\r\n      }\r\n    }, [updateGroupResponse]);\r\n\r\n  \r\nlet preUpdateGroup=(item)=>{\r\n  console.log(item)\r\n setGroupname(item.group_name)\r\n if(item.group_localbody_name_id){\r\n   setselectedLocalbody(item.localbody)\r\n   setGroupIdToBeUpdated(item._id);\r\n   setgroupObject({ ...item, password: null });\r\n }\r\n}\r\n \r\nlet preUpdateLocalbodyPassword = (item) => {\r\n  setGroupIdToBeUpdated(item._id);\r\n  setShowModal(true);\r\n};\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n   \r\nlet groupsData=[];\r\n    groups.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n                preUpdateGroup(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n                 setGroupIdToBeDeleted(item._id);\r\n                 setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n         item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      if(item.group_localbody_name_id!=null){\r\n        item.localbody=item.group_localbody_name_id.localbody_name\r\n      }\r\n      if(item.group_addedby!=null){\r\n        item.addedby=item.group_addedby.username\r\n      }\r\n         groupsData.push(item);\r\n    });\r\n    setgroupDataForTable(groupsData);\r\n  }, [groups]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"group_date\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\t\",\r\n        field: \"group_time\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Group Name\t\",\r\n        field: \"group_name\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Local Body\",\r\n        field: \"localbody\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Ward\",\r\n        field: \"group_ward\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Incentive\",\r\n        field: \"\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"staff\",\r\n        field: \"addedby\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: groupDataForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ]\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n    function handleSelectedLocalbody(value) {\r\n     \r\n     setselectedLocalbody(value);\r\n     let newValue = {\r\n      name: value.label,\r\n       _id: value.value,\r\n     };\r\n    dispatch(getWardOptions(value.value))\r\n    setgroupObject({ ...groupObject, localbody: newValue })\r\n    \r\n     }\r\n    \r\n     function handleSelectedWard(values) {\r\n      //console.log(value)\r\n     setSelectedWard(values)\r\n    let ward=[];\r\n      values ?.map((v)=>ward.push(v.label));\r\n     // Object.assign({},ward)\r\n     // console.log(ward)\r\n     setgroupObject({...groupObject, wards:ward})\r\n\r\n      }\r\n     \r\n      \r\n     \r\n     \r\n    //console.log(selectedWard)\r\n   function handleGroupname(e){\r\n     let name=e.target.name;\r\n     let value=e.target.value;\r\n     setGroupname(value)\r\n     setgroupObject({...groupObject,[name]:value})\r\n   }\r\n\r\n   const handleValidSubmit = (event, values) => {\r\n   console.log(groupObject)\r\n    groupIdTobeUpdated\r\n      ? dispatch(updateGroup(groupObject))\r\n      : dispatch(addGroup(groupObject));\r\n\r\n      setselectedLocalbody({})\r\n      setGroupname(\"\")\r\n      setSelectedWard(null)\r\n  \r\n  };\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteGroup(groupIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Group\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                     handleValidSubmit(e, v);\r\n                     }}\r\n                  >\r\n                    <Row>\r\n                    <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Group Name</Label>\r\n                          <AvField\r\n                            name=\"group_name\"\r\n                            placeholder=\"\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Start\"\r\n                           value={groupname}\r\n                            className=\"form-control\"\r\n                           // validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            onChange={handleGroupname}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"localbody_name\"\r\n                           value={selectedLocalbody}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                              options={localbodiesOPtions.map((localbodies)=>{\r\n                                return{\r\n                                label:localbodies.localbody_name,\r\n                                value:localbodies._id,\r\n                                key:localbodies._id,\r\n                                }\r\n                              })\r\n                              }\r\n                            classNamePrefix=\"select2-selection\"\r\n                            onChange={\r\n                              handleSelectedLocalbody\r\n                              \r\n                            }\r\n                              \r\n                            \r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    \r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>select ward</Label>\r\n                        <Select  \r\n                        isMulti\r\n                       name=\"ward_name\"\r\n                      value={selectedWard}\r\n                     options={WardOptions?.map((ward)=>{\r\n                       \r\n                      return{\r\n                        \r\n                        label:ward.ward_name,\r\n                        value:ward._id\r\n                      }\r\n                     })}\r\n                      onChange={ handleSelectedWard }\r\n                       />\r\n                          \r\n                          \r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>select incentive</Label>\r\n                          <Select\r\n                            name=\"localbody_name\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    \r\n                      \r\n                      <Col>\r\n                     <div className=\"mb-3\">\r\n                     {groupIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingGroup ? true : false}\r\n                      >\r\n                        {addingGroup ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingGroup ? true : false}\r\n                      >\r\n                        {addingGroup ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                      \r\n                      \r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Group));\r\n\r\n Group.propTypes = {\r\n  error: PropTypes.any,\r\n   groups: PropTypes.array,\r\n };\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Localbody\\index.js",["1886","1887","1888","1889","1890","1891","1892","1893","1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal,FormGroup,Input } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getLocalbodies,\r\n  addLocalbody,\r\n  deleteLocalbody,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getCompaniesOptionsSuccess,\r\n  getDistrictsSuccess,\r\n  getBranchesOptions,\r\n  getDistricts,\r\n  updateLocalbody,\r\n  formreset\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n\r\n//import \"./district.scss\";\r\n\r\nconst Localbodies = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [localbodyObject, setLocalbodyObject] = useState({});\r\n  const [localbodyIdTobeUpdated, setLocalbodyIdToBeUpdated] = useState(null);\r\n  const [localbodyIdToBeDeleted, setLocalbodyIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [localbodysForTable, setLocalbodiesForTable] = useState([]);\r\nconst[companyOptions,setcompanyOptions]=useState([])\r\nconst[companyname,setCompanyname]=useState(\"\");\r\nconst[districtname,setDistrictname]=useState(\"\");\r\nconst[localbodytype,setlocalbodytype]=useState(\"\");\r\nconst[localbodyname,setlocalbodyname]=useState(\"\");\r\nconst[shortcode,setshortcode]=useState(\"\");\r\nconst [districtOptions,setdistrictOptions]=useState([])\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    localbodies,\r\n    addingLocalbody,\r\n    addLocalbodyResponse,\r\n    deleteLocalbodyResponse,\r\n    updateLocalbodyResponse,\r\n    error,\r\n  } = useSelector((state) => state.localbodies);\r\n\r\n  const companies=useSelector((state)=>state.companies);\r\nconst district=useSelector((state)=>state.districts);\r\n  const dispatch = useDispatch();\r\n\r\n \r\n\r\n  \r\n    useEffect(()=>{\r\n    dispatch(getLocalbodies())\r\n        dispatch(getCompaniesOptions());\r\n        \r\n        dispatch(getDistricts());\r\n      \r\n    },[])\r\n  \r\n\r\n  useEffect(() => {\r\n    if (addLocalbodyResponse.type === \"success\") {\r\n      dispatch(getLocalbodies())\r\n      toastr.success(addLocalbodyResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addLocalbodyResponse.message);\r\n    }\r\n  }, [addLocalbodyResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteLocalbodyResponse.type === \"success\") {\r\n      dispatch(getLocalbodies())\r\n      toastr.success(deleteLocalbodyResponse.message);\r\n      setLocalbodyIdToBeDeleted(null);\r\n    } else if (deleteLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteLocalbodyResponse.message);\r\n    }\r\n  }, [deleteLocalbodyResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateLocalbodyResponse.type === \"success\") {\r\n      dispatch(getLocalbodies())\r\n      setShowModal(false);\r\n      setLocalbodyIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateLocalbodyResponse.message);\r\n    } else if (updateLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateLocalbodyResponse.message);\r\n    }\r\n  }, [updateLocalbodyResponse]);\r\n\r\n  let preUpdateLocalbody = (item) => {\r\n    console.log(item)\r\n     setCompanyname(item.company_name)\r\n      //handleSelectedPrivilage(privilage);\r\n    setDistrictname(item.district_name);\r\n    setlocalbodytype(item.localbody_type);\r\n    setlocalbodyname(item.localbody_name)\r\n    setshortcode(item.short_code)\r\n   \r\n\r\n    setLocalbodyIdToBeUpdated(item._id);\r\n    setLocalbodyObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateLocalbodyPassword = (item) => {\r\n    setLocalbodyIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let localbodyData = [];\r\n\r\n    localbodies.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n         \r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateLocalbody(item);\r\n            }}\r\n          ></i>\r\n          \r\n\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setLocalbodyIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      if(item.localbody_addedby!=null)\r\n      {\r\n        item.localbody_addedby=item.localbody_addedby.username;\r\n      }\r\n      if(item.localbody_company!=null)\r\n      {\r\n        item.company_name=item.localbody_company.company_name;\r\n      }\r\n      if(item.dist_id)\r\n      {\r\n        item.district_name=item.dist_id.district_name;\r\n      }\r\n      \r\n      \r\n      localbodyData.push(item);\r\n    });\r\n    setLocalbodiesForTable(localbodyData);\r\n  }, [localbodies]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date \",\r\n        field: \"localbody_date\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      }, {\r\n        label: \"Time \",\r\n        field: \"localbody_time\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Company \",\r\n        field: \"company_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"District \",\r\n        field: \"district_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n\r\n     \r\n      {\r\n        label: \" Type\",\r\n        field: \"localbody_type\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \" Name\",\r\n        field: \"localbody_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Short code\",\r\n        field: \"short_code\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbody_addedby\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: localbodysForTable,\r\n  };\r\n\r\n\r\n\r\n  function handleChangeLocalbodyname(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n   setlocalbodyname(value)\r\n   setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n\r\n  function handleChangeCompany(e){\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n   setCompanyname(value)\r\n   setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n  function handleChangeDistrictName(e){\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n   setDistrictname(value)\r\n   setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n\r\n  function handleChangeLocalbodyType(e){\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n   setlocalbodytype(value)\r\n   setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n  function handleChangeShortcode(e){\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n   setshortcode(value)\r\n   setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n /* function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setLocalbodyObject({ ...localbodyObject, privilage: newValue });\r\n  \r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setLocalbodyObject({ ...localbodyObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setLocalbodyObject({ ...localbodyObject, branch: newValue });\r\n  }*/\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n   \r\n    localbodyIdTobeUpdated\r\n      ? dispatch(updateLocalbody(localbodyObject))\r\n      : dispatch(addLocalbody(localbodyObject));\r\n    setCompanyname(\"\");\r\n    setDistrictname(\"\");\r\n    setlocalbodyname(\"\");\r\n    setlocalbodytype(\"\");\r\n    setshortcode(\"\")\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: localbodyIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateLocalbody(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setLocalbodyIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteLocalbody(localbodyIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Localbody\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                        <FormGroup>\r\n        \r\n        <Input type=\"select\" name=\"company_name\" id=\"exampleSelect\" style={{appearance:\"auto\"}}  value={companyname}\r\n                            onChange={handleChangeCompany} onClick={()=>{\r\n                              console.log(companies);\r\n                              setcompanyOptions(companies.companiesOptions.data)\r\n                            }}>\r\n       <option>CompanyName</option>\r\n      {\r\n        companyOptions.map(options=>(\r\n           <option>{options.company_name}</option>\r\n         )\r\n\r\n         )\r\n       }\r\n     \r\n        </Input>\r\n      </FormGroup>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                        <FormGroup>\r\n        \r\n        <Input type=\"select\" name=\"district_name\" id=\"exampleSelect\" style={{appearance:\"auto\"}}  value={districtname}\r\n                            onChange={handleChangeDistrictName} onClick={()=>{\r\n                              setdistrictOptions(district.districts)\r\n                            }}>\r\n        <option>District</option>\r\n        \r\n        {\r\n        districtOptions.map(options=>(\r\n           <option>{options.district_name}</option>\r\n         )\r\n\r\n         )\r\n       }\r\n        </Input>\r\n      </FormGroup>\r\n                        </div>\r\n                      </Col>\r\n                     \r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                        <FormGroup>\r\n        \r\n        <Input type=\"select\" name=\"localbody_type\" id=\"exampleSelect\" style={{appearance:\"auto\"}}  value={localbodytype}\r\n                            onChange={handleChangeLocalbodyType}>\r\n        <option>Local Body Type</option>\r\n        <option>Municipality</option>\r\n        <option>Gramapanchayath</option>\r\n        <option>corporation</option>\r\n         \r\n        </Input>\r\n      </FormGroup>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                          <AvField\r\n                            name=\"localbody_name\"\r\n                            placeholder=\"Localbody Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter localbody Name\"\r\n                            className=\"form-control\"\r\n                            //validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={localbodyname}\r\n                            onChange={handleChangeLocalbodyname}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                          <AvField\r\n                            name=\"short_code\"\r\n                            placeholder=\"ShortCode\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter shortcode\"\r\n                            className=\"form-control\"\r\n                           // validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={shortcode}\r\n                            onChange={handleChangeShortcode}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     <Col>\r\n                     <div className=\"mb-3\">\r\n                     {localbodyIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingLocalbody ? true : false}\r\n                      >\r\n                        {addingLocalbody ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingLocalbody ? true : false}\r\n                      >\r\n                        {addingLocalbody ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n\r\n                   \r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={true}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Localbodies));\r\n\r\nLocalbodies.propTypes = {\r\n  error: PropTypes.any,\r\n  localbodys: PropTypes.array,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\District\\index.js",["1908","1909","1910","1911","1912","1913","1914","1915","1916","1917","1918","1919","1920","1921","1922","1923","1924","1925","1926","1927","1928","1929","1930"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable, } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getDistricts,\r\n  addDistrict,\r\n  deleteDistrict,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateDistrict,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst Districts = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [districtObject, setDistrictObject] = useState({});\r\n  const [districtIdTobeUpdated, setDistrictIdToBeUpdated] = useState(null);\r\n  const [districtIdToBeDeleted, setDistrictIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [districtsForTable, setDistrictsForTable] = useState([]);\r\nconst[districtValue,setdistrictValue]=useState(\"\")\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    districts,\r\n    addingDistrict,\r\n    addDistrictResponse,\r\n    deleteDistrictResponse,\r\n    updateDistrictResponse,\r\n    error,\r\n  } = useSelector((state) => state.districts);\r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getDistricts());\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n useEffect(()=>{\r\n    if (addDistrictResponse.type === \"success\") {\r\n      dispatch(getDistricts())\r\n      toastr.success(addDistrictResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    \r\n \r\n     \r\n    } else if (addDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addDistrictResponse.message);\r\n    }\r\n  },[addDistrictResponse])\r\n  \r\n\r\n  useEffect(() => {\r\n    if (deleteDistrictResponse.type === \"success\") {\r\n      dispatch(getDistricts())\r\n      toastr.success(deleteDistrictResponse.message);\r\n      setDistrictIdToBeDeleted(null);\r\n    } else if (deleteDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteDistrictResponse.message,{timeOut:2000,preventDuplicates:true});\r\n    }\r\n  }, [deleteDistrictResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateDistrictResponse.type === \"success\") {\r\n      dispatch(getDistricts())\r\n      setShowModal(false);\r\n      setDistrictIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateDistrictResponse.message);\r\n    } else if (updateDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateDistrictResponse.message);\r\n    }\r\n  }, [updateDistrictResponse]);\r\n\r\n  let preUpdateDistrict = (item) => {\r\n    console.log(item)\r\n    if (item.district_name) {\r\n     setdistrictValue(item.district_name)\r\n     console.log(districtValue)\r\n    }\r\n    setDistrictIdToBeUpdated(item._id);\r\n    setDistrictObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateDistrictPassword = (item) => {\r\n    setDistrictIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let districtData = [];\r\n\r\n    districts.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateDistrict(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setDistrictIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.state_name=\"Kerala\";\r\n      item.district_addedby=item.district_addedby.username;\r\n      districtData.push(item);\r\n    });\r\n    setDistrictsForTable(districtData);\r\n    console.log(districtsForTable)\r\n  }, [districts]);\r\n\r\n \r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district_date\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"district_time\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"State\",\r\n        field: \"state_name\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"district_name\",\r\n        sort: \"desc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"district_addedby\",\r\n        sort: \"desc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: districtsForTable,\r\n  };\r\n \r\n\r\n\r\n  function handleChangeDistrict(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setdistrictValue(value)\r\n    setDistrictObject({ ...districtObject, [name]: value });\r\n    \r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setDistrictObject({ ...districtObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setDistrictObject({ ...districtObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setDistrictObject({ ...districtObject, branch: newValue });\r\n    \r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    districtIdTobeUpdated\r\n      ? dispatch(updateDistrict(districtObject))\r\n      : dispatch(addDistrict(districtObject));\r\n      setdistrictValue(\"\")\r\n     \r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: districtIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateDistrict(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setDistrictIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteDistrict(districtIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage District\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                     \r\n                      handleValidSubmit(e, v)\r\n                   \r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">District</Label>\r\n                          <AvField\r\n                            name=\"district_name\"\r\n                            placeholder=\"District name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter District Name\"\r\n                            className=\"form-control\"\r\n                           \r\n                            id=\"validationCustom01\"\r\n                            value={districtValue}\r\n                            onChange={handleChangeDistrict}\r\n                            \r\n                          />\r\n                       </div>\r\n                      </Col>\r\n                    \r\n                     <Col>\r\n                     <div className=\"mb-3\" style={{paddingTop:\"30px\"}}>\r\n                     {districtIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingDistrict ? true : false}\r\n                       \r\n                      >\r\n                        {addingDistrict ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingDistrict ? true : false}\r\n                       >\r\n                        {addingDistrict ? \"Adding\" : \"Submit\"}\r\n                        \r\n                      </Button>\r\n                      \r\n                    )\r\n                    }\r\n                    </div>\r\n                     </Col>\r\n                   \r\n\r\n                   </Row>\r\n                  </AvForm>\r\n                  \r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={true}\r\n                    info={false}\r\n                   \r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Districts));\r\n\r\nDistricts.propTypes = {\r\n  error: PropTypes.any,\r\n  districts: PropTypes.array,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\Ward\\index.js",["1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr, { options } from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal,FormGroup,Input, FormText } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getWards,\r\n  addWard,\r\n  deleteWard,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  getLocalbodies,\r\n  getLocalbodiesSuccess,\r\n  updateWard,\r\n  getLocalbody,\r\n  getLocalbodySuccess\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst Wards = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [wardObject, setWardObject] = useState({});\r\n  const [wardIdTobeUpdated, setWardIdToBeUpdated] = useState(null);\r\n  const [wardIdToBeDeleted, setWardIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [wardsForTable, setWardsForTable] = useState([]);\r\n  const [localbodyOptions,setlocalbodyOptions]=useState([])\r\n  const [wardname,setWardname]=useState(\"\")\r\n  const[localbodyname,setLocalbodyname]=useState(\"\")\r\n  const[wardshortcode,setwardShortcode]=useState(\"\")\r\n  const[wardno,setwardno]=useState(\"\")\r\n  const [values, setValues] = useState({})\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    wards,\r\n    addingWard,\r\n    addWardResponse,\r\n    deleteWardResponse,\r\n    updateWardResponse,\r\n    error,\r\n  } = useSelector((state) => state.wards);\r\n\r\n  const localbody=useSelector((state)=>state.localbodies)\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWards());\r\n    dispatch(getLocalbodies())\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (addWardResponse.type === \"success\") {\r\n      dispatch(getWards())\r\n      toastr.success(addWardResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addWardResponse.message);\r\n    }\r\n  }, [addWardResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteWardResponse.type === \"success\") {\r\n      dispatch(getWards())\r\n      toastr.success(deleteWardResponse.message);\r\n      setWardIdToBeDeleted(null);\r\n    } else if (deleteWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteWardResponse.message);\r\n    }\r\n  }, [deleteWardResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateWardResponse.type === \"success\") {\r\n      dispatch(getWards())\r\n      setShowModal(false);\r\n      setWardIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateWardResponse.message);\r\n    } else if (updateWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateWardResponse.message);\r\n    }\r\n  }, [updateWardResponse]);\r\n\r\n  let preUpdateWard = (item) => {\r\n   \r\n     console.log(item)\r\n        setLocalbodyname(item.localbody_name);\r\nsetwardno(item.ward_no);\r\nsetWardname(item.ward_name)\r\n    \r\n     // handleSelectedlocalbodyname(localbodyname);\r\n    setWardIdToBeUpdated(item._id);\r\n    setWardObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateWardPassword = (item) => {\r\n    setWardIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wardData = [];\r\n\r\n    wards.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n             console.log(item)\r\n              preUpdateWard(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setWardIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.localbody_name=item.localbody_name_id.localbody_name;\r\n      item.ward_addedby=item.ward_addedby.username;\r\n      wardData.push(item);\r\n    });\r\n    setWardsForTable(wardData);\r\n  }, [wards]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"ward_date\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"ward_time\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Localbody \",\r\n        field: \"localbody_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"ward Number\",\r\n        field: \"ward_no\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"ward Name\",\r\n        field: \"ward_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"ward_addedby\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: wardsForTable,\r\n  };\r\n\r\n\r\n\r\n  function handleChangeWard(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setWardname(value)\r\n \r\n   \r\n    setWardObject({ ...wardObject, [name]: value });\r\n   \r\n    \r\n  }\r\n  function handleChangeWardno(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setwardno(value)\r\n \r\n   \r\n    setWardObject({ ...wardObject, [name]: value });\r\n    setValues({ ...values, [name]: value })\r\n    console.log(values)\r\n  }\r\n  function handelChangeLocalbody(e){\r\n    dispatch(getLocalbody(e.target.value))\r\n    let name=e.target.name;\r\n    let value=e.target.value;\r\n    setLocalbodyname(value)\r\n\r\n    \r\n  console.log(localbody.localbody)\r\n    setWardObject({ ...wardObject, [name]: value });\r\n    \r\n    \r\n    \r\n  }\r\n    \r\n  \r\n\r\n  function handleSelectedlocalbodyname(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setLocalbodyname(value);\r\n    setWardObject({ ...wardObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setWardObject({ ...wardObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.value,\r\n     \r\n    };\r\n    setSelectedBranch(value);\r\n    setWardObject({ ...wardObject, localbody_name: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    wardIdTobeUpdated\r\n      ? dispatch(updateWard(wardObject))\r\n      : dispatch(addWard(wardObject));\r\n      setLocalbodyname(\"\");\r\n      setwardno(\"\");\r\n      setWardname(\"\")\r\n      \r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: wardIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateWard(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setWardIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteWard(wardIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Ward\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                     \r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                        <FormGroup>\r\n        \r\n        <Input type=\"select\" name=\"localbody_name\" id=\"exampleSelect\" style={{appearance:\"auto\"}}  value={localbodyname}\r\n                            onChange={handelChangeLocalbody}\r\n                            \r\n                            onClick={()=>{\r\n                             console.log(localbody)\r\n                              setlocalbodyOptions(localbody.localbodies)\r\n                              console.log(localbodyOptions)\r\n                            }}>\r\n                           \r\n                              \r\n                             \r\n                            \r\n        <option value=\"\">Localbody </option>\r\n        \r\n        {\r\n        localbodyOptions.map(options=>(\r\n          \r\n           <option key={options._id}>{options.localbody_name}</option>\r\n         )\r\n\r\n         )\r\n       }\r\n        </Input>\r\n       \r\n      </FormGroup>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                        <FormGroup>\r\n        \r\n        <Input type=\"select\" name=\"ward_no\" id=\"exampleSelect\" style={{appearance:\"auto\"}}  value={wardno}\r\n                            onChange={handleChangeWardno}>\r\n        <option>Ward Number </option>\r\n    <option>1</option>\r\n    <option>2</option>\r\n    <option>3</option>\r\n    <option>4</option>\r\n    <option>5</option>\r\n    <option>6</option>\r\n    <option>7</option>\r\n    <option>8</option>\r\n    <option>9</option>\r\n    <option>10</option>\r\n    <option>11</option>\r\n        </Input>\r\n      </FormGroup>\r\n                        </div>\r\n                      </Col>\r\n                     \r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                         \r\n                          <AvField\r\n                            name=\"ward_name\"\r\n                            placeholder=\" Ward name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter ward Name\"\r\n                            className=\"form-control\"\r\n                            //validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={wardname}\r\n                            onChange={handleChangeWard}\r\n                            \r\n                          />\r\n                              </div>\r\n\r\n                      </Col>\r\n                     \r\n\r\n                     \r\n                     \r\n                     \r\n                     <Col>\r\n                     <div className=\"mb-3\">\r\n                     {wardIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWard ? true : false}\r\n                      >\r\n                        {addingWard ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWard ? true : false}\r\n                      >\r\n                        {addingWard ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n\r\n                   \r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={true}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n                    };\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Wards));\r\n\r\nWards.propTypes = {\r\n  error: PropTypes.any,\r\n  wards: PropTypes.array,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\LayerGroup.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapLayerControl.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapMarkerCustomIcons.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapVectorLayers.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\SimpleMap.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapWithPopup.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\i18n.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\common\\languages.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Manage\\CustomerCategory\\index.js",["1960","1961","1962","1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable, } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getDistricts,\r\n  addDistrict,\r\n  deleteDistrict,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateDistrict,\r\n  getCustomerCategories,\r\n  addCategory,updateCategory,\r\n  deleteCategory\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst CustomerCategory = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [categoryObject, setCategoryObject] = useState({});\r\n  const [categoryIdTobeUpdated, setCategoryIdToBeUpdated] = useState(null);\r\n  const [categoryIdToBeDeleted, setCategoryIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [categoriesForTable, setCategoriesForTable] = useState([]);\r\nconst[categoryValue,setcategoryValue]=useState(\"\")\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    districts,\r\n    addingDistrict,\r\n    addDistrictResponse,\r\n    deleteDistrictResponse,\r\n    updateDistrictResponse,\r\n    \r\n  } = useSelector((state) => state.districts);\r\n  const{\r\n      categories,\r\n      \r\n      addCategoryResponse,\r\n      updateCategoryResponse,\r\n      deleteCategoryResponse,\r\n      addingCategory,\r\n      error,\r\n    }=useSelector((state)=>state.customerCategory)\r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getCustomerCategories());\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n useEffect(()=>{\r\n    if (addCategoryResponse.type === \"success\") {\r\n      dispatch(getCustomerCategories())\r\n      toastr.success(addCategoryResponse.message);\r\n     \r\n    \r\n \r\n     \r\n    } else if (addCategoryResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addCategoryResponse.message);\r\n    }\r\n  },[addCategoryResponse])\r\n  \r\n\r\n  useEffect(() => {\r\n    if (deleteCategoryResponse.type === \"success\") {\r\n      dispatch(getCustomerCategories())\r\n      toastr.success(deleteCategoryResponse.message);\r\n      setCategoryIdToBeDeleted(null);\r\n    } else if (deleteCategoryResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteCategoryResponse.message,{timeOut:2000,preventDuplicates:true});\r\n    }\r\n  }, [deleteCategoryResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateCategoryResponse.type === \"success\") {\r\n      dispatch(getCustomerCategories())\r\n      setShowModal(false);\r\n      setCategoryIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateCategoryResponse.message);\r\n    } else if (updateCategoryResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateCategoryResponse.message);\r\n    }\r\n  }, [updateCategoryResponse]);\r\n\r\n  let preUpdateCategory = (item) => {\r\n    console.log(item)\r\n    if (item.customer_type_name) {\r\n     setcategoryValue(item.customer_type_name)\r\n     \r\n    }\r\n    setCategoryIdToBeUpdated(item._id);\r\n    setCategoryObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateCategoryPassword = (item) => {\r\n    setCategoryIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let categoryData = [];\r\n\r\n    categories?.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateCategory(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setCategoryIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n     \r\n    if(item.customer_type_addedby!=null){\r\n        item.staff=item.customer_type_addedby.username\r\n    }\r\n      categoryData.push(item);\r\n    });\r\n    setCategoriesForTable(categoryData);\r\n    \r\n  }, [categories]);\r\n\r\n \r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"customer_type_date\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"customer_type_time\",\r\n        //sort: \"desc\",\r\n        width: 150,\r\n      },\r\n     \r\n      {\r\n        label: \"Category\",\r\n        field: \"customer_type_name\",\r\n        sort: \"desc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"staff\",\r\n        sort: \"desc\",\r\n        width: 400,\r\n      },\r\n   \r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 50,\r\n      },\r\n    ],\r\n    rows: categoriesForTable,\r\n  };\r\n \r\n\r\n\r\n  function handleChangeCategory(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setcategoryValue(value)\r\n    setCategoryObject({ ...categoryObject, [name]: value });\r\n    \r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setCategoryObject({ ...categoryObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    //setDistrictObject({ ...districtObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n   // setDistrictObject({ ...districtObject, branch: newValue });\r\n    \r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    categoryIdTobeUpdated\r\n      ? dispatch(updateCategory(categoryObject))\r\n      : dispatch(addCategory(categoryObject));\r\n      setcategoryValue(\"\")\r\n     \r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n       // _id: districtIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateDistrict(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setCategoryIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteCategory(categoryIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Customer Category\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                     \r\n                      handleValidSubmit(e, v)\r\n                   \r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Add Category</Label>\r\n                          <AvField\r\n                            name=\"category_name\"\r\n                            placeholder=\"Category name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter District Name\"\r\n                            className=\"form-control\"\r\n                           \r\n                            id=\"validationCustom01\"\r\n                            value={categoryValue}\r\n                            onChange={handleChangeCategory}\r\n                            \r\n                          />\r\n                       </div>\r\n                      </Col>\r\n                    \r\n                     <Col>\r\n                     <div className=\"mb-3\" style={{paddingTop:\"30px\"}}>\r\n                     {categoryIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingCategory ? true : false}\r\n                       \r\n                      >\r\n                        {addingCategory ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingCategory ? true : false}\r\n                       >\r\n                        {addingCategory ? \"Adding\" : \"Submit\"}\r\n                        \r\n                      </Button>\r\n                      \r\n                    )\r\n                    }\r\n                    </div>\r\n                     </Col>\r\n                   \r\n\r\n                   </Row>\r\n                  </AvForm>\r\n                  \r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={true}\r\n                    info={false}\r\n                   \r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(CustomerCategory));\r\n\r\nCustomerCategory.propTypes = {\r\n  error: PropTypes.any,\r\n  categories: PropTypes.array,\r\n};\r\n","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\reducer.js",["1992","1993","1994","1995","1996","1997","1998"],"import{\r\n    GET_CUST_CATEGORIES,\r\n    GET_CUST_CATEGORIES_FAIL,\r\n    GET_CUST_CATEGORIES_SUCCESS,\r\n    GET_CUST_CATEGORY,\r\n    GET_CUST_CATEGORY_SUCCESS,\r\n    GET_CUST_CATEGORY_FAIL,\r\n    ADD_CUST_CATEGORY,\r\n    ADD_CUST_CATEGORY_SUCCESS,\r\n    ADD_CUST_CATEGORY_FAIL,\r\n    UPDATE_CUST_CATEGORY,\r\n    UPDATE_CUST_CATEGORY_SUCCESS,\r\n    UPDATE_CUST_CATEGORY_FAIL,\r\n    DELETE_CUST_CATEGORY,\r\n    DELETE_CUST_CATEGORY_SUCCESS,\r\n    DELETE_CUST_CATEGORY_FAIL\r\n\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE={\r\n    categories:[],\r\n    error:{},\r\n    category:{},\r\n    addingCategory:false,\r\n    deletingCategory:false,\r\n    addCategoryResponse:{},\r\n    updateCategoryResponse:{},\r\n    deleteCategoryResponse:{},\r\n    categoryIdToBeDeleted:\"\"\r\n\r\n\r\n\r\n};\r\n\r\n\r\nconst Cust_Category = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n      case GET_CUST_CATEGORIES:\r\n        return {\r\n          ...state,\r\n          params: action.payload,\r\n        };\r\n  \r\n      case GET_CUST_CATEGORIES_SUCCESS:\r\n        return {\r\n          ...state,\r\n          categories: action.payload.data,\r\n        };\r\n  \r\n      case GET_CUST_CATEGORIES_FAIL:\r\n        return {\r\n          ...state,\r\n          error: action.payload,\r\n        };\r\n        case ADD_CUST_CATEGORY:\r\n      return {\r\n        ...state,\r\n        addingCategory: true,\r\n        category: action.payload,\r\n      };\r\n\r\n    case ADD_CUST_CATEGORY_SUCCESS:\r\n      let newCategory= [...state.categories, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingCategory: false,\r\n        addCategoryResponse: {\r\n          type: \"success\",\r\n          message: \"Category added successfully\",\r\n         \r\n        },\r\n      \r\n        categories: newCategory,\r\n        error: {},\r\n        \r\n      };\r\n\r\n    case ADD_CUST_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        addingCategory: false,\r\n        addCategoryResponse: { type: \"failure\", message: \"Adding category failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_CUST_CATEGORY:\r\n      return {\r\n        ...state,\r\n        deletingCategory: true,\r\n        categoryIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_CUST_CATEGORY_SUCCESS:\r\n      let newCategorys = state.categories.filter((item) => {\r\n        return item._id != state.categoryIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingCategory: false,\r\n        categoryIdToBeDeleted: \"\",\r\n        deletingCategory: false,\r\n        deleteCategoryResponse: {\r\n          type: \"success\",\r\n          message: \"Category deleted successfully\",\r\n        },\r\n        categories: newCategorys,\r\n      };\r\n\r\n    case DELETE_CUST_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingCategory: false,\r\n        deleteCategoryResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting category failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_CUST_CATEGORY:\r\n      return {\r\n        ...state,\r\n        updatingCategory: true,\r\n        category: action.payload,\r\n      };\r\n\r\n    case UPDATE_CUST_CATEGORY_SUCCESS:\r\n      let newCategory1 = state.categories.map((item) => {\r\n        if (item._id == state.category._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingCategory: false,\r\n        category: \"\",\r\n        updatingCategory: false,\r\n        updateCategoryResponse: {\r\n          type: \"success\",\r\n          message: \"Category updated successfully\",\r\n        },\r\n        categories: newCategory1,\r\n      };\r\n\r\n    case UPDATE_CUST_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingCategory: false,\r\n        updateCategoryResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating category failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n     \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Cust_Category;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\customerCategory\\saga.js",["1999","2000"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport{\r\nGET_CUST_CATEGORIES,\r\nADD_CUST_CATEGORY,\r\nUPDATE_CUST_CATEGORY,\r\nDELETE_CUST_CATEGORY\r\n\r\n} from \"./actionTypes\";\r\n\r\nimport{\r\n   getCustomerCategoriesSuccess,\r\n   getCustomerCategoriesFail,\r\n   addCategorySuccess,\r\n   addCategoryFail,\r\n   updateCategorySuccess,\r\n   updateCategoryFail,\r\n   deleteCategorySuccess,\r\n   deleteCategoryFail,\r\n} from \"./actions\";\r\n\r\nimport{\r\n    getCustomerCategories,\r\n    getCategory,\r\n    addCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n} from \"../../helpers/backend_helper\"\r\n\r\nfunction* fetchCategories() {\r\n    try {\r\n      const response = yield call(getCustomerCategories);\r\n      yield put(getCustomerCategoriesSuccess(response));\r\n    } catch (error) {\r\n      yield put(getCustomerCategoriesFail(error));\r\n    }\r\n  }\r\n\r\n  function* onAddCategory({ payload: category }) {\r\n    try {\r\n      const response = yield call(addCategory, category);\r\n      yield put(addCategorySuccess(response));\r\n    } catch (error) {\r\n      yield put(addCategoryFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onUpdateCategory({ payload: category }) {\r\n    delete category.name1;\r\n    delete category.privilage1;\r\n    delete category.company1;\r\n    delete category.branch1;\r\n    delete category.action;\r\n    //console.log(user);\r\n   /* if (user.privilage) {\r\n      user.privilage = user.privilage._id;\r\n    }\r\n    if (user.company) {\r\n      user.company = user.company._id;\r\n    }\r\n    if (user.branch) {\r\n      user.branch = user.branch._id;\r\n    }*/\r\n  \r\n    try {\r\n      const response = yield call(updateCategory, category);\r\n      yield put(updateCategorySuccess(response));\r\n    } catch (error) {\r\n      yield put(updateCategoryFail(error.response));\r\n    }\r\n  }\r\n  \r\n  function* onDeleteCategory({ payload: catId}) {\r\n    try {\r\n      const response = yield call(deleteCategory, catId);\r\n      yield put(deleteCategorySuccess(response));\r\n    } catch (error) {\r\n      yield put(deleteCategoryFail(error.response));\r\n    }\r\n  }\r\n\r\n  function* customerCategorySaga() {\r\n    yield takeEvery(GET_CUST_CATEGORIES, fetchCategories);\r\n    yield takeEvery(ADD_CUST_CATEGORY, onAddCategory);\r\n    yield takeEvery(UPDATE_CUST_CATEGORY, onUpdateCategory);\r\n    yield takeEvery(DELETE_CUST_CATEGORY, onDeleteCategory);\r\n  }\r\n\r\n  export default customerCategorySaga;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\Document.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\qrCode\\saga.js",["2001"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport{\r\nGET_QRCODE,\r\nADD_QRCODE\r\n} from \"./actionTypes\"\r\n\r\nimport {\r\n    getQrcodesSuccess,\r\n    getQrcodeFail,\r\n    addQrcodeSuccess,\r\n    addQrcodeFail\r\n}from \"./actions\"\r\n\r\nimport {\r\n    getQrcode,\r\n    addQrcode\r\n\r\n} from \"../../helpers/backend_helper\";\r\nfunction* fetchQrcode() {\r\n    try {\r\n      const response = yield call(getQrcode);\r\n      yield put(getQrcodesSuccess(response));\r\n    } catch (error) {\r\n      yield put(getQrcodeFail(error));\r\n    }\r\n  }\r\n\r\n\r\n  function* onAddQrcode({ payload: data }) {\r\n    try {\r\n      const response = yield call(addQrcode, data);\r\n      yield put(addQrcodeSuccess(response));\r\n    } catch (error) {\r\n      yield put(addQrcodeFail(error.response));\r\n    }\r\n  }\r\n\r\n  function* qrcodeSaga() {\r\n    yield takeEvery(GET_QRCODE, fetchQrcode);\r\n    yield takeEvery(ADD_QRCODE, onAddQrcode);\r\n  }\r\n  export default qrcodeSaga;","C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\actions.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\actionTypes.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\reducer.js",[],"C:\\Users\\dilshana\\Documents\\dilshana\\hazelgreen\\client\\src\\store\\tariff\\saga.js",["2002"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_TARIFF  \r\n\r\n}from \"./actionTypes\"\r\n\r\nimport {\r\n    getTariffFail,\r\n    getTariffSuccess\r\n\r\n} from \"./actions\"\r\n\r\nimport {getTariff} from \"../../helpers/backend_helper\"\r\n\r\nfunction* fetchTariff() {\r\n    try {\r\n      const response = yield call(getTariff);\r\n      yield put(getTariffSuccess(response));\r\n    } catch (error) {\r\n      yield put(getTariffFail(error));\r\n    }\r\n  }\r\n\r\n  function* tariffSaga() {\r\n    yield takeEvery(GET_TARIFF, fetchTariff);\r\n  }\r\n\r\n  export default tariffSaga;",{"ruleId":"2003","severity":1,"message":"2004","line":48,"column":6,"nodeType":"2005","endLine":48,"endColumn":8,"suggestions":"2006"},{"ruleId":"2007","severity":1,"message":"2008","line":44,"column":9,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":19},{"ruleId":"2011","severity":1,"message":"2012","line":18,"column":19,"nodeType":"2013","messageId":"2014","endLine":22,"endColumn":20,"fix":"2015"},{"ruleId":"2003","severity":1,"message":"2016","line":67,"column":5,"nodeType":"2005","endLine":67,"endColumn":7,"suggestions":"2017"},{"ruleId":"2018","severity":1,"message":"2019","line":115,"column":9,"nodeType":"2009","messageId":"2020","endLine":115,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2021","line":193,"column":12,"nodeType":"2009","messageId":"2010","endLine":193,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2022","line":202,"column":9,"nodeType":"2009","messageId":"2010","endLine":202,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2023","line":9,"column":8,"nodeType":"2009","messageId":"2010","endLine":9,"endColumn":18},{"ruleId":"2003","severity":1,"message":"2024","line":74,"column":6,"nodeType":"2005","endLine":74,"endColumn":8,"suggestions":"2025"},{"ruleId":"2026","severity":1,"message":"2027","line":77,"column":21,"nodeType":"2028","messageId":"2029","endLine":77,"endColumn":35,"fix":"2030"},{"ruleId":"2026","severity":1,"message":"2027","line":84,"column":23,"nodeType":"2028","messageId":"2029","endLine":84,"endColumn":42,"fix":"2031"},{"ruleId":"2003","severity":1,"message":"2024","line":92,"column":6,"nodeType":"2005","endLine":92,"endColumn":23,"suggestions":"2032"},{"ruleId":"2003","severity":1,"message":"2033","line":103,"column":6,"nodeType":"2005","endLine":103,"endColumn":23,"suggestions":"2034"},{"ruleId":"2003","severity":1,"message":"2033","line":112,"column":6,"nodeType":"2005","endLine":112,"endColumn":26,"suggestions":"2035"},{"ruleId":"2003","severity":1,"message":"2033","line":123,"column":6,"nodeType":"2005","endLine":123,"endColumn":26,"suggestions":"2036"},{"ruleId":"2037","severity":1,"message":"2038","line":160,"column":29,"nodeType":"2039","messageId":"2040","endLine":160,"endColumn":31},{"ruleId":"2003","severity":1,"message":"2041","line":201,"column":6,"nodeType":"2005","endLine":201,"endColumn":13,"suggestions":"2042"},{"ruleId":"2043","severity":1,"message":"2044","line":355,"column":33,"nodeType":"2045","messageId":"2046","endLine":355,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2047","line":12,"column":8,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2048","line":13,"column":8,"nodeType":"2009","messageId":"2010","endLine":13,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2049","line":14,"column":8,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2050","line":15,"column":8,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":25},{"ruleId":"2051","severity":1,"message":"2052","line":10,"column":22,"nodeType":"2028","messageId":"2053","endLine":10,"endColumn":35,"fix":"2054"},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2043","severity":1,"message":"2056","line":133,"column":34,"nodeType":"2045","messageId":"2046","endLine":133,"endColumn":36},{"ruleId":"2057","severity":1,"message":"2058","line":139,"column":18,"nodeType":"2059","messageId":"2046","endLine":139,"endColumn":35},{"ruleId":"2043","severity":1,"message":"2044","line":167,"column":34,"nodeType":"2045","messageId":"2046","endLine":167,"endColumn":36},{"ruleId":"2057","severity":1,"message":"2060","line":177,"column":21,"nodeType":"2059","messageId":"2046","endLine":177,"endColumn":38},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2061","line":2,"column":10,"nodeType":"2009","messageId":"2010","endLine":2,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2062","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2063","line":4,"column":8,"nodeType":"2009","messageId":"2010","endLine":4,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2064","line":19,"column":3,"nodeType":"2009","messageId":"2010","endLine":19,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2065","line":20,"column":3,"nodeType":"2009","messageId":"2010","endLine":20,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2066","line":23,"column":3,"nodeType":"2009","messageId":"2010","endLine":23,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2067","line":26,"column":18,"nodeType":"2009","messageId":"2010","endLine":26,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2068","line":9,"column":8,"nodeType":"2009","messageId":"2010","endLine":9,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2065","line":19,"column":3,"nodeType":"2009","messageId":"2010","endLine":19,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2066","line":22,"column":3,"nodeType":"2009","messageId":"2010","endLine":22,"endColumn":13},{"ruleId":"2057","severity":1,"message":"2069","line":138,"column":9,"nodeType":"2059","messageId":"2046","endLine":138,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2070","line":2,"column":8,"nodeType":"2009","messageId":"2010","endLine":2,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2071","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2072","line":6,"column":8,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2073","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2064","line":21,"column":3,"nodeType":"2009","messageId":"2010","endLine":21,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2065","line":22,"column":3,"nodeType":"2009","messageId":"2010","endLine":22,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2070","line":2,"column":8,"nodeType":"2009","messageId":"2010","endLine":2,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2071","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2072","line":6,"column":8,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2073","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2064","line":21,"column":3,"nodeType":"2009","messageId":"2010","endLine":21,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2065","line":22,"column":3,"nodeType":"2009","messageId":"2010","endLine":22,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2062","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2063","line":4,"column":8,"nodeType":"2009","messageId":"2010","endLine":4,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2068","line":13,"column":8,"nodeType":"2009","messageId":"2010","endLine":13,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2065","line":23,"column":3,"nodeType":"2009","messageId":"2010","endLine":23,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2066","line":26,"column":3,"nodeType":"2009","messageId":"2010","endLine":26,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2067","line":29,"column":18,"nodeType":"2009","messageId":"2010","endLine":29,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2074","line":1,"column":8,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2075","line":2,"column":17,"nodeType":"2009","messageId":"2010","endLine":2,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2076","line":3,"column":10,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2023","line":5,"column":8,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2077","line":10,"column":8,"nodeType":"2009","messageId":"2010","endLine":10,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2078","line":12,"column":10,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2079","line":17,"column":10,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2080","line":24,"column":10,"nodeType":"2009","messageId":"2010","endLine":24,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2081","line":24,"column":18,"nodeType":"2009","messageId":"2010","endLine":24,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2078","line":14,"column":22,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2051","severity":1,"message":"2082","line":19,"column":33,"nodeType":"2028","messageId":"2053","endLine":19,"endColumn":54,"fix":"2083"},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2084","line":1,"column":27,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":30},{"ruleId":"2007","severity":1,"message":"2085","line":1,"column":37,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2086","line":5,"column":10,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2087","line":5,"column":26,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":38},{"ruleId":"2007","severity":1,"message":"2088","line":10,"column":3,"nodeType":"2009","messageId":"2010","endLine":10,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2089","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2090","line":14,"column":7,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2084","line":1,"column":27,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":30},{"ruleId":"2007","severity":1,"message":"2085","line":1,"column":37,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2091","line":5,"column":10,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2092","line":5,"column":37,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":60},{"ruleId":"2007","severity":1,"message":"2093","line":10,"column":3,"nodeType":"2009","messageId":"2010","endLine":10,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2094","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2090","line":14,"column":7,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2095","line":31,"column":11,"nodeType":"2009","messageId":"2010","endLine":31,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2084","line":1,"column":27,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":30},{"ruleId":"2007","severity":1,"message":"2085","line":1,"column":37,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2096","line":5,"column":10,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2097","line":5,"column":34,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":52},{"ruleId":"2007","severity":1,"message":"2098","line":10,"column":3,"nodeType":"2009","messageId":"2010","endLine":10,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2099","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2090","line":15,"column":7,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":22},{"ruleId":"2043","severity":1,"message":"2056","line":103,"column":25,"nodeType":"2045","messageId":"2046","endLine":103,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2100","line":109,"column":9,"nodeType":"2059","messageId":"2046","endLine":109,"endColumn":26},{"ruleId":"2043","severity":1,"message":"2044","line":137,"column":22,"nodeType":"2045","messageId":"2046","endLine":137,"endColumn":24},{"ruleId":"2057","severity":1,"message":"2101","line":147,"column":9,"nodeType":"2059","messageId":"2046","endLine":147,"endColumn":26},{"ruleId":"2043","severity":1,"message":"2056","line":103,"column":27,"nodeType":"2045","messageId":"2046","endLine":103,"endColumn":29},{"ruleId":"2057","severity":1,"message":"2102","line":109,"column":11,"nodeType":"2059","messageId":"2046","endLine":109,"endColumn":24},{"ruleId":"2043","severity":1,"message":"2044","line":137,"column":24,"nodeType":"2045","messageId":"2046","endLine":137,"endColumn":26},{"ruleId":"2057","severity":1,"message":"2103","line":147,"column":11,"nodeType":"2059","messageId":"2046","endLine":147,"endColumn":24},{"ruleId":"2043","severity":1,"message":"2056","line":86,"column":25,"nodeType":"2045","messageId":"2046","endLine":86,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2104","line":92,"column":9,"nodeType":"2059","messageId":"2046","endLine":92,"endColumn":21},{"ruleId":"2043","severity":1,"message":"2044","line":120,"column":22,"nodeType":"2045","messageId":"2046","endLine":120,"endColumn":24},{"ruleId":"2057","severity":1,"message":"2105","line":130,"column":9,"nodeType":"2059","messageId":"2046","endLine":130,"endColumn":21},{"ruleId":"2043","severity":1,"message":"2056","line":87,"column":25,"nodeType":"2045","messageId":"2046","endLine":87,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2106","line":93,"column":9,"nodeType":"2059","messageId":"2046","endLine":93,"endColumn":25},{"ruleId":"2043","severity":1,"message":"2044","line":121,"column":22,"nodeType":"2045","messageId":"2046","endLine":121,"endColumn":24},{"ruleId":"2057","severity":1,"message":"2107","line":131,"column":9,"nodeType":"2059","messageId":"2046","endLine":131,"endColumn":25},{"ruleId":"2043","severity":1,"message":"2056","line":83,"column":25,"nodeType":"2045","messageId":"2046","endLine":83,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2108","line":89,"column":9,"nodeType":"2059","messageId":"2046","endLine":89,"endColumn":21},{"ruleId":"2043","severity":1,"message":"2044","line":117,"column":22,"nodeType":"2045","messageId":"2046","endLine":117,"endColumn":24},{"ruleId":"2057","severity":1,"message":"2109","line":127,"column":9,"nodeType":"2059","messageId":"2046","endLine":127,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2110","line":14,"column":8,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2111","line":1,"column":8,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":13},{"ruleId":"2003","severity":1,"message":"2112","line":30,"column":6,"nodeType":"2005","endLine":30,"endColumn":8,"suggestions":"2113"},{"ruleId":"2003","severity":1,"message":"2033","line":50,"column":6,"nodeType":"2005","endLine":50,"endColumn":21,"suggestions":"2114"},{"ruleId":"2011","severity":1,"message":"2012","line":168,"column":21,"nodeType":"2013","messageId":"2014","endLine":168,"endColumn":71,"fix":"2115"},{"ruleId":"2007","severity":1,"message":"2116","line":31,"column":10,"nodeType":"2009","messageId":"2010","endLine":31,"endColumn":16},{"ruleId":"2011","severity":1,"message":"2012","line":140,"column":23,"nodeType":"2013","messageId":"2014","endLine":144,"endColumn":24,"fix":"2117"},{"ruleId":"2011","severity":1,"message":"2012","line":121,"column":21,"nodeType":"2013","messageId":"2014","endLine":121,"endColumn":71,"fix":"2118"},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2143"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2144"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2145"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2146"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2147"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2149"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2150"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2151"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2152"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2153"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2154"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2155"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2156"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2157"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2158"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":13,"column":3,"nodeType":"2009","messageId":"2010","endLine":13,"endColumn":8},{"ruleId":"2007","severity":1,"message":"2121","line":16,"column":8,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":20,"column":3,"nodeType":"2009","messageId":"2010","endLine":20,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":21,"column":3,"nodeType":"2009","messageId":"2010","endLine":21,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":26,"column":3,"nodeType":"2009","messageId":"2010","endLine":26,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":45,"column":10,"nodeType":"2009","messageId":"2010","endLine":45,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":45,"column":22,"nodeType":"2009","messageId":"2010","endLine":45,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":46,"column":10,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":47,"column":10,"nodeType":"2009","messageId":"2010","endLine":47,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":48,"column":10,"nodeType":"2009","messageId":"2010","endLine":48,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":48,"column":30,"nodeType":"2009","messageId":"2010","endLine":48,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":49,"column":10,"nodeType":"2009","messageId":"2010","endLine":49,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":50,"column":25,"nodeType":"2009","messageId":"2010","endLine":50,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":51,"column":10,"nodeType":"2009","messageId":"2010","endLine":51,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2138","line":53,"column":10,"nodeType":"2009","messageId":"2010","endLine":53,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":61,"column":5,"nodeType":"2009","messageId":"2010","endLine":61,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":72,"column":9,"nodeType":"2009","messageId":"2010","endLine":72,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":75,"column":9,"nodeType":"2009","messageId":"2010","endLine":75,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":78,"column":9,"nodeType":"2009","messageId":"2010","endLine":78,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":89,"column":6,"nodeType":"2005","endLine":89,"endColumn":8,"suggestions":"2159"},{"ruleId":"2003","severity":1,"message":"2024","line":95,"column":6,"nodeType":"2005","endLine":95,"endColumn":23,"suggestions":"2160"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":23,"suggestions":"2161"},{"ruleId":"2003","severity":1,"message":"2033","line":116,"column":6,"nodeType":"2005","endLine":116,"endColumn":26,"suggestions":"2162"},{"ruleId":"2003","severity":1,"message":"2033","line":127,"column":6,"nodeType":"2005","endLine":127,"endColumn":26,"suggestions":"2163"},{"ruleId":"2007","severity":1,"message":"2148","line":173,"column":9,"nodeType":"2009","messageId":"2010","endLine":173,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":175,"column":29,"nodeType":"2039","messageId":"2040","endLine":175,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2074","line":5,"column":8,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2120","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":8},{"ruleId":"2007","severity":1,"message":"2164","line":15,"column":3,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":8},{"ruleId":"2007","severity":1,"message":"2165","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":8},{"ruleId":"2007","severity":1,"message":"2122","line":23,"column":3,"nodeType":"2009","messageId":"2010","endLine":23,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":24,"column":3,"nodeType":"2009","messageId":"2010","endLine":24,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":29,"column":3,"nodeType":"2009","messageId":"2010","endLine":29,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2166","line":53,"column":26,"nodeType":"2009","messageId":"2010","endLine":53,"endColumn":43},{"ruleId":"2007","severity":1,"message":"2167","line":56,"column":27,"nodeType":"2009","messageId":"2010","endLine":56,"endColumn":45},{"ruleId":"2007","severity":1,"message":"2127","line":57,"column":10,"nodeType":"2009","messageId":"2010","endLine":57,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2168","line":57,"column":26,"nodeType":"2009","messageId":"2010","endLine":57,"endColumn":43},{"ruleId":"2007","severity":1,"message":"2134","line":62,"column":10,"nodeType":"2009","messageId":"2010","endLine":62,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2136","line":64,"column":10,"nodeType":"2009","messageId":"2010","endLine":64,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":64,"column":23,"nodeType":"2009","messageId":"2010","endLine":64,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":72,"column":10,"nodeType":"2009","messageId":"2010","endLine":72,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2169","line":79,"column":5,"nodeType":"2009","messageId":"2010","endLine":79,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2139","line":80,"column":5,"nodeType":"2009","messageId":"2010","endLine":80,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2170","line":81,"column":5,"nodeType":"2009","messageId":"2010","endLine":81,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2171","line":82,"column":5,"nodeType":"2009","messageId":"2010","endLine":82,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2172","line":83,"column":5,"nodeType":"2009","messageId":"2010","endLine":83,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2140","line":102,"column":9,"nodeType":"2009","messageId":"2010","endLine":102,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":105,"column":9,"nodeType":"2009","messageId":"2010","endLine":105,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":108,"column":9,"nodeType":"2009","messageId":"2010","endLine":108,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":122,"column":6,"nodeType":"2005","endLine":122,"endColumn":8,"suggestions":"2173"},{"ruleId":"2003","severity":1,"message":"2024","line":128,"column":6,"nodeType":"2005","endLine":128,"endColumn":23,"suggestions":"2174"},{"ruleId":"2003","severity":1,"message":"2175","line":139,"column":6,"nodeType":"2005","endLine":139,"endColumn":28,"suggestions":"2176"},{"ruleId":"2003","severity":1,"message":"2175","line":149,"column":6,"nodeType":"2005","endLine":149,"endColumn":31,"suggestions":"2177"},{"ruleId":"2003","severity":1,"message":"2033","line":160,"column":6,"nodeType":"2005","endLine":160,"endColumn":31,"suggestions":"2178"},{"ruleId":"2037","severity":1,"message":"2038","line":236,"column":34,"nodeType":"2039","messageId":"2040","endLine":236,"endColumn":36},{"ruleId":"2179","severity":1,"message":"2180","line":239,"column":11,"nodeType":"2013","endLine":239,"endColumn":88},{"ruleId":"2003","severity":1,"message":"2181","line":317,"column":6,"nodeType":"2005","endLine":317,"endColumn":18,"suggestions":"2182"},{"ruleId":"2179","severity":1,"message":"2180","line":803,"column":29,"nodeType":"2013","endLine":803,"endColumn":76},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2183"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2184"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2185"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2186"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2187"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2188"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2189"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2190"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2191"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2192"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2193","line":6,"column":36,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2194"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2195"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2196"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2197"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2198"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2199"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2200"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2201"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2202"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2203"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2193","line":6,"column":36,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2204"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2205"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2206"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2207"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2208"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2193","line":6,"column":36,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2209"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2210"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2211"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2212"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2213"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2214"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2215"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2216"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2217"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2218"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2219"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2220"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2221"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2222"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2223"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2224"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2225"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2226"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2227"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2228"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2229"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2230"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2231"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2232"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2233"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2234"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2235"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2236"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2237"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2238"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2193","line":6,"column":36,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":25,"column":10,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":25,"column":18,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2136","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":42,"column":23,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2239"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2240"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2241"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2242"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2243"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2244","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2122","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2126","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":36,"column":22,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":39,"column":10,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":39,"column":30,"nodeType":"2009","messageId":"2010","endLine":39,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2135","line":41,"column":25,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":41},{"ruleId":"2007","severity":1,"message":"2138","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2139","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":63,"column":9,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":66,"column":9,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":69,"column":9,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":6,"nodeType":"2005","endLine":80,"endColumn":8,"suggestions":"2245"},{"ruleId":"2003","severity":1,"message":"2024","line":86,"column":6,"nodeType":"2005","endLine":86,"endColumn":23,"suggestions":"2246"},{"ruleId":"2003","severity":1,"message":"2033","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":23,"suggestions":"2247"},{"ruleId":"2003","severity":1,"message":"2033","line":107,"column":6,"nodeType":"2005","endLine":107,"endColumn":26,"suggestions":"2248"},{"ruleId":"2003","severity":1,"message":"2033","line":118,"column":6,"nodeType":"2005","endLine":118,"endColumn":26,"suggestions":"2249"},{"ruleId":"2007","severity":1,"message":"2148","line":153,"column":9,"nodeType":"2009","messageId":"2010","endLine":153,"endColumn":17},{"ruleId":"2037","severity":1,"message":"2038","line":155,"column":29,"nodeType":"2039","messageId":"2040","endLine":155,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2250","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":11},{"ruleId":"2007","severity":1,"message":"2122","line":13,"column":3,"nodeType":"2009","messageId":"2010","endLine":13,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2251","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2124","line":19,"column":3,"nodeType":"2009","messageId":"2010","endLine":19,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2253","line":23,"column":3,"nodeType":"2009","messageId":"2010","endLine":23,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2254","line":24,"column":3,"nodeType":"2009","messageId":"2010","endLine":24,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2126","line":40,"column":10,"nodeType":"2009","messageId":"2010","endLine":40,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2130","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":45,"column":10,"nodeType":"2009","messageId":"2010","endLine":45,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":46,"column":10,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":46,"column":30,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":47,"column":10,"nodeType":"2009","messageId":"2010","endLine":47,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2136","line":49,"column":10,"nodeType":"2009","messageId":"2010","endLine":49,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2255","line":50,"column":17,"nodeType":"2009","messageId":"2010","endLine":50,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2256","line":51,"column":10,"nodeType":"2009","messageId":"2010","endLine":51,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2257","line":52,"column":9,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2258","line":52,"column":15,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2259","line":53,"column":9,"nodeType":"2009","messageId":"2010","endLine":53,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2260","line":53,"column":13,"nodeType":"2009","messageId":"2010","endLine":53,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2138","line":55,"column":10,"nodeType":"2009","messageId":"2010","endLine":55,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2169","line":63,"column":5,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2139","line":64,"column":5,"nodeType":"2009","messageId":"2010","endLine":64,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2261","line":76,"column":16,"nodeType":"2009","messageId":"2010","endLine":76,"endColumn":22},{"ruleId":"2003","severity":1,"message":"2024","line":85,"column":6,"nodeType":"2005","endLine":85,"endColumn":8,"suggestions":"2262"},{"ruleId":"2003","severity":1,"message":"2024","line":91,"column":6,"nodeType":"2005","endLine":91,"endColumn":23,"suggestions":"2263"},{"ruleId":"2003","severity":1,"message":"2264","line":104,"column":6,"nodeType":"2005","endLine":104,"endColumn":19,"suggestions":"2265"},{"ruleId":"2003","severity":1,"message":"2033","line":113,"column":6,"nodeType":"2005","endLine":113,"endColumn":26,"suggestions":"2266"},{"ruleId":"2003","severity":1,"message":"2033","line":124,"column":6,"nodeType":"2005","endLine":124,"endColumn":26,"suggestions":"2267"},{"ruleId":"2037","severity":1,"message":"2038","line":162,"column":32,"nodeType":"2039","messageId":"2040","endLine":162,"endColumn":34},{"ruleId":"2007","severity":1,"message":"2119","line":3,"column":8,"nodeType":"2009","messageId":"2010","endLine":3,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2121","line":7,"column":8,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":18},{"ruleId":"2007","severity":1,"message":"2072","line":16,"column":8,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2268","line":17,"column":8,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2269","line":18,"column":8,"nodeType":"2009","messageId":"2010","endLine":18,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2270","line":19,"column":8,"nodeType":"2009","messageId":"2010","endLine":19,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2122","line":31,"column":3,"nodeType":"2009","messageId":"2010","endLine":31,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":32,"column":3,"nodeType":"2009","messageId":"2010","endLine":32,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2124","line":37,"column":3,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2125","line":46,"column":10,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2067","line":46,"column":18,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2126","line":54,"column":10,"nodeType":"2009","messageId":"2010","endLine":54,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2127","line":56,"column":10,"nodeType":"2009","messageId":"2010","endLine":56,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":57,"column":10,"nodeType":"2009","messageId":"2010","endLine":57,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":57,"column":22,"nodeType":"2009","messageId":"2010","endLine":57,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2130","line":58,"column":10,"nodeType":"2009","messageId":"2010","endLine":58,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2131","line":59,"column":10,"nodeType":"2009","messageId":"2010","endLine":59,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2132","line":60,"column":10,"nodeType":"2009","messageId":"2010","endLine":60,"endColumn":28},{"ruleId":"2007","severity":1,"message":"2133","line":60,"column":30,"nodeType":"2009","messageId":"2010","endLine":60,"endColumn":51},{"ruleId":"2007","severity":1,"message":"2134","line":61,"column":10,"nodeType":"2009","messageId":"2010","endLine":61,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2136","line":63,"column":10,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":63,"column":23,"nodeType":"2009","messageId":"2010","endLine":63,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":66,"column":10,"nodeType":"2009","messageId":"2010","endLine":66,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2169","line":73,"column":5,"nodeType":"2009","messageId":"2010","endLine":73,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2139","line":74,"column":5,"nodeType":"2009","messageId":"2010","endLine":74,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2140","line":85,"column":9,"nodeType":"2009","messageId":"2010","endLine":85,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":88,"column":9,"nodeType":"2009","messageId":"2010","endLine":88,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2142","line":91,"column":9,"nodeType":"2009","messageId":"2010","endLine":91,"endColumn":24},{"ruleId":"2003","severity":1,"message":"2024","line":105,"column":6,"nodeType":"2005","endLine":105,"endColumn":8,"suggestions":"2271"},{"ruleId":"2003","severity":1,"message":"2024","line":111,"column":6,"nodeType":"2005","endLine":111,"endColumn":23,"suggestions":"2272"},{"ruleId":"2003","severity":1,"message":"2033","line":123,"column":6,"nodeType":"2005","endLine":123,"endColumn":23,"suggestions":"2273"},{"ruleId":"2003","severity":1,"message":"2033","line":132,"column":6,"nodeType":"2005","endLine":132,"endColumn":26,"suggestions":"2274"},{"ruleId":"2003","severity":1,"message":"2033","line":143,"column":6,"nodeType":"2005","endLine":143,"endColumn":26,"suggestions":"2275"},{"ruleId":"2276","severity":1,"message":"2277","line":192,"column":5,"nodeType":"2278","messageId":"2279","endLine":192,"endColumn":17,"fix":"2280"},{"ruleId":"2037","severity":1,"message":"2038","line":192,"column":32,"nodeType":"2039","messageId":"2040","endLine":192,"endColumn":34},{"ruleId":"2007","severity":1,"message":"2250","line":18,"column":3,"nodeType":"2009","messageId":"2010","endLine":18,"endColumn":11},{"ruleId":"2007","severity":1,"message":"2251","line":22,"column":3,"nodeType":"2009","messageId":"2010","endLine":22,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":23,"column":3,"nodeType":"2009","messageId":"2010","endLine":23,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2127","line":52,"column":10,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2169","line":67,"column":5,"nodeType":"2009","messageId":"2010","endLine":67,"endColumn":10},{"ruleId":"2003","severity":1,"message":"2024","line":135,"column":6,"nodeType":"2005","endLine":135,"endColumn":8,"suggestions":"2281"},{"ruleId":"2003","severity":1,"message":"2024","line":141,"column":6,"nodeType":"2005","endLine":141,"endColumn":23,"suggestions":"2282"},{"ruleId":"2003","severity":1,"message":"2033","line":162,"column":6,"nodeType":"2005","endLine":162,"endColumn":23,"suggestions":"2283"},{"ruleId":"2003","severity":1,"message":"2033","line":171,"column":6,"nodeType":"2005","endLine":171,"endColumn":26,"suggestions":"2284"},{"ruleId":"2003","severity":1,"message":"2033","line":182,"column":6,"nodeType":"2005","endLine":182,"endColumn":26,"suggestions":"2285"},{"ruleId":"2037","severity":1,"message":"2038","line":280,"column":33,"nodeType":"2039","messageId":"2040","endLine":280,"endColumn":35},{"ruleId":"2003","severity":1,"message":"2041","line":336,"column":6,"nodeType":"2005","endLine":336,"endColumn":17,"suggestions":"2286"},{"ruleId":"2007","severity":1,"message":"2287","line":570,"column":9,"nodeType":"2009","messageId":"2010","endLine":570,"endColumn":29},{"ruleId":"2007","severity":1,"message":"2288","line":674,"column":12,"nodeType":"2009","messageId":"2010","endLine":674,"endColumn":32},{"ruleId":"2043","severity":1,"message":"2044","line":687,"column":33,"nodeType":"2045","messageId":"2046","endLine":687,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2165","line":6,"column":58,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":63},{"ruleId":"2007","severity":1,"message":"2250","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":11},{"ruleId":"2007","severity":1,"message":"2122","line":13,"column":3,"nodeType":"2009","messageId":"2010","endLine":13,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2123","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2251","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2289","line":18,"column":3,"nodeType":"2009","messageId":"2010","endLine":18,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2124","line":19,"column":3,"nodeType":"2009","messageId":"2010","endLine":19,"endColumn":13},{"ruleId":"2007","severity":1,"message":"2290","line":22,"column":3,"nodeType":"2009","messageId":"2010","endLine":22,"endColumn":11},{"ruleId":"2007","severity":1,"message":"2291","line":25,"column":3,"nodeType":"2009","messageId":"2010","endLine":25,"endColumn":11},{"ruleId":"2007","severity":1,"message":"2126","line":43,"column":10,"nodeType":"2009","messageId":"2010","endLine":43,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2292","line":44,"column":10,"nodeType":"2009","messageId":"2010","endLine":44,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2127","line":45,"column":10,"nodeType":"2009","messageId":"2010","endLine":45,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2128","line":46,"column":10,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2129","line":46,"column":22,"nodeType":"2009","messageId":"2010","endLine":46,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2134","line":50,"column":10,"nodeType":"2009","messageId":"2010","endLine":50,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2136","line":52,"column":10,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2137","line":52,"column":23,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2138","line":60,"column":10,"nodeType":"2009","messageId":"2010","endLine":60,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2169","line":67,"column":5,"nodeType":"2009","messageId":"2010","endLine":67,"endColumn":10},{"ruleId":"2007","severity":1,"message":"2139","line":68,"column":5,"nodeType":"2009","messageId":"2010","endLine":68,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2170","line":69,"column":5,"nodeType":"2009","messageId":"2010","endLine":69,"endColumn":20},{"ruleId":"2007","severity":1,"message":"2171","line":70,"column":5,"nodeType":"2009","messageId":"2010","endLine":70,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2172","line":71,"column":5,"nodeType":"2009","messageId":"2010","endLine":71,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2140","line":86,"column":9,"nodeType":"2009","messageId":"2010","endLine":86,"endColumn":26},{"ruleId":"2007","severity":1,"message":"2141","line":89,"column":9,"nodeType":"2009","messageId":"2010","endLine":89,"endColumn":25},{"ruleId":"2003","severity":1,"message":"2024","line":108,"column":8,"nodeType":"2005","endLine":108,"endColumn":10,"suggestions":"2293"},{"ruleId":"2003","severity":1,"message":"2175","line":120,"column":8,"nodeType":"2005","endLine":120,"endColumn":26,"suggestions":"2294"},{"ruleId":"2003","severity":1,"message":"2175","line":129,"column":8,"nodeType":"2005","endLine":129,"endColumn":29,"suggestions":"2295"},{"ruleId":"2003","severity":1,"message":"2175","line":141,"column":8,"nodeType":"2005","endLine":141,"endColumn":29,"suggestions":"2296"},{"ruleId":"2007","severity":1,"message":"2297","line":154,"column":5,"nodeType":"2009","messageId":"2010","endLine":154,"endColumn":31},{"ruleId":"2037","severity":1,"message":"2038","line":199,"column":30,"nodeType":"2039","messageId":"2040","endLine":199,"endColumn":32},{"ruleId":"2276","severity":1,"message":"2277","line":373,"column":7,"nodeType":"2278","messageId":"2279","endLine":373,"endColumn":19,"fix":"2298"},{"ruleId":"2007","severity":1,"message":"2299","line":6,"column":44,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":49},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2244","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2251","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2300","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":29},{"ruleId":"2007","severity":1,"message":"2301","line":17,"column":3,"nodeType":"2009","messageId":"2010","endLine":17,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2289","line":18,"column":3,"nodeType":"2009","messageId":"2010","endLine":18,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2302","line":21,"column":3,"nodeType":"2009","messageId":"2010","endLine":21,"endColumn":12},{"ruleId":"2007","severity":1,"message":"2126","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2292","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2127","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2134","line":43,"column":10,"nodeType":"2009","messageId":"2010","endLine":43,"endColumn":19},{"ruleId":"2003","severity":1,"message":"2024","line":80,"column":7,"nodeType":"2005","endLine":80,"endColumn":9,"suggestions":"2303"},{"ruleId":"2003","severity":1,"message":"2175","line":93,"column":6,"nodeType":"2005","endLine":93,"endColumn":28,"suggestions":"2304"},{"ruleId":"2003","severity":1,"message":"2175","line":103,"column":6,"nodeType":"2005","endLine":103,"endColumn":31,"suggestions":"2305"},{"ruleId":"2003","severity":1,"message":"2175","line":115,"column":6,"nodeType":"2005","endLine":115,"endColumn":31,"suggestions":"2306"},{"ruleId":"2007","severity":1,"message":"2297","line":131,"column":7,"nodeType":"2009","messageId":"2010","endLine":131,"endColumn":33},{"ruleId":"2037","severity":1,"message":"2038","line":139,"column":35,"nodeType":"2039","messageId":"2040","endLine":139,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2288","line":312,"column":12,"nodeType":"2009","messageId":"2010","endLine":312,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2307","line":330,"column":9,"nodeType":"2009","messageId":"2010","endLine":330,"endColumn":34},{"ruleId":"2043","severity":1,"message":"2044","line":331,"column":33,"nodeType":"2045","messageId":"2046","endLine":331,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2308","line":342,"column":7,"nodeType":"2009","messageId":"2010","endLine":342,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2244","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2251","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":15,"column":3,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2289","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2126","line":31,"column":10,"nodeType":"2009","messageId":"2010","endLine":31,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2292","line":32,"column":10,"nodeType":"2009","messageId":"2010","endLine":32,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2127","line":33,"column":10,"nodeType":"2009","messageId":"2010","endLine":33,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2134","line":38,"column":10,"nodeType":"2009","messageId":"2010","endLine":38,"endColumn":19},{"ruleId":"2003","severity":1,"message":"2024","line":63,"column":6,"nodeType":"2005","endLine":63,"endColumn":8,"suggestions":"2309"},{"ruleId":"2003","severity":1,"message":"2175","line":80,"column":5,"nodeType":"2005","endLine":80,"endColumn":26,"suggestions":"2310"},{"ruleId":"2003","severity":1,"message":"2175","line":91,"column":6,"nodeType":"2005","endLine":91,"endColumn":30,"suggestions":"2311"},{"ruleId":"2003","severity":1,"message":"2175","line":103,"column":6,"nodeType":"2005","endLine":103,"endColumn":30,"suggestions":"2312"},{"ruleId":"2007","severity":1,"message":"2313","line":115,"column":7,"nodeType":"2009","messageId":"2010","endLine":115,"endColumn":32},{"ruleId":"2037","severity":1,"message":"2038","line":123,"column":33,"nodeType":"2039","messageId":"2040","endLine":123,"endColumn":35},{"ruleId":"2003","severity":1,"message":"2314","line":155,"column":6,"nodeType":"2005","endLine":155,"endColumn":17,"suggestions":"2315"},{"ruleId":"2007","severity":1,"message":"2316","line":215,"column":12,"nodeType":"2009","messageId":"2010","endLine":215,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2317","line":224,"column":12,"nodeType":"2009","messageId":"2010","endLine":224,"endColumn":33},{"ruleId":"2007","severity":1,"message":"2318","line":232,"column":12,"nodeType":"2009","messageId":"2010","endLine":232,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2288","line":242,"column":12,"nodeType":"2009","messageId":"2010","endLine":242,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2307","line":256,"column":9,"nodeType":"2009","messageId":"2010","endLine":256,"endColumn":34},{"ruleId":"2043","severity":1,"message":"2044","line":257,"column":33,"nodeType":"2045","messageId":"2046","endLine":257,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2308","line":268,"column":7,"nodeType":"2009","messageId":"2010","endLine":268,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2319","line":5,"column":18,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2299","line":6,"column":44,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":49},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2320","line":6,"column":74,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":82},{"ruleId":"2007","severity":1,"message":"2244","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2251","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":15,"column":3,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2289","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2321","line":18,"column":3,"nodeType":"2009","messageId":"2010","endLine":18,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2322","line":21,"column":3,"nodeType":"2009","messageId":"2010","endLine":21,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2126","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2292","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2127","line":37,"column":10,"nodeType":"2009","messageId":"2010","endLine":37,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2134","line":42,"column":10,"nodeType":"2009","messageId":"2010","endLine":42,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2323","line":47,"column":9,"nodeType":"2009","messageId":"2010","endLine":47,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2324","line":47,"column":23,"nodeType":"2009","messageId":"2010","endLine":47,"endColumn":39},{"ruleId":"2003","severity":1,"message":"2024","line":74,"column":6,"nodeType":"2005","endLine":74,"endColumn":8,"suggestions":"2325"},{"ruleId":"2003","severity":1,"message":"2175","line":88,"column":6,"nodeType":"2005","endLine":88,"endColumn":23,"suggestions":"2326"},{"ruleId":"2003","severity":1,"message":"2175","line":98,"column":6,"nodeType":"2005","endLine":98,"endColumn":26,"suggestions":"2327"},{"ruleId":"2003","severity":1,"message":"2175","line":110,"column":6,"nodeType":"2005","endLine":110,"endColumn":26,"suggestions":"2328"},{"ruleId":"2007","severity":1,"message":"2329","line":124,"column":7,"nodeType":"2009","messageId":"2010","endLine":124,"endColumn":28},{"ruleId":"2037","severity":1,"message":"2038","line":132,"column":29,"nodeType":"2039","messageId":"2040","endLine":132,"endColumn":31},{"ruleId":"2007","severity":1,"message":"2330","line":257,"column":12,"nodeType":"2009","messageId":"2010","endLine":257,"endColumn":39},{"ruleId":"2007","severity":1,"message":"2317","line":266,"column":12,"nodeType":"2009","messageId":"2010","endLine":266,"endColumn":33},{"ruleId":"2007","severity":1,"message":"2318","line":274,"column":12,"nodeType":"2009","messageId":"2010","endLine":274,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2288","line":283,"column":12,"nodeType":"2009","messageId":"2010","endLine":283,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2307","line":299,"column":9,"nodeType":"2009","messageId":"2010","endLine":299,"endColumn":34},{"ruleId":"2043","severity":1,"message":"2044","line":300,"column":33,"nodeType":"2045","messageId":"2046","endLine":300,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2308","line":311,"column":7,"nodeType":"2009","messageId":"2010","endLine":311,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2120","line":6,"column":51,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":56},{"ruleId":"2007","severity":1,"message":"2244","line":8,"column":8,"nodeType":"2009","messageId":"2010","endLine":8,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2331","line":10,"column":3,"nodeType":"2009","messageId":"2010","endLine":10,"endColumn":15},{"ruleId":"2007","severity":1,"message":"2332","line":11,"column":3,"nodeType":"2009","messageId":"2010","endLine":11,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2333","line":12,"column":3,"nodeType":"2009","messageId":"2010","endLine":12,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2251","line":14,"column":3,"nodeType":"2009","messageId":"2010","endLine":14,"endColumn":23},{"ruleId":"2007","severity":1,"message":"2252","line":15,"column":3,"nodeType":"2009","messageId":"2010","endLine":15,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2289","line":16,"column":3,"nodeType":"2009","messageId":"2010","endLine":16,"endColumn":21},{"ruleId":"2007","severity":1,"message":"2126","line":34,"column":10,"nodeType":"2009","messageId":"2010","endLine":34,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2292","line":35,"column":10,"nodeType":"2009","messageId":"2010","endLine":35,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2127","line":36,"column":10,"nodeType":"2009","messageId":"2010","endLine":36,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2134","line":41,"column":10,"nodeType":"2009","messageId":"2010","endLine":41,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2334","line":51,"column":5,"nodeType":"2009","messageId":"2010","endLine":51,"endColumn":14},{"ruleId":"2007","severity":1,"message":"2335","line":52,"column":5,"nodeType":"2009","messageId":"2010","endLine":52,"endColumn":19},{"ruleId":"2007","severity":1,"message":"2336","line":53,"column":5,"nodeType":"2009","messageId":"2010","endLine":53,"endColumn":24},{"ruleId":"2007","severity":1,"message":"2337","line":54,"column":5,"nodeType":"2009","messageId":"2010","endLine":54,"endColumn":27},{"ruleId":"2007","severity":1,"message":"2338","line":55,"column":5,"nodeType":"2009","messageId":"2010","endLine":55,"endColumn":27},{"ruleId":"2003","severity":1,"message":"2024","line":75,"column":6,"nodeType":"2005","endLine":75,"endColumn":8,"suggestions":"2339"},{"ruleId":"2003","severity":1,"message":"2175","line":90,"column":5,"nodeType":"2005","endLine":90,"endColumn":26,"suggestions":"2340"},{"ruleId":"2003","severity":1,"message":"2175","line":101,"column":6,"nodeType":"2005","endLine":101,"endColumn":30,"suggestions":"2341"},{"ruleId":"2003","severity":1,"message":"2175","line":113,"column":6,"nodeType":"2005","endLine":113,"endColumn":30,"suggestions":"2342"},{"ruleId":"2007","severity":1,"message":"2343","line":125,"column":7,"nodeType":"2009","messageId":"2010","endLine":125,"endColumn":32},{"ruleId":"2037","severity":1,"message":"2038","line":133,"column":35,"nodeType":"2039","messageId":"2040","endLine":133,"endColumn":37},{"ruleId":"2007","severity":1,"message":"2316","line":223,"column":12,"nodeType":"2009","messageId":"2010","endLine":223,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2317","line":232,"column":12,"nodeType":"2009","messageId":"2010","endLine":232,"endColumn":33},{"ruleId":"2007","severity":1,"message":"2022","line":233,"column":9,"nodeType":"2009","messageId":"2010","endLine":233,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2318","line":240,"column":12,"nodeType":"2009","messageId":"2010","endLine":240,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2022","line":241,"column":9,"nodeType":"2009","messageId":"2010","endLine":241,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2288","line":250,"column":12,"nodeType":"2009","messageId":"2010","endLine":250,"endColumn":32},{"ruleId":"2007","severity":1,"message":"2307","line":264,"column":9,"nodeType":"2009","messageId":"2010","endLine":264,"endColumn":34},{"ruleId":"2043","severity":1,"message":"2044","line":265,"column":33,"nodeType":"2045","messageId":"2046","endLine":265,"endColumn":35},{"ruleId":"2007","severity":1,"message":"2308","line":276,"column":7,"nodeType":"2009","messageId":"2010","endLine":276,"endColumn":17},{"ruleId":"2007","severity":1,"message":"2344","line":5,"column":5,"nodeType":"2009","messageId":"2010","endLine":5,"endColumn":22},{"ruleId":"2007","severity":1,"message":"2345","line":6,"column":5,"nodeType":"2009","messageId":"2010","endLine":6,"endColumn":30},{"ruleId":"2007","severity":1,"message":"2346","line":7,"column":5,"nodeType":"2009","messageId":"2010","endLine":7,"endColumn":27},{"ruleId":"2043","severity":1,"message":"2056","line":94,"column":25,"nodeType":"2045","messageId":"2046","endLine":94,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2347","line":100,"column":9,"nodeType":"2059","messageId":"2046","endLine":100,"endColumn":25},{"ruleId":"2043","severity":1,"message":"2044","line":128,"column":22,"nodeType":"2045","messageId":"2046","endLine":128,"endColumn":24},{"ruleId":"2057","severity":1,"message":"2348","line":138,"column":9,"nodeType":"2059","messageId":"2046","endLine":138,"endColumn":25},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2349","line":24,"column":5,"nodeType":"2009","messageId":"2010","endLine":24,"endColumn":16},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},{"ruleId":"2007","severity":1,"message":"2055","line":1,"column":32,"nodeType":"2009","messageId":"2010","endLine":1,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.","ArrayExpression",["2350"],"no-unused-vars","'currentage' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"2351","text":"2352"},"React Hook useEffect has missing dependencies: 'fetchMasterCompanies' and 'fetchMasterLocalbodies'. Either include them or remove the dependency array.",["2353"],"no-redeclare","'url' is already defined.","redeclared","'toggleMegaMenu' is defined but never used.","'newValue' is assigned a value but never used.","'jwt_decode' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["2354"],"no-useless-computed-key","Unnecessarily computed property ['addedby'] found.","Property","unnecessarilyComputedProperty",{"range":"2355","text":"2356"},{"range":"2357","text":"2356"},["2358"],"React Hook useEffect has a missing dependency: 'error.data.message'. Either include it or remove the dependency array.",["2359"],["2360"],["2361"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'preUpdateUser'. Either include it or remove the dependency array.",["2362"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TopUser' is defined but never used.","'RecentActivity' is defined but never used.","'SocialSource' is defined but never used.","'LatestTransaction' is defined but never used.","no-useless-rename","Destructuring assignment userId unnecessarily renamed.","unnecessarilyRenamed",{"range":"2363","text":"2364"},"'takeLatest' is defined but never used.","Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'deletingWasteItem'.","ObjectExpression","Duplicate key 'updatingWasteItem'.","'MDBDataTable' is defined but never used.","'DeleteIcon' is defined but never used.","'EditIcon' is defined but never used.","'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.","'CardHeader' is defined but never used.","'AvField' is defined but never used.","'FormLabel' is defined but never used.","Duplicate key 'action'.","'OutlinedInput' is defined but never used.","'InputLabel' is defined but never used.","'ListItemText' is defined but never used.","'Checkbox' is defined but never used.","'axios' is defined but never used.","'useCallback' is defined but never used.","'sidebarItem' is defined but never used.","'MetisMenu' is defined but never used.","'Link' is defined but never used.","'DropdownMenu' is defined but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","Destructuring assignment company_id unnecessarily renamed.",{"range":"2365","text":"2366"},"'put' is defined but never used.","'call' is defined but never used.","'profileSuccess' is defined but never used.","'profileError' is defined but never used.","'postFakeProfile' is defined but never used.","'postJwtProfile' is defined but never used.","'fireBaseBackend' is assigned a value but never used.","'userForgetPasswordSuccess' is defined but never used.","'userForgetPasswordError' is defined but never used.","'postFakeForgetPwd' is defined but never used.","'postJwtForgetPwd' is defined but never used.","'response' is assigned a value but never used.","'registerUserSuccessful' is defined but never used.","'registerUserFailed' is defined but never used.","'postFakeRegister' is defined but never used.","'postJwtRegister' is defined but never used.","Duplicate key 'deletingLocalbody'.","Duplicate key 'updatingLocalbody'.","Duplicate key 'deletingGroup'.","Duplicate key 'updatingGroup'.","Duplicate key 'deletingWard'.","Duplicate key 'updatingWard'.","Duplicate key 'deletingDistrict'.","Duplicate key 'updatingDistrict'.","Duplicate key 'deletingUser'.","Duplicate key 'updatingUser'.","'LanguageDropdown' is defined but never used.","'react' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2367"],["2368"],{"range":"2369","text":"2352"},"'mobile' is assigned a value but never used.",{"range":"2370","text":"2352"},{"range":"2371","text":"2352"},"'PropTypes' is defined but never used.","'Modal' is defined but never used.","'SweetAlert' is defined but never used.","'addUser' is defined but never used.","'deleteUser' is defined but never used.","'updateUser' is defined but never used.","'AvForm' is defined but never used.","'selectedPrivilage' is assigned a value but never used.","'selectedBranch' is assigned a value but never used.","'userObject' is assigned a value but never used.","'setUserObject' is assigned a value but never used.","'userIdTobeUpdated' is assigned a value but never used.","'userIdToBeDeleted' is assigned a value but never used.","'confirmDeleteAlert' is assigned a value but never used.","'setConfirmDeleteAlert' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setUsersForTable' is assigned a value but never used.","'accountType' is assigned a value but never used.","'setAccountType' is assigned a value but never used.","'passwordObject' is assigned a value but never used.","'addingUser' is assigned a value but never used.","'privilagesOptions' is assigned a value but never used.","'companiesOptions' is assigned a value but never used.","'branchesOptions' is assigned a value but never used.",["2372"],["2373"],["2374"],["2375"],["2376"],"'userData' is assigned a value but never used.",["2377"],["2378"],["2379"],["2380"],["2381"],["2382"],["2383"],["2384"],["2385"],["2386"],["2387"],["2388"],["2389"],["2390"],["2391"],"'Table' is defined but never used.","'Input' is defined but never used.","'setUploadProgress' is assigned a value but never used.","'setSelectedCompany' is assigned a value but never used.","'setSelectedBranch' is assigned a value but never used.","'users' is assigned a value but never used.","'addUserResponse' is assigned a value but never used.","'deleteUserResponse' is assigned a value but never used.","'updateUserResponse' is assigned a value but never used.",["2392"],["2393"],"React Hook useEffect has missing dependencies: 'dispatch' and 'error.data.message'. Either include them or remove the dependency array.",["2394"],["2395"],["2396"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'API_URL' and 'preUpdateData'. Either include them or remove the dependency array.",["2397"],["2398"],["2399"],["2400"],["2401"],["2402"],["2403"],["2404"],["2405"],["2406"],["2407"],"'Button' is defined but never used.",["2408"],["2409"],["2410"],["2411"],["2412"],["2413"],["2414"],["2415"],["2416"],["2417"],["2418"],["2419"],["2420"],["2421"],["2422"],["2423"],["2424"],["2425"],["2426"],["2427"],["2428"],["2429"],["2430"],["2431"],["2432"],["2433"],["2434"],["2435"],["2436"],["2437"],["2438"],["2439"],["2440"],["2441"],["2442"],["2443"],["2444"],["2445"],["2446"],["2447"],["2448"],["2449"],["2450"],["2451"],["2452"],["2453"],["2454"],["2455"],["2456"],["2457"],"'Select' is defined but never used.",["2458"],["2459"],["2460"],["2461"],["2462"],"'getUsers' is defined but never used.","'getPrivilagesOptions' is defined but never used.","'getCompaniesOptions' is defined but never used.","'getQrcodesSuccess' is defined but never used.","'getQrcodeFail' is defined but never used.","'setImage' is assigned a value but never used.","'localbody' is assigned a value but never used.","'start' is assigned a value but never used.","'setStart' is assigned a value but never used.","'end' is assigned a value but never used.","'setEnd' is assigned a value but never used.","'adding' is assigned a value but never used.",["2463"],["2464"],"React Hook useEffect has missing dependencies: 'addUserResponse.message', 'dispatch', and 'error.data.message'. Either include them or remove the dependency array.",["2465"],["2466"],["2467"],"'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.",["2468"],["2469"],["2470"],["2471"],["2472"],"no-whitespace-before-property","Unexpected whitespace before property map.","MemberExpression","unexpectedWhitespace",{"range":"2473","text":"2474"},["2475"],["2476"],["2477"],["2478"],["2479"],["2480"],"'branchesOptionsGroup' is assigned a value but never used.","'handleChangePassword' is defined but never used.","'getBranchesOptions' is defined but never used.","'getGroup' is defined but never used.","'getWards' is defined but never used.","'selectedCompany' is assigned a value but never used.",["2481"],["2482"],["2483"],["2484"],"'preUpdateLocalbodyPassword' is assigned a value but never used.",{"range":"2485","text":"2474"},"'Label' is defined but never used.","'getCompaniesOptionsSuccess' is defined but never used.","'getDistrictsSuccess' is defined but never used.","'formreset' is defined but never used.",["2486"],["2487"],["2488"],["2489"],"'handleValidSubmitPassword' is assigned a value but never used.","'closeModal' is assigned a value but never used.",["2490"],["2491"],["2492"],["2493"],"'preUpdateDistrictPassword' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'districtsForTable' and 'preUpdateDistrict'. Either include them or remove the dependency array.",["2494"],"'handleSelectedPrivilage' is defined but never used.","'handleSelectedCompany' is defined but never used.","'handleSelectedBranch' is defined but never used.","'options' is defined but never used.","'FormText' is defined but never used.","'getLocalbodiesSuccess' is defined but never used.","'getLocalbodySuccess' is defined but never used.","'wardshortcode' is assigned a value but never used.","'setwardShortcode' is assigned a value but never used.",["2495"],["2496"],["2497"],["2498"],"'preUpdateWardPassword' is assigned a value but never used.","'handleSelectedlocalbodyname' is defined but never used.","'getDistricts' is defined but never used.","'addDistrict' is defined but never used.","'deleteDistrict' is defined but never used.","'districts' is assigned a value but never used.","'addingDistrict' is assigned a value but never used.","'addDistrictResponse' is assigned a value but never used.","'deleteDistrictResponse' is assigned a value but never used.","'updateDistrictResponse' is assigned a value but never used.",["2499"],["2500"],["2501"],["2502"],"'preUpdateCategoryPassword' is assigned a value but never used.","'GET_CUST_CATEGORY' is defined but never used.","'GET_CUST_CATEGORY_SUCCESS' is defined but never used.","'GET_CUST_CATEGORY_FAIL' is defined but never used.","Duplicate key 'deletingCategory'.","Duplicate key 'updatingCategory'.","'getCategory' is defined but never used.",{"desc":"2503","fix":"2504"},[666,666]," rel=\"noreferrer\"",{"desc":"2505","fix":"2506"},{"desc":"2507","fix":"2508"},[2342,2353],"'addedby'",[2572,2583],{"desc":"2509","fix":"2510"},{"desc":"2511","fix":"2512"},{"desc":"2513","fix":"2514"},{"desc":"2515","fix":"2516"},{"desc":"2517","fix":"2518"},[327,340],"userId",[703,724],"company_id",{"desc":"2519","fix":"2520"},{"desc":"2521","fix":"2522"},[6681,6681],[5758,5758],[4611,4611],{"desc":"2507","fix":"2523"},{"desc":"2509","fix":"2524"},{"desc":"2511","fix":"2525"},{"desc":"2513","fix":"2526"},{"desc":"2515","fix":"2527"},{"desc":"2507","fix":"2528"},{"desc":"2509","fix":"2529"},{"desc":"2511","fix":"2530"},{"desc":"2513","fix":"2531"},{"desc":"2515","fix":"2532"},{"desc":"2507","fix":"2533"},{"desc":"2509","fix":"2534"},{"desc":"2511","fix":"2535"},{"desc":"2513","fix":"2536"},{"desc":"2515","fix":"2537"},{"desc":"2507","fix":"2538"},{"desc":"2509","fix":"2539"},{"desc":"2511","fix":"2540"},{"desc":"2513","fix":"2541"},{"desc":"2515","fix":"2542"},{"desc":"2507","fix":"2543"},{"desc":"2509","fix":"2544"},{"desc":"2545","fix":"2546"},{"desc":"2547","fix":"2548"},{"desc":"2549","fix":"2550"},{"desc":"2551","fix":"2552"},{"desc":"2507","fix":"2553"},{"desc":"2509","fix":"2554"},{"desc":"2511","fix":"2555"},{"desc":"2513","fix":"2556"},{"desc":"2515","fix":"2557"},{"desc":"2507","fix":"2558"},{"desc":"2509","fix":"2559"},{"desc":"2511","fix":"2560"},{"desc":"2513","fix":"2561"},{"desc":"2515","fix":"2562"},{"desc":"2507","fix":"2563"},{"desc":"2509","fix":"2564"},{"desc":"2511","fix":"2565"},{"desc":"2513","fix":"2566"},{"desc":"2515","fix":"2567"},{"desc":"2507","fix":"2568"},{"desc":"2509","fix":"2569"},{"desc":"2511","fix":"2570"},{"desc":"2513","fix":"2571"},{"desc":"2515","fix":"2572"},{"desc":"2507","fix":"2573"},{"desc":"2509","fix":"2574"},{"desc":"2511","fix":"2575"},{"desc":"2513","fix":"2576"},{"desc":"2515","fix":"2577"},{"desc":"2507","fix":"2578"},{"desc":"2509","fix":"2579"},{"desc":"2511","fix":"2580"},{"desc":"2513","fix":"2581"},{"desc":"2515","fix":"2582"},{"desc":"2507","fix":"2583"},{"desc":"2509","fix":"2584"},{"desc":"2511","fix":"2585"},{"desc":"2513","fix":"2586"},{"desc":"2515","fix":"2587"},{"desc":"2507","fix":"2588"},{"desc":"2509","fix":"2589"},{"desc":"2511","fix":"2590"},{"desc":"2513","fix":"2591"},{"desc":"2515","fix":"2592"},{"desc":"2507","fix":"2593"},{"desc":"2509","fix":"2594"},{"desc":"2511","fix":"2595"},{"desc":"2513","fix":"2596"},{"desc":"2515","fix":"2597"},{"desc":"2507","fix":"2598"},{"desc":"2509","fix":"2599"},{"desc":"2511","fix":"2600"},{"desc":"2513","fix":"2601"},{"desc":"2515","fix":"2602"},{"desc":"2507","fix":"2603"},{"desc":"2509","fix":"2604"},{"desc":"2511","fix":"2605"},{"desc":"2513","fix":"2606"},{"desc":"2515","fix":"2607"},{"desc":"2507","fix":"2608"},{"desc":"2509","fix":"2609"},{"desc":"2511","fix":"2610"},{"desc":"2513","fix":"2611"},{"desc":"2515","fix":"2612"},{"desc":"2507","fix":"2613"},{"desc":"2509","fix":"2614"},{"desc":"2511","fix":"2615"},{"desc":"2513","fix":"2616"},{"desc":"2515","fix":"2617"},{"desc":"2507","fix":"2618"},{"desc":"2509","fix":"2619"},{"desc":"2620","fix":"2621"},{"desc":"2513","fix":"2622"},{"desc":"2515","fix":"2623"},{"desc":"2507","fix":"2624"},{"desc":"2509","fix":"2625"},{"desc":"2511","fix":"2626"},{"desc":"2513","fix":"2627"},{"desc":"2515","fix":"2628"},[6082,6085],"?.",{"desc":"2507","fix":"2629"},{"desc":"2509","fix":"2630"},{"desc":"2511","fix":"2631"},{"desc":"2513","fix":"2632"},{"desc":"2515","fix":"2633"},{"desc":"2634","fix":"2635"},{"desc":"2507","fix":"2636"},{"desc":"2637","fix":"2638"},{"desc":"2639","fix":"2640"},{"desc":"2641","fix":"2642"},[10115,10118],{"desc":"2507","fix":"2643"},{"desc":"2644","fix":"2645"},{"desc":"2646","fix":"2647"},{"desc":"2648","fix":"2649"},{"desc":"2507","fix":"2650"},{"desc":"2651","fix":"2652"},{"desc":"2653","fix":"2654"},{"desc":"2655","fix":"2656"},{"desc":"2657","fix":"2658"},{"desc":"2507","fix":"2659"},{"desc":"2660","fix":"2661"},{"desc":"2662","fix":"2663"},{"desc":"2664","fix":"2665"},{"desc":"2507","fix":"2666"},{"desc":"2667","fix":"2668"},{"desc":"2669","fix":"2670"},{"desc":"2671","fix":"2672"},"Update the dependencies array to be: [props.location]",{"range":"2673","text":"2674"},"Update the dependencies array to be: [fetchMasterCompanies, fetchMasterLocalbodies]",{"range":"2675","text":"2676"},"Update the dependencies array to be: [dispatch]",{"range":"2677","text":"2678"},"Update the dependencies array to be: [dispatch, selectedCompany]",{"range":"2679","text":"2680"},"Update the dependencies array to be: [addUserResponse, error.data.message]",{"range":"2681","text":"2682"},"Update the dependencies array to be: [deleteUserResponse, error.data.message]",{"range":"2683","text":"2684"},"Update the dependencies array to be: [error.data.message, updateUserResponse]",{"range":"2685","text":"2686"},"Update the dependencies array to be: [preUpdateUser, users]",{"range":"2687","text":"2688"},"Update the dependencies array to be: [props]",{"range":"2689","text":"2690"},"Update the dependencies array to be: [error.data.message, loginResponse]",{"range":"2691","text":"2692"},{"range":"2693","text":"2678"},{"range":"2694","text":"2680"},{"range":"2695","text":"2682"},{"range":"2696","text":"2684"},{"range":"2697","text":"2686"},{"range":"2698","text":"2678"},{"range":"2699","text":"2680"},{"range":"2700","text":"2682"},{"range":"2701","text":"2684"},{"range":"2702","text":"2686"},{"range":"2703","text":"2678"},{"range":"2704","text":"2680"},{"range":"2705","text":"2682"},{"range":"2706","text":"2684"},{"range":"2707","text":"2686"},{"range":"2708","text":"2678"},{"range":"2709","text":"2680"},{"range":"2710","text":"2682"},{"range":"2711","text":"2684"},{"range":"2712","text":"2686"},{"range":"2713","text":"2678"},{"range":"2714","text":"2680"},"Update the dependencies array to be: [addWasteItemResponse, dispatch, error.data.message]",{"range":"2715","text":"2716"},"Update the dependencies array to be: [deleteWasteItemResponse, dispatch, error.data.message]",{"range":"2717","text":"2718"},"Update the dependencies array to be: [error.data.message, updateWasteItemResponse]",{"range":"2719","text":"2720"},"Update the dependencies array to be: [API_URL, preUpdateData, wasteItems]",{"range":"2721","text":"2722"},{"range":"2723","text":"2678"},{"range":"2724","text":"2680"},{"range":"2725","text":"2682"},{"range":"2726","text":"2684"},{"range":"2727","text":"2686"},{"range":"2728","text":"2678"},{"range":"2729","text":"2680"},{"range":"2730","text":"2682"},{"range":"2731","text":"2684"},{"range":"2732","text":"2686"},{"range":"2733","text":"2678"},{"range":"2734","text":"2680"},{"range":"2735","text":"2682"},{"range":"2736","text":"2684"},{"range":"2737","text":"2686"},{"range":"2738","text":"2678"},{"range":"2739","text":"2680"},{"range":"2740","text":"2682"},{"range":"2741","text":"2684"},{"range":"2742","text":"2686"},{"range":"2743","text":"2678"},{"range":"2744","text":"2680"},{"range":"2745","text":"2682"},{"range":"2746","text":"2684"},{"range":"2747","text":"2686"},{"range":"2748","text":"2678"},{"range":"2749","text":"2680"},{"range":"2750","text":"2682"},{"range":"2751","text":"2684"},{"range":"2752","text":"2686"},{"range":"2753","text":"2678"},{"range":"2754","text":"2680"},{"range":"2755","text":"2682"},{"range":"2756","text":"2684"},{"range":"2757","text":"2686"},{"range":"2758","text":"2678"},{"range":"2759","text":"2680"},{"range":"2760","text":"2682"},{"range":"2761","text":"2684"},{"range":"2762","text":"2686"},{"range":"2763","text":"2678"},{"range":"2764","text":"2680"},{"range":"2765","text":"2682"},{"range":"2766","text":"2684"},{"range":"2767","text":"2686"},{"range":"2768","text":"2678"},{"range":"2769","text":"2680"},{"range":"2770","text":"2682"},{"range":"2771","text":"2684"},{"range":"2772","text":"2686"},{"range":"2773","text":"2678"},{"range":"2774","text":"2680"},{"range":"2775","text":"2682"},{"range":"2776","text":"2684"},{"range":"2777","text":"2686"},{"range":"2778","text":"2678"},{"range":"2779","text":"2680"},{"range":"2780","text":"2682"},{"range":"2781","text":"2684"},{"range":"2782","text":"2686"},{"range":"2783","text":"2678"},{"range":"2784","text":"2680"},{"range":"2785","text":"2682"},{"range":"2786","text":"2684"},{"range":"2787","text":"2686"},{"range":"2788","text":"2678"},{"range":"2789","text":"2680"},"Update the dependencies array to be: [addResponse, addUserResponse.message, dispatch, error.data.message]",{"range":"2790","text":"2791"},{"range":"2792","text":"2684"},{"range":"2793","text":"2686"},{"range":"2794","text":"2678"},{"range":"2795","text":"2680"},{"range":"2796","text":"2682"},{"range":"2797","text":"2684"},{"range":"2798","text":"2686"},{"range":"2799","text":"2678"},{"range":"2800","text":"2680"},{"range":"2801","text":"2682"},{"range":"2802","text":"2684"},{"range":"2803","text":"2686"},"Update the dependencies array to be: [customers, preUpdateUser]",{"range":"2804","text":"2805"},{"range":"2806","text":"2678"},"Update the dependencies array to be: [addGroupResponse, dispatch, error.data.message]",{"range":"2807","text":"2808"},"Update the dependencies array to be: [deleteGroupResponse, dispatch, error.data.message]",{"range":"2809","text":"2810"},"Update the dependencies array to be: [dispatch, error.data.message, updateGroupResponse]",{"range":"2811","text":"2812"},{"range":"2813","text":"2678"},"Update the dependencies array to be: [addLocalbodyResponse, dispatch, error.data.message]",{"range":"2814","text":"2815"},"Update the dependencies array to be: [deleteLocalbodyResponse, dispatch, error.data.message]",{"range":"2816","text":"2817"},"Update the dependencies array to be: [dispatch, error.data.message, updateLocalbodyResponse]",{"range":"2818","text":"2819"},{"range":"2820","text":"2678"},"Update the dependencies array to be: [addDistrictResponse, dispatch, error.data.message]",{"range":"2821","text":"2822"},"Update the dependencies array to be: [deleteDistrictResponse, dispatch, error.data.message]",{"range":"2823","text":"2824"},"Update the dependencies array to be: [dispatch, error.data.message, updateDistrictResponse]",{"range":"2825","text":"2826"},"Update the dependencies array to be: [districts, districtsForTable, preUpdateDistrict]",{"range":"2827","text":"2828"},{"range":"2829","text":"2678"},"Update the dependencies array to be: [addWardResponse, dispatch, error.data.message]",{"range":"2830","text":"2831"},"Update the dependencies array to be: [deleteWardResponse, dispatch, error.data.message]",{"range":"2832","text":"2833"},"Update the dependencies array to be: [dispatch, error.data.message, updateWardResponse]",{"range":"2834","text":"2835"},{"range":"2836","text":"2678"},"Update the dependencies array to be: [addCategoryResponse, dispatch, error.data.message]",{"range":"2837","text":"2838"},"Update the dependencies array to be: [deleteCategoryResponse, dispatch, error.data.message]",{"range":"2839","text":"2840"},"Update the dependencies array to be: [dispatch, error.data.message, updateCategoryResponse]",{"range":"2841","text":"2842"},[1351,1353],"[props.location]",[2526,2528],"[fetchMasterCompanies, fetchMasterLocalbodies]",[2293,2295],"[dispatch]",[2753,2770],"[dispatch, selectedCompany]",[3122,3139],"[addUserResponse, error.data.message]",[3440,3460],"[deleteUserResponse, error.data.message]",[3819,3839],"[error.data.message, updateUserResponse]",[5982,5989],"[preUpdateUser, users]",[1010,1012],"[props]",[1536,1551],"[error.data.message, loginResponse]",[2522,2524],[2660,2677],[3067,3084],[3385,3405],[3764,3784],[2528,2530],[2666,2683],[3073,3090],[3391,3411],[3770,3790],[2528,2530],[2666,2683],[3073,3090],[3391,3411],[3770,3790],[2559,2561],[2697,2714],[3104,3121],[3422,3442],[3801,3821],[3467,3469],[3605,3622],[3974,3996],"[addWasteItemResponse, dispatch, error.data.message]",[4350,4375],"[deleteWasteItemResponse, dispatch, error.data.message]",[4755,4780],"[error.data.message, updateWasteItemResponse]",[9640,9652],"[API_URL, preUpdateData, wasteItems]",[2532,2534],[2670,2687],[3077,3094],[3395,3415],[3774,3794],[2532,2534],[2670,2687],[3077,3094],[3395,3415],[3774,3794],[2527,2529],[2665,2682],[3072,3089],[3390,3410],[3769,3789],[2533,2535],[2671,2688],[3078,3095],[3396,3416],[3775,3795],[2533,2535],[2671,2688],[3078,3095],[3396,3416],[3775,3795],[2527,2529],[2665,2682],[3072,3089],[3390,3410],[3769,3789],[2523,2525],[2661,2678],[3068,3085],[3386,3406],[3765,3785],[2521,2523],[2659,2676],[3066,3083],[3384,3404],[3763,3783],[2530,2532],[2668,2685],[3075,3092],[3393,3413],[3772,3792],[2529,2531],[2667,2684],[3074,3091],[3392,3412],[3771,3791],[2520,2522],[2658,2675],[3065,3082],[3383,3403],[3762,3782],[2531,2533],[2669,2686],[3076,3093],[3394,3414],[3773,3793],[2526,2528],[2664,2681],[3071,3088],[3389,3409],[3768,3788],[2672,2674],[2810,2827],[3238,3251],"[addResponse, addUserResponse.message, dispatch, error.data.message]",[3552,3572],[3931,3951],[3626,3628],[3764,3781],[4171,4188],[4489,4509],[4868,4888],[4075,4077],[4213,4230],[4848,4865],[5166,5186],[5545,5565],[9791,9802],"[customers, preUpdateUser]",[3145,3147],[3557,3575],"[addGroupResponse, dispatch, error.data.message]",[3926,3947],"[deleteGroupResponse, dispatch, error.data.message]",[4364,4385],"[dispatch, error.data.message, updateGroupResponse]",[2642,2644],[3053,3075],"[addLocalbodyResponse, dispatch, error.data.message]",[3435,3460],"[deleteLocalbodyResponse, dispatch, error.data.message]",[3878,3903],"[dispatch, error.data.message, updateLocalbodyResponse]",[1999,2001],[2419,2440],"[addDistrictResponse, dispatch, error.data.message]",[2834,2858],"[deleteDistrictResponse, dispatch, error.data.message]",[3269,3293],"[dispatch, error.data.message, updateDistrictResponse]",[4762,4773],"[districts, districtsForTable, preUpdateDistrict]",[2379,2381],[2767,2784],"[addWardResponse, dispatch, error.data.message]",[3113,3133],"[deleteWardResponse, dispatch, error.data.message]",[3520,3540],"[dispatch, error.data.message, updateWardResponse]",[2302,2304],[2640,2661],"[addCategoryResponse, dispatch, error.data.message]",[3064,3088],"[deleteCategoryResponse, dispatch, error.data.message]",[3508,3532],"[dispatch, error.data.message, updateCategoryResponse]"]