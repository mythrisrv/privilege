[{"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\index.js":"1","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\serviceWorker.js":"2","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\App.js":"3","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\index.js":"4","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\routes\\allRoutes.js":"5","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\routes\\middleware\\Authmiddleware.js":"6","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\NonAuthLayout.js":"7","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\index.js":"8","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\index.js":"9","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\reducers.js":"10","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\sagas.js":"11","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Footer.js":"12","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\index.js":"13","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\User\\index.js":"14","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Header.js":"15","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-starter.js":"16","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-maintenance.js":"17","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-comingsoon.js":"18","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-faqs.js":"19","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-timeline.js":"20","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-pricing.js":"21","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-404.js":"22","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-500.js":"23","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiAlert.js":"24","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiButtons.js":"25","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiCarousel.js":"26","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiCards.js":"27","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiColors.js":"28","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiDropdown.js":"29","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiGeneral.js":"30","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiImages.js":"31","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiGrid.js":"32","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiLightbox.js":"33","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiModal.js":"34","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiSweetAlert.js":"35","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiProgressbar.js":"36","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiTabsAccordions.js":"37","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiTypography.js":"38","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiSessionTimeout.js":"39","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiVideo.js":"40","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiRating.js":"41","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiRangeSlider.js":"42","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\ui-notifications.js":"43","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\ui-image-cropper.js":"44","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\BasicElements.js":"45","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormLayouts.js":"46","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormEditors.js":"47","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormAdvanced.js":"48","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormValidations.js":"49","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormMask.js":"50","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormRepeater.js":"51","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormUpload.js":"52","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormXeditable.js":"53","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormWizard.js":"54","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\BasicTables.js":"55","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\DatatableTables.js":"56","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\ResponsiveTables.js":"57","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\EditableTables.js":"58","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\ChartjsChart.js":"59","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\Apexcharts.js":"60","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\EChart.js":"61","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\SparklineChart.js":"62","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\charts-knob.js":"63","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconDripicons.js":"64","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconUnicons.js":"65","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconBoxicons.js":"66","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsGoogle.js":"67","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsVector.js":"68","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsLeaflet.js":"69","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Login.js":"70","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Logout.js":"71","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Register.js":"72","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\ForgetPassword.js":"73","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Login.js":"74","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Recoverpw.js":"75","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconMaterialdesign.js":"76","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Register.js":"77","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\auth-lock-screen.js":"78","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\index.js":"79","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconFontawesome.js":"80","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\Rightbar.js":"81","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\reducer.js":"82","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\saga.js":"83","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\viewTariff\\index.js":"84","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\index.js":"85","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\MasterSettings\\Company\\index.js":"86","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\MasterSettings\\Privilage\\index.js":"87","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\actions.js":"88","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\Vectormap.js":"89","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\Common\\Breadcrumb.js":"90","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapLayerControl.js":"91","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\LayerGroup.js":"92","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapMarkerCustomIcons.js":"93","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapVectorLayers.js":"94","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapWithPopup.js":"95","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\SimpleMap.js":"96","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\actions.js":"97","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\actionTypes.js":"98","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\backend_helper.js":"99","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\knob\\knob.js":"100","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\actions.js":"101","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\actions.js":"102","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\actions.js":"103","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\actions.js":"104","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\actions.js":"105","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\actions.js":"106","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\actions.js":"107","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\candlestickchart.js":"108","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\bubblechart.js":"109","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\scatterchart.js":"110","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\doughnutchart.js":"111","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\piechart.js":"112","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linebarchart.js":"113","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linechart.js":"114","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\gaugechart.js":"115","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\actions.js":"116","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actions.js":"117","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\actions.js":"118","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\actions.js":"119","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dountchart.js":"120","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\RadialChart.js":"121","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\PieChart.js":"122","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\LineColumnArea.js":"123","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\barchart.js":"124","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\ColumnWithDataLabels.js":"125","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\apaexlinecolumn.js":"126","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\SplineArea.js":"127","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dashedLine.js":"128","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\chartapex.js":"129","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\radarchart.js":"130","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\polarchart.js":"131","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\barchart.js":"132","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\piechart.js":"133","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\dountchart.js":"134","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\linechart.js":"135","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\url_helper.js":"136","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\api_helper.js":"137","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\actionTypes.js":"138","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\actionTypes.js":"139","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\actionTypes.js":"140","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\actionTypes.js":"141","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\actionTypes.js":"142","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\actionTypes.js":"143","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actionTypes.js":"144","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\actionTypes.js":"145","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\jwt-token-access\\accessToken.js":"146","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\actionTypes.js":"147","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\actionTypes.js":"148","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\actionTypes.js":"149","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slideindividual.js":"150","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidedark.js":"151","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithfade.js":"152","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithindicator.js":"153","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcaption.js":"154","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcontrol.js":"155","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slide.js":"156","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\card-pricing.js":"157","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js":"158","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js":"159","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js":"160","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\latest-transaction.js":"161","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\socialsource.js":"162","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\topuser.js":"163","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\recent-activity.js":"164","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\topselling-product.js":"165","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\salesanalytics-chart.js":"166","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\mini-widget.js":"167","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\saga.js":"168","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\saga.js":"169","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\saga.js":"170","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\saga.js":"171","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\saga.js":"172","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\saga.js":"173","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\saga.js":"174","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\saga.js":"175","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\saga.js":"176","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\saga.js":"177","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\saga.js":"178","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\i18n.js":"179","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\common\\languages.js":"180","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\firebase_helper.js":"181","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\reducer.js":"182","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\reducer.js":"183","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\reducer.js":"184","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\reducer.js":"185","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\reducer.js":"186","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\reducer.js":"187","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\reducer.js":"188","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\reducer.js":"189","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\reducer.js":"190","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\reducer.js":"191","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\reducer.js":"192","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Navbar.js":"193","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Sidebar.js":"194","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Footer.js":"195","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Header.js":"196","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\user-profile.js":"197","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Invoice\\ViewInvoice\\index.js":"198","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\SidebarContent.js":"199","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Package\\AddWaste\\index.js":"200","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Invoice\\AutoInvoice\\index.js":"201","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Package\\AddTariff\\index.js":"202","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\CreditDebit\\index.js":"203","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\IncomeExpenses\\index.js":"204","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\TransactionLog\\index.js":"205","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\Chart\\index.js":"206","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\AccountDetails\\index.js":"207","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\Account-Type\\index.js":"208","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\Ward\\index.js":"209","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\FundTransfer\\index.js":"210","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\Localbody\\index.js":"211","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\District\\index.js":"212","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\MegaMenu\\MegaMenu.jsx":"213"},{"size":473,"mtime":1633927803103,"results":"214","hashOfConfig":"215"},{"size":5456,"mtime":1633927803483,"results":"216","hashOfConfig":"215"},{"size":2303,"mtime":1633927801843,"results":"217","hashOfConfig":"215"},{"size":468,"mtime":1633927803604,"results":"218","hashOfConfig":"215"},{"size":10124,"mtime":1633927803480,"results":"219","hashOfConfig":"215"},{"size":808,"mtime":1633927803482,"results":"220","hashOfConfig":"215"},{"size":792,"mtime":1633927803091,"results":"221","hashOfConfig":"215"},{"size":3777,"mtime":1633927803096,"results":"222","hashOfConfig":"215"},{"size":3141,"mtime":1633927803088,"results":"223","hashOfConfig":"215"},{"size":885,"mtime":1633927803648,"results":"224","hashOfConfig":"215"},{"size":976,"mtime":1633927803648,"results":"225","hashOfConfig":"215"},{"size":588,"mtime":1633927803085,"results":"226","hashOfConfig":"215"},{"size":6161,"mtime":1633927803177,"results":"227","hashOfConfig":"215"},{"size":21518,"mtime":1633927803343,"results":"228","hashOfConfig":"215"},{"size":9543,"mtime":1633927803086,"results":"229","hashOfConfig":"215"},{"size":492,"mtime":1633927803476,"results":"230","hashOfConfig":"215"},{"size":4614,"mtime":1633927803474,"results":"231","hashOfConfig":"215"},{"size":3676,"mtime":1633927803471,"results":"232","hashOfConfig":"215"},{"size":16197,"mtime":1633927803473,"results":"233","hashOfConfig":"215"},{"size":8776,"mtime":1633927803478,"results":"234","hashOfConfig":"215"},{"size":2680,"mtime":1633927803475,"results":"235","hashOfConfig":"215"},{"size":1527,"mtime":1633927803462,"results":"236","hashOfConfig":"215"},{"size":1523,"mtime":1633927803464,"results":"237","hashOfConfig":"215"},{"size":14899,"mtime":1633927803255,"results":"238","hashOfConfig":"215"},{"size":29928,"mtime":1633927803256,"results":"239","hashOfConfig":"215"},{"size":4660,"mtime":1633927803314,"results":"240","hashOfConfig":"215"},{"size":26488,"mtime":1633927803257,"results":"241","hashOfConfig":"215"},{"size":10519,"mtime":1633927803315,"results":"242","hashOfConfig":"215"},{"size":30800,"mtime":1633927803319,"results":"243","hashOfConfig":"215"},{"size":26819,"mtime":1633927803320,"results":"244","hashOfConfig":"215"},{"size":6403,"mtime":1633927803323,"results":"245","hashOfConfig":"215"},{"size":5125,"mtime":1633927803322,"results":"246","hashOfConfig":"215"},{"size":16871,"mtime":1633927803325,"results":"247","hashOfConfig":"215"},{"size":36527,"mtime":1633927803327,"results":"248","hashOfConfig":"215"},{"size":21075,"mtime":1633927803333,"results":"249","hashOfConfig":"215"},{"size":8780,"mtime":1633927803328,"results":"250","hashOfConfig":"215"},{"size":54090,"mtime":1633927803334,"results":"251","hashOfConfig":"215"},{"size":12549,"mtime":1633927803336,"results":"252","hashOfConfig":"215"},{"size":4019,"mtime":1633927803332,"results":"253","hashOfConfig":"215"},{"size":3290,"mtime":1633927803337,"results":"254","hashOfConfig":"215"},{"size":14980,"mtime":1633927803331,"results":"255","hashOfConfig":"215"},{"size":8305,"mtime":1633927803329,"results":"256","hashOfConfig":"215"},{"size":25442,"mtime":1633927803341,"results":"257","hashOfConfig":"215"},{"size":33540,"mtime":1633927803338,"results":"258","hashOfConfig":"215"},{"size":30672,"mtime":1633927803195,"results":"259","hashOfConfig":"215"},{"size":14116,"mtime":1633927803198,"results":"260","hashOfConfig":"215"},{"size":1507,"mtime":1633927803197,"results":"261","hashOfConfig":"215"},{"size":39736,"mtime":1633927803196,"results":"262","hashOfConfig":"215"},{"size":26019,"mtime":1633927803201,"results":"263","hashOfConfig":"215"},{"size":6441,"mtime":1633927803199,"results":"264","hashOfConfig":"215"},{"size":13028,"mtime":1633927803200,"results":"265","hashOfConfig":"215"},{"size":4821,"mtime":1633927803200,"results":"266","hashOfConfig":"215"},{"size":6331,"mtime":1633927803208,"results":"267","hashOfConfig":"215"},{"size":35838,"mtime":1633927803202,"results":"268","hashOfConfig":"215"},{"size":24922,"mtime":1633927803246,"results":"269","hashOfConfig":"215"},{"size":13117,"mtime":1633927803247,"results":"270","hashOfConfig":"215"},{"size":24944,"mtime":1633927803248,"results":"271","hashOfConfig":"215"},{"size":2149,"mtime":1633927803247,"results":"272","hashOfConfig":"215"},{"size":2473,"mtime":1633927803168,"results":"273","hashOfConfig":"215"},{"size":3953,"mtime":1633927803168,"results":"274","hashOfConfig":"215"},{"size":3708,"mtime":1633927803169,"results":"275","hashOfConfig":"215"},{"size":7013,"mtime":1633927803170,"results":"276","hashOfConfig":"215"},{"size":7424,"mtime":1633927803172,"results":"277","hashOfConfig":"215"},{"size":34408,"mtime":1633927803212,"results":"278","hashOfConfig":"215"},{"size":208199,"mtime":1633927803221,"results":"279","hashOfConfig":"215"},{"size":221905,"mtime":1633927803211,"results":"280","hashOfConfig":"215"},{"size":7750,"mtime":1633927803233,"results":"281","hashOfConfig":"215"},{"size":3054,"mtime":1633927803235,"results":"282","hashOfConfig":"215"},{"size":3286,"mtime":1633927803234,"results":"283","hashOfConfig":"215"},{"size":7287,"mtime":1633927803160,"results":"284","hashOfConfig":"215"},{"size":576,"mtime":1633927803161,"results":"285","hashOfConfig":"215"},{"size":7423,"mtime":1633927803161,"results":"286","hashOfConfig":"215"},{"size":6512,"mtime":1633927803159,"results":"287","hashOfConfig":"215"},{"size":5979,"mtime":1633927803164,"results":"288","hashOfConfig":"215"},{"size":3389,"mtime":1633927803165,"results":"289","hashOfConfig":"215"},{"size":367746,"mtime":1633927803219,"results":"290","hashOfConfig":"215"},{"size":5973,"mtime":1633927803166,"results":"291","hashOfConfig":"215"},{"size":5087,"mtime":1633927803166,"results":"292","hashOfConfig":"215"},{"size":40807,"mtime":1633927803175,"results":"293","hashOfConfig":"215"},{"size":576039,"mtime":1633927803216,"results":"294","hashOfConfig":"215"},{"size":13759,"mtime":1633927803078,"results":"295","hashOfConfig":"215"},{"size":3719,"mtime":1633927803614,"results":"296","hashOfConfig":"215"},{"size":2637,"mtime":1633927803644,"results":"297","hashOfConfig":"215"},{"size":14692,"mtime":1633927803176,"results":"298","hashOfConfig":"215"},{"size":13968,"mtime":1633927803173,"results":"299","hashOfConfig":"215"},{"size":17386,"mtime":1633927803238,"results":"300","hashOfConfig":"215"},{"size":14633,"mtime":1633927803240,"results":"301","hashOfConfig":"215"},{"size":497,"mtime":1633927803486,"results":"302","hashOfConfig":"215"},{"size":1105,"mtime":1633927803236,"results":"303","hashOfConfig":"215"},{"size":951,"mtime":1633927803077,"results":"304","hashOfConfig":"215"},{"size":2942,"mtime":1633927803230,"results":"305","hashOfConfig":"215"},{"size":1922,"mtime":1633927803229,"results":"306","hashOfConfig":"215"},{"size":1638,"mtime":1633927803231,"results":"307","hashOfConfig":"215"},{"size":2258,"mtime":1633927803231,"results":"308","hashOfConfig":"215"},{"size":1199,"mtime":1633927803232,"results":"309","hashOfConfig":"215"},{"size":1143,"mtime":1633927803232,"results":"310","hashOfConfig":"215"},{"size":2005,"mtime":1633927803613,"results":"311","hashOfConfig":"215"},{"size":910,"mtime":1633927803611,"results":"312","hashOfConfig":"215"},{"size":2897,"mtime":1633927803099,"results":"313","hashOfConfig":"215"},{"size":11156,"mtime":1633927803144,"results":"314","hashOfConfig":"215"},{"size":1681,"mtime":1633927803653,"results":"315","hashOfConfig":"215"},{"size":1863,"mtime":1633927803601,"results":"316","hashOfConfig":"215"},{"size":458,"mtime":1633927803596,"results":"317","hashOfConfig":"215"},{"size":479,"mtime":1633927803503,"results":"318","hashOfConfig":"215"},{"size":469,"mtime":1633927803646,"results":"319","hashOfConfig":"215"},{"size":1683,"mtime":1633927803651,"results":"320","hashOfConfig":"215"},{"size":1215,"mtime":1633927803607,"results":"321","hashOfConfig":"215"},{"size":1543,"mtime":1633927803138,"results":"322","hashOfConfig":"215"},{"size":5083,"mtime":1633927803137,"results":"323","hashOfConfig":"215"},{"size":1427,"mtime":1633927803143,"results":"324","hashOfConfig":"215"},{"size":1667,"mtime":1633927803139,"results":"325","hashOfConfig":"215"},{"size":1418,"mtime":1633927803142,"results":"326","hashOfConfig":"215"},{"size":2705,"mtime":1633927803141,"results":"327","hashOfConfig":"215"},{"size":1271,"mtime":1633927803141,"results":"328","hashOfConfig":"215"},{"size":1670,"mtime":1633927803140,"results":"329","hashOfConfig":"215"},{"size":522,"mtime":1633927803498,"results":"330","hashOfConfig":"215"},{"size":515,"mtime":1633927803490,"results":"331","hashOfConfig":"215"},{"size":1110,"mtime":1633927803495,"results":"332","hashOfConfig":"215"},{"size":465,"mtime":1633927803501,"results":"333","hashOfConfig":"215"},{"size":893,"mtime":1633927803125,"results":"334","hashOfConfig":"215"},{"size":1056,"mtime":1633927803119,"results":"335","hashOfConfig":"215"},{"size":847,"mtime":1633927803118,"results":"336","hashOfConfig":"215"},{"size":2244,"mtime":1633927803117,"results":"337","hashOfConfig":"215"},{"size":914,"mtime":1633927803123,"results":"338","hashOfConfig":"215"},{"size":2448,"mtime":1633927803117,"results":"339","hashOfConfig":"215"},{"size":1687,"mtime":1633927803120,"results":"340","hashOfConfig":"215"},{"size":1195,"mtime":1633927803119,"results":"341","hashOfConfig":"215"},{"size":1747,"mtime":1633927803124,"results":"342","hashOfConfig":"215"},{"size":1666,"mtime":1633927803124,"results":"343","hashOfConfig":"215"},{"size":1072,"mtime":1633927803136,"results":"344","hashOfConfig":"215"},{"size":502,"mtime":1633927803136,"results":"345","hashOfConfig":"215"},{"size":797,"mtime":1633927803133,"results":"346","hashOfConfig":"215"},{"size":453,"mtime":1633927803135,"results":"347","hashOfConfig":"215"},{"size":467,"mtime":1633927803134,"results":"348","hashOfConfig":"215"},{"size":1971,"mtime":1633927803134,"results":"349","hashOfConfig":"215"},{"size":1390,"mtime":1633927803102,"results":"350","hashOfConfig":"215"},{"size":1448,"mtime":1633927803098,"results":"351","hashOfConfig":"215"},{"size":748,"mtime":1633927803653,"results":"352","hashOfConfig":"215"},{"size":748,"mtime":1633927803650,"results":"353","hashOfConfig":"215"},{"size":234,"mtime":1633927803645,"results":"354","hashOfConfig":"215"},{"size":222,"mtime":1633927803503,"results":"355","hashOfConfig":"215"},{"size":175,"mtime":1633927803500,"results":"356","hashOfConfig":"215"},{"size":439,"mtime":1633927803494,"results":"357","hashOfConfig":"215"},{"size":178,"mtime":1633927803489,"results":"358","hashOfConfig":"215"},{"size":195,"mtime":1633927803497,"results":"359","hashOfConfig":"215"},{"size":185,"mtime":1633927803101,"results":"360","hashOfConfig":"215"},{"size":567,"mtime":1633927803605,"results":"361","hashOfConfig":"215"},{"size":228,"mtime":1633927803595,"results":"362","hashOfConfig":"215"},{"size":872,"mtime":1633927803600,"results":"363","hashOfConfig":"215"},{"size":2718,"mtime":1633927803252,"results":"364","hashOfConfig":"215"},{"size":3407,"mtime":1633927803251,"results":"365","hashOfConfig":"215"},{"size":2799,"mtime":1633927803254,"results":"366","hashOfConfig":"215"},{"size":2786,"mtime":1633927803254,"results":"367","hashOfConfig":"215"},{"size":3104,"mtime":1633927803253,"results":"368","hashOfConfig":"215"},{"size":2592,"mtime":1633927803253,"results":"369","hashOfConfig":"215"},{"size":2253,"mtime":1633927803251,"results":"370","hashOfConfig":"215"},{"size":1626,"mtime":1633927803345,"results":"371","hashOfConfig":"215"},{"size":3375,"mtime":1633927803082,"results":"372","hashOfConfig":"215"},{"size":2066,"mtime":1633927803080,"results":"373","hashOfConfig":"215"},{"size":6064,"mtime":1633927803081,"results":"374","hashOfConfig":"215"},{"size":12539,"mtime":1633927803178,"results":"375","hashOfConfig":"215"},{"size":4305,"mtime":1633927803187,"results":"376","hashOfConfig":"215"},{"size":8791,"mtime":1633927803189,"results":"377","hashOfConfig":"215"},{"size":3770,"mtime":1633927803186,"results":"378","hashOfConfig":"215"},{"size":2978,"mtime":1633927803188,"results":"379","hashOfConfig":"215"},{"size":4890,"mtime":1633927803186,"results":"380","hashOfConfig":"215"},{"size":1420,"mtime":1633927803178,"results":"381","hashOfConfig":"215"},{"size":2459,"mtime":1633927803603,"results":"382","hashOfConfig":"215"},{"size":720,"mtime":1633927803505,"results":"383","hashOfConfig":"215"},{"size":674,"mtime":1633927803598,"results":"384","hashOfConfig":"215"},{"size":2259,"mtime":1633927803655,"results":"385","hashOfConfig":"215"},{"size":694,"mtime":1633927803647,"results":"386","hashOfConfig":"215"},{"size":2259,"mtime":1633927803652,"results":"387","hashOfConfig":"215"},{"size":4999,"mtime":1633927803610,"results":"388","hashOfConfig":"215"},{"size":1568,"mtime":1633927803499,"results":"389","hashOfConfig":"215"},{"size":2084,"mtime":1633927803492,"results":"390","hashOfConfig":"215"},{"size":1629,"mtime":1633927803496,"results":"391","hashOfConfig":"215"},{"size":1630,"mtime":1633927803502,"results":"392","hashOfConfig":"215"},{"size":1284,"mtime":1633927803103,"results":"393","hashOfConfig":"215"},{"size":611,"mtime":1633927803075,"results":"394","hashOfConfig":"215"},{"size":5156,"mtime":1633927803100,"results":"395","hashOfConfig":"215"},{"size":3320,"mtime":1633927803654,"results":"396","hashOfConfig":"215"},{"size":3611,"mtime":1633927803602,"results":"397","hashOfConfig":"215"},{"size":601,"mtime":1633927803504,"results":"398","hashOfConfig":"215"},{"size":553,"mtime":1633927803597,"results":"399","hashOfConfig":"215"},{"size":561,"mtime":1633927803646,"results":"400","hashOfConfig":"215"},{"size":677,"mtime":1633927803498,"results":"401","hashOfConfig":"215"},{"size":3311,"mtime":1633927803651,"results":"402","hashOfConfig":"215"},{"size":950,"mtime":1633927803501,"results":"403","hashOfConfig":"215"},{"size":771,"mtime":1633927803491,"results":"404","hashOfConfig":"215"},{"size":1324,"mtime":1633927803495,"results":"405","hashOfConfig":"215"},{"size":1700,"mtime":1633927803608,"results":"406","hashOfConfig":"215"},{"size":27417,"mtime":1633927803087,"results":"407","hashOfConfig":"215"},{"size":2297,"mtime":1633927803094,"results":"408","hashOfConfig":"215"},{"size":945,"mtime":1633927803092,"results":"409","hashOfConfig":"215"},{"size":11139,"mtime":1633927803093,"results":"410","hashOfConfig":"215"},{"size":4119,"mtime":1633927803163,"results":"411","hashOfConfig":"215"},{"size":14785,"mtime":1633927803223,"results":"412","hashOfConfig":"215"},{"size":26100,"mtime":1633927803095,"results":"413","hashOfConfig":"215"},{"size":19904,"mtime":1633927803243,"results":"414","hashOfConfig":"215"},{"size":13485,"mtime":1633927803222,"results":"415","hashOfConfig":"215"},{"size":22035,"mtime":1633927803242,"results":"416","hashOfConfig":"215"},{"size":15166,"mtime":1633927803113,"results":"417","hashOfConfig":"215"},{"size":24050,"mtime":1633927803115,"results":"418","hashOfConfig":"215"},{"size":13069,"mtime":1633927803116,"results":"419","hashOfConfig":"215"},{"size":14262,"mtime":1633927803112,"results":"420","hashOfConfig":"215"},{"size":13120,"mtime":1633927803111,"results":"421","hashOfConfig":"215"},{"size":12421,"mtime":1633927803110,"results":"422","hashOfConfig":"215"},{"size":10177,"mtime":1633927803228,"results":"423","hashOfConfig":"215"},{"size":15276,"mtime":1633927803114,"results":"424","hashOfConfig":"215"},{"size":10639,"mtime":1633927803227,"results":"425","hashOfConfig":"215"},{"size":10515,"mtime":1633927803225,"results":"426","hashOfConfig":"215"},{"size":886,"mtime":1633927803090,"results":"427","hashOfConfig":"215"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ch10f2",{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":2,"source":"459"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"573"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"580"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793"},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801"},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"845"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848"},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851"},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"859"},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"871"},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895"},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\index.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\serviceWorker.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\App.js",["898"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport { Switch, Redirect, BrowserRouter as Router } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Import Routes all\r\nimport { userRoutes, authRoutes } from \"./routes/allRoutes\";\r\n\r\n// Import all middleware\r\nimport Authmiddleware from \"./routes/middleware/Authmiddleware\";\r\n\r\n// layouts Format\r\nimport VerticalLayout from \"./components/VerticalLayout/\";\r\nimport HorizontalLayout from \"./components/HorizontalLayout/\";\r\nimport NonAuthLayout from \"./components/NonAuthLayout\";\r\n\r\n// Import scss\r\nimport \"./assets/scss/theme.scss\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n// import fakeBackend from \"./helpers/AuthType/fakeBackend\";\r\n\r\n// Activating fake backend\r\n// fakeBackend()\r\n\r\nconst App = (props) => {\r\n  function getLayout() {\r\n    let layoutCls = VerticalLayout;\r\n\r\n    switch (props.layout.layoutType) {\r\n      case \"horizontal\":\r\n        layoutCls = HorizontalLayout;\r\n        break;\r\n      default:\r\n        layoutCls = VerticalLayout;\r\n        break;\r\n    }\r\n    return layoutCls;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cookies.get(\"rememberMe\") === \"false\") {\r\n      localStorage.removeItem(\"authUser\");\r\n      <Redirect to={{ pathname: \"/login\", state: { from: props.location } }} />;\r\n    }\r\n  }, []);\r\n\r\n  const Layout = getLayout();\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          {authRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={NonAuthLayout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={false}\r\n            />\r\n          ))}\r\n\r\n          {userRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={Layout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={true}\r\n              exact\r\n            />\r\n          ))}\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  layout: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    layout: state.Layout,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\index.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\routes\\allRoutes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\routes\\middleware\\Authmiddleware.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\NonAuthLayout.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\index.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\index.js",["899"],"import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport {\r\n  changeLayout,\r\n  changeTopbarTheme,\r\n  changeLayoutWidth,\r\n} from \"../../store/actions\";\r\n\r\n// Other Layout related Component\r\nimport Navbar from \"./Navbar\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Rightbar from \"../CommonForBoth/Rightbar\";\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isMenuOpened: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.isPreloader === true) {\r\n      document.getElementById(\"preloader\").style.display = \"block\";\r\n      document.getElementById(\"status\").style.display = \"block\";\r\n\r\n      setTimeout(function () {\r\n        document.getElementById(\"preloader\").style.display = \"none\";\r\n        document.getElementById(\"status\").style.display = \"none\";\r\n      }, 2500);\r\n    } else {\r\n      document.getElementById(\"preloader\").style.display = \"none\";\r\n      document.getElementById(\"status\").style.display = \"none\";\r\n    }\r\n\r\n    // Scrollto 0,0\r\n    window.scrollTo(0, 0);\r\n\r\n    const title = this.props.location.pathname;\r\n    let currentage = title.charAt(1).toUpperCase() + title.slice(2);\r\n\r\n    // document.title =\r\n    //   currentage + \" | Cococa\"\r\n\r\n    this.props.changeLayout(\"horizontal\");\r\n    if (this.props.topbarTheme) {\r\n      this.props.changeTopbarTheme(this.props.topbarTheme);\r\n    }\r\n    if (this.props.layoutWidth) {\r\n      this.props.changeLayoutWidth(this.props.layoutWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the menu - mobile\r\n   */\r\n  openMenu = () => {\r\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"preloader\">\r\n          <div id=\"status\">\r\n            <div className=\"spinner\">\r\n              <i className=\"uil-shutter-alt spin-icon\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"layout-wrapper\">\r\n          <header id=\"page-topbar\">\r\n            <Header\r\n              theme={this.props.topbarTheme}\r\n              isMenuOpened={this.state.isMenuOpened}\r\n              openLeftMenuCallBack={this.openMenu}\r\n            ></Header>\r\n            <Navbar menuOpen={this.state.isMenuOpened} />\r\n          </header>\r\n          <div className=\"main-content\">{this.props.children}</div>\r\n          <Footer />\r\n        </div>\r\n\r\n        {this.props.showRightSidebar ? <Rightbar /> : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nLayout.propTypes = {\r\n  changeLayout: PropTypes.func,\r\n  changeLayoutWidth: PropTypes.func,\r\n  changeTopbarTheme: PropTypes.func,\r\n  children: PropTypes.object,\r\n  isPreloader: PropTypes.any,\r\n  layoutWidth: PropTypes.any,\r\n  location: PropTypes.object,\r\n  showRightSidebar: PropTypes.any,\r\n  topbarTheme: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    ...state.Layout,\r\n  };\r\n};\r\nexport default connect(mapStatetoProps, {\r\n  changeTopbarTheme,\r\n  changeLayout,\r\n  changeLayoutWidth,\r\n})(withRouter(Layout));\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\reducers.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\sagas.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Footer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\index.js",["900","901","902","903"],"import React from \"react\";\r\nimport { Container, Row, Col, CardBody, Card } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n\r\n//Import Components\r\nimport MiniWidget from \"./mini-widget\";\r\nimport SalesAnalyticsChart from \"./salesanalytics-chart\";\r\nimport TopProduct from \"./topselling-product\";\r\nimport TopUser from \"./topuser\";\r\nimport RecentActivity from \"./recent-activity\";\r\nimport SocialSource from \"./socialsource\";\r\nimport LatestTransaction from \"./latest-transaction\";\r\n\r\n//Import Image\r\nimport setupanalytics from \"../../assets/images/setup-analytics-amico.svg\";\r\n\r\nconst series1 = [\r\n  {\r\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54],\r\n  },\r\n];\r\n\r\nconst options1 = {\r\n  fill: {\r\n    colors: [\"#5b73e8\"],\r\n  },\r\n  chart: {\r\n    width: 70,\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      columnWidth: \"50%\",\r\n    },\r\n  },\r\n  labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n  xaxis: {\r\n    crosshairs: {\r\n      width: 1,\r\n    },\r\n  },\r\n  tooltip: {\r\n    fixed: {\r\n      enabled: !1,\r\n    },\r\n    x: {\r\n      show: !1,\r\n    },\r\n    y: {\r\n      title: {\r\n        formatter: function (seriesName) {\r\n          return \"\";\r\n        },\r\n      },\r\n    },\r\n    marker: {\r\n      show: !1,\r\n    },\r\n  },\r\n};\r\n\r\nconst series2 = [70];\r\n\r\nconst options2 = {\r\n  fill: {\r\n    colors: [\"#34c38f\"],\r\n  },\r\n  chart: {\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  dataLabels: {\r\n    enabled: !1,\r\n  },\r\n  plotOptions: {\r\n    radialBar: {\r\n      hollow: {\r\n        margin: 0,\r\n        size: \"60%\",\r\n      },\r\n      track: {\r\n        margin: 0,\r\n      },\r\n      dataLabels: {\r\n        show: !1,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst series3 = [55];\r\n\r\nconst options3 = {\r\n  fill: {\r\n    colors: [\"#5b73e8\"],\r\n  },\r\n  chart: {\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  dataLabels: {\r\n    enabled: !1,\r\n  },\r\n  plotOptions: {\r\n    radialBar: {\r\n      hollow: {\r\n        margin: 0,\r\n        size: \"60%\",\r\n      },\r\n      track: {\r\n        margin: 0,\r\n      },\r\n      dataLabels: {\r\n        show: !1,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst series4 = [\r\n  {\r\n    data: [25, 66, 41, 89, 63, 25, 44, 12, 36, 9, 54],\r\n  },\r\n];\r\n\r\nconst options4 = {\r\n  fill: {\r\n    colors: [\"#f1b44c\"],\r\n  },\r\n  chart: {\r\n    width: 70,\r\n    sparkline: {\r\n      enabled: !0,\r\n    },\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      columnWidth: \"50%\",\r\n    },\r\n  },\r\n  labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n  xaxis: {\r\n    crosshairs: {\r\n      width: 1,\r\n    },\r\n  },\r\n  tooltip: {\r\n    fixed: {\r\n      enabled: !1,\r\n    },\r\n    x: {\r\n      show: !1,\r\n    },\r\n    y: {\r\n      title: {\r\n        formatter: function (seriesName) {\r\n          return \"\";\r\n        },\r\n      },\r\n    },\r\n    marker: {\r\n      show: !1,\r\n    },\r\n  },\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const reports = [\r\n    {\r\n      id: 1,\r\n      icon: \"mdi mdi-arrow-up-bold\",\r\n      title: \"Total Revenue\",\r\n      value: 34152,\r\n      prefix: \"$\",\r\n      suffix: \"\",\r\n      badgeValue: \"2.65%\",\r\n      decimal: 0,\r\n      charttype: \"bar\",\r\n      chartheight: 40,\r\n      chartwidth: 70,\r\n      color: \"success\",\r\n      desc: \"since last week\",\r\n      series: series1,\r\n      options: options1,\r\n    },\r\n    {\r\n      id: 2,\r\n      icon: \"mdi mdi-arrow-down-bold\",\r\n      title: \"Orders\",\r\n      value: 5643,\r\n      decimal: 0,\r\n      charttype: \"radialBar\",\r\n      chartheight: 45,\r\n      chartwidth: 45,\r\n      prefix: \"\",\r\n      suffix: \"\",\r\n      badgeValue: \"0.82%\",\r\n      color: \"danger\",\r\n      desc: \"since last week\",\r\n      series: series2,\r\n      options: options2,\r\n    },\r\n    {\r\n      id: 3,\r\n      icon: \"mdi mdi-arrow-down-bold\",\r\n      title: \"Customers\",\r\n      value: 45254,\r\n      decimal: 0,\r\n      prefix: \"\",\r\n      suffix: \"\",\r\n      charttype: \"radialBar\",\r\n      chartheight: 45,\r\n      chartwidth: 45,\r\n      badgeValue: \"6.24%\",\r\n      color: \"danger\",\r\n      desc: \"since last week\",\r\n      series: series3,\r\n      options: options3,\r\n    },\r\n    {\r\n      id: 4,\r\n      icon: \"mdi mdi-arrow-up-bold\",\r\n      title: \"Growth\",\r\n      value: 12.58,\r\n      decimal: 2,\r\n      prefix: \"+\",\r\n      suffix: \"%\",\r\n      charttype: \"bar\",\r\n      chartheight: 40,\r\n      chartwidth: 70,\r\n      badgeValue: \"10.51%\",\r\n      color: \"success\",\r\n      desc: \"since last week\",\r\n      series: series4,\r\n      options: options4,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          <Breadcrumbs title=\"Minible\" breadcrumbItem=\"Dashboard\" />\r\n          <Row>\r\n            <MiniWidget reports={reports} />\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col xl={8}>\r\n              <SalesAnalyticsChart />\r\n            </Col>\r\n            <Col xl={4}>\r\n              <Card className=\"bg-primary\">\r\n                <CardBody>\r\n                  <Row className=\"align-items-center\">\r\n                    <Col sm={8}>\r\n                      <p className=\"text-white font-size-18\">\r\n                        Enhance your <b>Campaign</b> for better outreach{\" \"}\r\n                        <i className=\"mdi mdi-arrow-right\"></i>\r\n                      </p>\r\n                      <div className=\"mt-4\">\r\n                        <Link\r\n                          to=\"#\"\r\n                          className=\"btn btn-success waves-effect waves-light\"\r\n                        >\r\n                          Upgrade Account!\r\n                        </Link>\r\n                      </div>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                      <div className=\"mt-4 mt-sm-0\">\r\n                        <img\r\n                          src={setupanalytics}\r\n                          className=\"img-fluid\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n              <TopProduct />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\User\\index.js",["904","905","906","907","908","909","910","911","912","913"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n} from \"../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\nimport \"./user.scss\";\r\n\r\nconst Users = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [userId, setUserId] = useState(1);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setUserObject({ ['addedby']: 1 });\r\n    if (localStorage.getItem('authUser')) {\r\n      const obj = jwt_decode(localStorage.getItem('authUser'));\r\n      console.log(obj);\r\n\r\n      setUserId(obj.user);\r\n      setUserObject({ ['addedby']: userId });\r\n    }\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  let preUpdateUser = (item) => {\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setUserIdToBeUpdated(item._id);\r\n    setUserObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateUserPassword = (item) => {\r\n    setUserIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setUserIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      item.privilage1 = item.privilage && item.privilage.name;\r\n      item.company1 = item.company && item.company.name;\r\n      item.branch1 = item.branch && item.branch.name;\r\n      userData.push(item);\r\n    });\r\n    setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"name1\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Email\",\r\n        field: \"email\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Username\",\r\n        field: \"username\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Mobile\",\r\n        field: \"mobile\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Privilage\",\r\n        field: \"privilage1\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Company\",\r\n        field: \"company1\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Branch\",\r\n        field: \"branch1\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  let privilagesOptionsData =\r\n    privilagesOptions &&\r\n    privilagesOptions.data &&\r\n    privilagesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let companiesOptionsData =\r\n    companiesOptions &&\r\n    companiesOptions.data &&\r\n    companiesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let branchesOptionsData =\r\n    branchesOptions &&\r\n    branchesOptions.data &&\r\n    branchesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  const privilagesOptionsGroup = [\r\n    {\r\n      options: privilagesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const companiesOptionsGroup = [\r\n    {\r\n      options: companiesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const branchesOptionsGroup = [\r\n    {\r\n      options: branchesOptionsData,\r\n    },\r\n  ];\r\n\r\n  function handleChangeUser(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setUserObject({ ...userObject, [name]: value });\r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setUserObject({ ...userObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setUserObject({ ...userObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setUserObject({ ...userObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    userIdTobeUpdated\r\n      ? dispatch(updateUser(userObject))\r\n      : dispatch(addUser(userObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: userIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateUser(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setUserIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteUser(userIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      <Modal\r\n        isOpen={showModal}\r\n        toggle={() => {\r\n          closeModal();\r\n        }}\r\n        centered={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">Confirmation</h5>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              closeModal();\r\n            }}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <AvForm\r\n          className=\"needs-validation\"\r\n          onValidSubmit={(e, v) => {\r\n            handleValidSubmitPassword(e, v);\r\n          }}\r\n        >\r\n          <div className=\"modal-body\">\r\n            <Row>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                  <AvField\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please provide a valid password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.password}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Confirm Password</Label>\r\n                  <AvField\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please confirm the password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.confirmPassword}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              className=\"btn btn-dark\"\r\n              style={{ marginRight: \"1rem\" }}\r\n              onClick={closeModal}\r\n            >\r\n              Close\r\n            </button>\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Confirm\r\n            </button>\r\n          </div>\r\n        </AvForm>\r\n      </Modal>\r\n\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Users\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">First name</Label>\r\n                          <AvField\r\n                            name=\"firstName\"\r\n                            placeholder=\"First name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter First Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.firstName}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Last name</Label>\r\n                          <AvField\r\n                            name=\"lastName\"\r\n                            placeholder=\"Last name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Last name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                            value={userObject.lastName}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Email</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            type=\"email\"\r\n                            errorMessage=\"Enter valid Email\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.email}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Username</Label>\r\n                          <AvField\r\n                            name=\"username\"\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid Username\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.username}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">Mobile</Label>\r\n                          <AvField\r\n                            name=\"mobile\"\r\n                            placeholder=\"Mobile\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Please provide a valid mobile.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                            value={userObject.mobile}\r\n                            onChange={handleChangeUser}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Prililage</Label>\r\n                          <Select\r\n                            name=\"privilage\"\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Company</Label>\r\n                          <Select\r\n                            name=\"company\"\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <div className=\"mb-3\">\r\n                          <Label>Branch</Label>\r\n                          <Select\r\n                            name=\"branch\"\r\n                            value={selectedBranch}\r\n                            onChange={(value) => {\r\n                              handleSelectedBranch(value);\r\n                            }}\r\n                            options={branchesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      {userIdTobeUpdated ? null : (\r\n                        <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                            <AvField\r\n                              name=\"password\"\r\n                              placeholder=\"Password\"\r\n                              type=\"password\"\r\n                              errorMessage=\" Please provide a valid password\"\r\n                              className=\"form-control\"\r\n                              validate={{ required: { value: true } }}\r\n                              id=\"validationCustom05\"\r\n                              value={userObject.password}\r\n                              onChange={handleChangeUser}\r\n                            />\r\n                          </div>\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n\r\n                    {userIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Users));\r\n\r\nUsers.propTypes = {\r\n  error: PropTypes.any,\r\n  users: PropTypes.array,\r\n};\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Header.js",["914"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Redux Store\r\nimport { showRightSidebarAction, toggleLeftmenu } from \"../../store/actions\";\r\n// reactstrap\r\nimport { Row, Col, Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\";\r\n\r\n// Import menuDropdown\r\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\";\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\n\r\nimport logo from \"../../assets/images/logo-sm.png\";\r\nimport logoLight from \"../../assets/images/logo-light.png\";\r\nimport logoDark from \"../../assets/images/logo-dark.png\";\r\n\r\n// import images\r\nimport github from \"../../assets/images/brands/github.png\";\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\";\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\";\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\";\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\";\r\nimport slack from \"../../assets/images/brands/slack.png\";\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nconst Header = (props) => {\r\n  const [isSearch, setSearch] = useState(false);\r\n  const [socialDrp, setsocialDrp] = useState(false);\r\n\r\n  function toggleFullscreen() {\r\n    if (\r\n      !document.fullscreenElement &&\r\n      /* alternative standard method */ !document.mozFullScreenElement &&\r\n      !document.webkitFullscreenElement\r\n    ) {\r\n      // current working methods\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) {\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) {\r\n        document.documentElement.webkitRequestFullscreen(\r\n          Element.ALLOW_KEYBOARD_INPUT\r\n        );\r\n      }\r\n    } else {\r\n      if (document.cancelFullScreen) {\r\n        document.cancelFullScreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitCancelFullScreen) {\r\n        document.webkitCancelFullScreen();\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"navbar-header\">\r\n        <div className=\"d-flex\">\r\n          <div className=\"navbar-brand-box\">\r\n            <Link to=\"/\" className=\"logo logo-dark\">\r\n              <span className=\"logo-sm\">\r\n                <img src={logo} alt=\"\" height=\"22\" />\r\n              </span>\r\n              <span className=\"logo-lg\">\r\n                <img src={logoDark} alt=\"\" height=\"17\" />\r\n              </span>\r\n            </Link>\r\n\r\n            <Link to=\"/\" className=\"logo logo-light\">\r\n              <span className=\"logo-sm\">\r\n                <img src={logo} alt=\"\" height=\"22\" />\r\n              </span>\r\n              <span className=\"logo-lg\">\r\n                <img src={logoLight} alt=\"\" height=\"19\" />\r\n              </span>\r\n            </Link>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm px-3 font-size-16 d-lg-none header-item waves-effect waves-light\"\r\n            data-toggle=\"collapse\"\r\n            onClick={() => {\r\n              props.toggleLeftmenu(!props.leftMenu);\r\n            }}\r\n            data-target=\"#topnav-menu-content\"\r\n          >\r\n            <i className=\"fa fa-fw fa-bars\" />\r\n          </button>\r\n          <form className=\"app-search d-none d-lg-block\">\r\n            <div className=\"position-relative\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search...\"\r\n              />\r\n              <span className=\"uil-search\"></span>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"d-flex\">\r\n          <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              id=\"page-header-search-dropdown\"\r\n              onClick={() => setSearch(!isSearch)}\r\n            >\r\n              <i className=\"uil-search\"></i>\r\n            </button>\r\n            <div\r\n              className={\r\n                isSearch\r\n                  ? \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0 show\"\r\n                  : \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0\"\r\n              }\r\n              aria-labelledby=\"page-header-search-dropdown\"\r\n            >\r\n              <form className=\"p-3\">\r\n                <div className=\"form-group m-0\">\r\n                  <div className=\"input-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder={props.t(\"Search\") + \"...\"}\r\n                      aria-label=\"Recipient's username\"\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                      <button className=\"btn btn-primary\" type=\"submit\">\r\n                        <i className=\"mdi mdi-magnify\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          <Dropdown\r\n            className=\"d-none d-lg-inline-block ms-1\"\r\n            isOpen={socialDrp}\r\n            toggle={() => {\r\n              setsocialDrp(!socialDrp);\r\n            }}\r\n          >\r\n            <DropdownToggle\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              caret\r\n              tag=\"button\"\r\n            >\r\n              <i className=\"bx bx-customize\" />\r\n            </DropdownToggle>\r\n            <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\" right>\r\n              <div className=\"px-lg-2\">\r\n                <Row className=\"g-0\">\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={github} alt=\"Github\" />\r\n                      <span>GitHub</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={bitbucket} alt=\"bitbucket\" />\r\n                      <span>Bitbucket</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={dribbble} alt=\"dribbble\" />\r\n                      <span>Dribbble</span>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"g-0\">\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={dropbox} alt=\"dropbox\" />\r\n                      <span>Dropbox</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                      <span>Mail Chimp</span>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col>\r\n                    <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                      <img src={slack} alt=\"slack\" />\r\n                      <span>Slack</span>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n\r\n          <div className=\"dropdown d-none d-lg-inline-block ms-1\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon waves-effect\"\r\n              onClick={() => {\r\n                toggleFullscreen();\r\n              }}\r\n              data-toggle=\"fullscreen\"\r\n            >\r\n              <i className=\"uil-minus-path\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <NotificationDropdown />\r\n          <div className=\"dropdown d-inline-block\">\r\n            <button\r\n              onClick={() => {\r\n                props.showRightSidebarAction(!props.showRightSidebar);\r\n              }}\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n            >\r\n              <i className=\"uil-cog\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <ProfileMenu />\r\n          <Link to=\"/logout\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n            >\r\n              <i\r\n                class=\"fas fa-power-off\"\r\n                style={{\r\n                  fontSize: \"1.2em\",\r\n                }}\r\n              ></i>\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  leftMenu: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { layoutType, showRightSidebar, leftMenu } = state.Layout;\r\n  return { layoutType, showRightSidebar, leftMenu };\r\n};\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n})(withTranslation()(Header));\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-starter.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-maintenance.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-comingsoon.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-faqs.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-timeline.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-pricing.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-404.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\pages-500.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiAlert.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiButtons.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiCarousel.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiCards.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiColors.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiDropdown.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiGeneral.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiImages.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiGrid.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiLightbox.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiModal.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiSweetAlert.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiProgressbar.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiTabsAccordions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiTypography.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiSessionTimeout.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiVideo.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiRating.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\UiRangeSlider.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\ui-notifications.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\ui-image-cropper.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\BasicElements.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormLayouts.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormEditors.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormAdvanced.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormValidations.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormMask.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormRepeater.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormUpload.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormXeditable.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Forms\\FormWizard.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\BasicTables.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\DatatableTables.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\ResponsiveTables.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Tables\\EditableTables.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\ChartjsChart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\Apexcharts.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\EChart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\SparklineChart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Charts\\charts-knob.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconDripicons.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconUnicons.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconBoxicons.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsGoogle.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsVector.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\MapsLeaflet.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Login.js",["915","916","917"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Row, Col, Alert, Container, CardBody, Card } from \"reactstrap\";\r\nimport toastr from \"toastr\";\r\n\r\n// Redux\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// actions\r\nimport { loginUser, apiError } from \"../../store/actions\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\nimport { checkAuth } from \"../../store/actions\";\r\n\r\nconst Login = (props) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  const { loading, error, loginResponse } = useSelector((state) => state.Login);\r\n\r\n  useEffect(() => {\r\n    props.checkAuth(props.history);\r\n  }, []);\r\n\r\n  // handleValidSubmit\r\n  const handleValidSubmit = (event, values) => {\r\n    console.log(values, \"values\");\r\n    props.loginUser(values, props.history);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (loginResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, loginResponse.message);\r\n    }\r\n  }, [loginResponse]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"account-pages my-5 pt-sm-5\">\r\n          <Container>\r\n            <Row className=\"align-items-center justify-content-center\">\r\n              <Col md={8} lg={6} xl={5}>\r\n                <Card>\r\n                  <CardBody className=\"p-4\">\r\n                    <Row>\r\n                      <Col lg={12}>\r\n                        <div className=\"text-center\">\r\n                          <Link to=\"/\" className=\"mb-3 d-block auth-logo\">\r\n                            <img\r\n                              src={logo}\r\n                              alt=\"\"\r\n                              height=\"22\"\r\n                              className=\"logo logo-dark\"\r\n                            />\r\n                            <img\r\n                              src={logolight}\r\n                              alt=\"\"\r\n                              height=\"22\"\r\n                              className=\"logo logo-light\"\r\n                            />\r\n                          </Link>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"text-center mt-2\">\r\n                      <h5>Welcome Back !</h5>\r\n                      <p className=\"text-muted\">\r\n                        Sign in to continue to Hazel Green.\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"p-2 mt-4\">\r\n                      <AvForm\r\n                        className=\"form-horizontal\"\r\n                        onValidSubmit={(e, v) => {\r\n                          handleValidSubmit(e, v);\r\n                        }}\r\n                      >\r\n                        {props.error && typeof props.error === \"string\" ? (\r\n                          <Alert color=\"danger\">{props.error}</Alert>\r\n                        ) : null}\r\n\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"username\"\r\n                            label=\"Username\"\r\n                            value={username}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            required\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            value={password}\r\n                            type=\"password\"\r\n                            required\r\n                            placeholder=\"Enter Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          />\r\n                        </div>\r\n\r\n                        <Row className=\"mt-4\">\r\n                          <Col lg={6}>\r\n                            <div style={{ display: \"flex\" }}>\r\n                              <AvField\r\n                                type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id=\"customControlInline\"\r\n                                name=\"rememberMe\"\r\n                                value={rememberMe}\r\n                                onChange={() => setRememberMe(!rememberMe)}\r\n                              />\r\n                              <label\r\n                                className=\"form-check-label\"\r\n                                htmlFor=\"customControlInline\"\r\n                              >\r\n                                Remember me\r\n                              </label>\r\n                            </div>\r\n                          </Col>\r\n                          <Col lg={6} md={12} sm={12} className=\"right-button\">\r\n                            <div>\r\n                              <button\r\n                                disabled={loading ? true : false}\r\n                                className=\"btn btn-primary w-md waves-effect waves-light\"\r\n                                type=\"submit\"\r\n                              >\r\n                                {loading ? \"Logging in\" : \"Log In\"}\r\n                              </button>\r\n                            </div>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                        <div className=\"mt-4\">\r\n                          <Link to=\"/forgot-password\" className=\"text-muted\">\r\n                            <i class=\"mdi mdi-lock\"></i>\r\n                            &nbsp;Forgot password?\r\n                          </Link>\r\n                        </div>\r\n                      </AvForm>\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                <div className=\"mt-5 text-center text-dark\">\r\n                  <p>\r\n                    ©{new Date().getFullYear()} Hazel Green.\r\n                    <a href=\"https://srvinfotech.com\" target=\"_blank\">\r\n                      &nbsp;Powered by SRV InfoTech\r\n                    </a>\r\n                  </p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { error } = state.Login;\r\n  return { error };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { loginUser, checkAuth, apiError })(Login)\r\n);\r\n\r\nLogin.propTypes = {\r\n  error: PropTypes.any,\r\n  history: PropTypes.object,\r\n  loginUser: PropTypes.func,\r\n  checkAuth: PropTypes.func,\r\n};\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Logout.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\Register.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\ForgetPassword.js",["918"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Row, Col, Alert, Container, CardBody, Card } from \"reactstrap\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// action\r\nimport { userForgetPassword } from \"../../store/actions\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\n\r\nconst ForgetPasswordPage = (props) => {\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  function handleValidSubmit(event, values) {\r\n    props.userForgetPassword(values, props.history);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"home-btn d-none d-sm-block\">\r\n          <Link to=\"/\" className=\"text-dark\">\r\n            <i className=\"mdi mdi-home-variant h2\"></i>\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"account-pages my-5  pt-sm-5\">\r\n          <Container>\r\n            <div className=\"row justify-content-center\">\r\n              <div className=\"col-md-8 col-lg-6 col-xl-5\">\r\n                <div>\r\n                  <Card>\r\n                    <CardBody className=\"p-4\">\r\n                      <div className=\"row\">\r\n                        <a href=\"/\" className=\"mb-3 d-block auth-logo\">\r\n                          <img\r\n                            src={logo}\r\n                            alt=\"\"\r\n                            height=\"22\"\r\n                            className=\"logo logo-dark\"\r\n                          />\r\n                          <img\r\n                            src={logolight}\r\n                            alt=\"\"\r\n                            height=\"22\"\r\n                            className=\"logo logo-light\"\r\n                          />\r\n                        </a>\r\n                      </div>\r\n                      <div className=\"text-center mt-2\">\r\n                        <h5 className=\"text-primary\">Reset Password</h5>\r\n                        <p className=\"text-muted\">\r\n                          Reset Password with Minible.\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"p-2 mt-4\">\r\n                        <div\r\n                          className=\"alert alert-success text-center mb-4\"\r\n                          role=\"alert\"\r\n                        >\r\n                          Enter your Email and instructions will be sent to you!\r\n                        </div>\r\n                        {props.forgetError && props.forgetError ? (\r\n                          <Alert\r\n                            color=\"danger\"\r\n                            className=\"text-center mb-4\"\r\n                            style={{ marginTop: \"13px\" }}\r\n                          >\r\n                            {props.forgetError}\r\n                          </Alert>\r\n                        ) : null}\r\n                        {props.forgetSuccessMsg ? (\r\n                          <Alert\r\n                            color=\"success\"\r\n                            className=\"text-center mb-4\"\r\n                            style={{ marginTop: \"13px\" }}\r\n                          >\r\n                            {props.forgetSuccessMsg}\r\n                          </Alert>\r\n                        ) : null}\r\n\r\n                        <AvForm\r\n                          className=\"form-horizontal\"\r\n                          onValidSubmit={(e, v) => handleValidSubmit(e, v)}\r\n                        >\r\n                          <div className=\"mb-3\">\r\n                            <AvField\r\n                              name=\"email\"\r\n                              label=\"Email\"\r\n                              className=\"form-control\"\r\n                              placeholder=\"Enter email\"\r\n                              type=\"email\"\r\n                              required\r\n                            />\r\n                          </div>\r\n                          <Row className=\"row mb-0\">\r\n                            <Col className=\"col-12 text-end\">\r\n                              <button\r\n                                className=\"btn btn-primary w-md waves-effect waves-light\"\r\n                                type=\"submit\"\r\n                              >\r\n                                Reset\r\n                              </button>\r\n                            </Col>\r\n                          </Row>\r\n                          <div className=\"mt-4 text-center\">\r\n                            <p className=\"mb-0\">\r\n                              Remember It ?{\" \"}\r\n                              <Link\r\n                                to=\"/login\"\r\n                                className=\"fw-medium text-primary\"\r\n                              >\r\n                                {\" \"}\r\n                                Signin{\" \"}\r\n                              </Link>\r\n                            </p>\r\n                          </div>\r\n                        </AvForm>\r\n                      </div>\r\n                    </CardBody>\r\n                  </Card>\r\n                  <div className=\"mt-5 text-center text-dark\">\r\n                    <p>\r\n                      ©{new Date().getFullYear()} Cococa Ecommerce Private\r\n                      Limited.\r\n                      <a\r\n                        href=\"https://srvinfotech.com\"\r\n                        target=\"_blank\"\r\n                        style={{ color: \"#343a40\" }}\r\n                      >\r\n                        &nbsp;Powered by SRV InfoTech\r\n                      </a>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nForgetPasswordPage.propTypes = {\r\n  forgetError: PropTypes.any,\r\n  forgetSuccessMsg: PropTypes.any,\r\n  history: PropTypes.object,\r\n  userForgetPassword: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { forgetError, forgetSuccessMsg } = state.ForgetPassword;\r\n  return { forgetError, forgetSuccessMsg };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, { userForgetPassword })(ForgetPasswordPage)\r\n);\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Login.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Recoverpw.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconMaterialdesign.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\Register.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AuthenticationInner\\auth-lock-screen.js",["919"],"import React, { useEffect, useState } from \"react\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\nimport { Container, Row, Col, CardBody, Card, Button } from \"reactstrap\";\r\n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\";\r\n\r\nconst LockScreen = (props) => {\r\n  const [username, setusername] = useState(\"Admin\");\r\n\r\n  useEffect(() => {\r\n    document.body.className = \"authentication-bg\";\r\n    // remove classname when component will unmount\r\n    return function cleanup() {\r\n      document.body.className = \"\";\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n      setusername(obj.firstName);\r\n    }\r\n  }, [props.success]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages-container\">\r\n        <div className=\"home-btn d-none d-sm-block\">\r\n          <Link to=\"/\" className=\"text-dark\">\r\n            <i className=\"fas fa-home h2\" />\r\n          </Link>\r\n        </div>\r\n        <div className=\"account-pages my-5 pt-sm-5\">\r\n          <Container>\r\n            <Row className=\"justify-content-center\">\r\n              <Col md={8} lg={6} xl={5}>\r\n                <Card>\r\n                  <CardBody className=\"p-4\">\r\n                    <div className=\"row\">\r\n                      <Link to=\"/\" className=\"mb-5 d-block auth-logo\">\r\n                        <img\r\n                          src={logo}\r\n                          alt=\"\"\r\n                          height=\"22\"\r\n                          className=\"logo logo-dark\"\r\n                        />\r\n                        <img\r\n                          src={logolight}\r\n                          alt=\"\"\r\n                          height=\"22\"\r\n                          className=\"logo logo-light\"\r\n                        />\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"text-center mt-2\">\r\n                      <h5 className=\"text-primary\">Lock screen</h5>\r\n                      <p className=\"text-muted\">\r\n                        Enter your password to unlock the screen!\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"p-2 mt-4\">\r\n                      <div className=\"user-thumb text-center mb-4\">\r\n                        <img\r\n                          src={avatar4}\r\n                          className=\"rounded-circle img-thumbnail avatar-lg\"\r\n                          alt=\"thumbnail\"\r\n                        />\r\n                        <h5 className=\"font-size-15 mt-3\">{username}</h5>\r\n                      </div>\r\n                      <AvForm>\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            required\r\n                            placeholder=\"Enter Password\"\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3 text-end\">\r\n                          <Button\r\n                            color=\"primary\"\r\n                            className=\"w-sm waves-effect waves-light\"\r\n                            type=\"submit\"\r\n                          >\r\n                            Unlock\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"mt-4 text-center\">\r\n                          <p className=\"mb-0\">\r\n                            Not you ? return\r\n                            <Link\r\n                              to=\"/login\"\r\n                              className=\"fw-medium text-primary\"\r\n                            >\r\n                              Sign In\r\n                            </Link>\r\n                          </p>\r\n                        </div>\r\n                      </AvForm>\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                <div className=\"mt-5 text-center text-white\">\r\n                  <p>\r\n                    © {new Date().getFullYear()} Cococa Ecommerce Private\r\n                    Limited.\r\n                    <a href=\"https://srvinfotech.com\" target=\"_blank\">\r\n                      &nbsp;Powered by SRV InfoTech\r\n                    </a>\r\n                  </p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, {})(withTranslation()(LockScreen))\r\n);\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\index.js",["920","921","922","923","924","925","926","927","928","929","930"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n\r\n  //getCustomerTypesOptions,\r\n  //getDesignationsOptions,\r\n  //getDistrictOptions,\r\n  //getLocalbodyOptions,\r\n  //getWardOptions,\r\n  //getPackageOptions,\r\n  //getBillingtypeOptions,\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n} from \"../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n//import \"./user.scss\";\r\n\r\nconst Customers = (props) => {\r\n  //edited\r\n\r\n  //const [selectedCustomerType,setSelectedCustomerType]=useState(null); \r\n  //const[selectedDesignation,setSelectedDesignation]=useState(null);\r\n  //const[selectedDistrict,setSelectedDistrict]=useState(null);\r\n  //const[selectedLocalbody,setSelectedLocalbody]=useState(null);\r\n  //const[selectedWard,setSelectedWard]=useState(null);\r\n  //const[selectedPackage,setSelectedPackage]=useState(null);\r\n  //const[selectedBillingtype,setSelectedBillingtype]=useState(null);\r\n  \r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n  \r\n\r\n  //edited\r\n  \r\n  // const customertypeOptions = useSelector(\r\n  //   (state)=> state.customertypes.customertypeOptions\r\n  // );\r\n\r\n  // const designationOptions = useSelector(\r\n  //   (state)=> state.designations.designationOptions\r\n  // );\r\n\r\n  // const districtOptions = useSelector(\r\n  //   (state)=> state.districts.districtOptions\r\n  // );\r\n\r\n  // const localbodyOptions = useSelector(\r\n  //   (state)=> state.localbodies.localbodyOptions\r\n  // );\r\n\r\n  // const WardOptions = useSelector(\r\n  //   (state)=> state.wards.wardsOptions\r\n  // );\r\n\r\n  // const PackageOptions = useSelector(\r\n  //   (state)=> state.packages.packageOptions\r\n  // );\r\n\r\n  // const BillingtypeOptions = useSelector(\r\n  //   (state)=> state.billingtypes.billingtypeOptions\r\n  // );\r\n\r\n\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //edited\r\n   //dispatch(getCustomerTypesOptions());\r\n    //dispatch(getDesignationOptions());\r\n    //dispatch(getDistrictOptions());\r\n    //dispatch(getLocalbodyOptions());\r\n    //dispatch(getWardOptions());\r\n    //dispatch(getPackageOptions());\r\n    //dispatch(getBillingtypeOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //edited\r\n      //setSelectedCustomerType(null);\r\n      //setSelectedDesignation(null);\r\n      //setSelectedDistrict(null);\r\n      //selectedLocalbody(null);\r\n      //selectedWard(null);\r\n      //selectedPackage(null);\r\n      //selectedBillingtype(null);\r\n\r\n\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  let preUpdateUser = (item) => {\r\n    //edited \r\n\r\n    // if (item.customertype) {\r\n    //   let customertype = {\r\n    //     label:item.customertype.name,\r\n    //     value: item.customertype._id,\r\n    //   };\r\n    //   handleSelectedCustomerType(customertype);\r\n    // }\r\n\r\n    // if (item.designation) {\r\n    //   let designation = {\r\n    //     label:item.designation.name,\r\n    //     value: item.designation._id,\r\n    //   };\r\n    //   handleSelectedDesignation(designation);\r\n    // }\r\n\r\n    // if (item.district) {\r\n    //   let district = {\r\n    //     label:item.district.name,\r\n    //     value: item.district._id,\r\n    //   };\r\n    //   handleSelectedDistrict(district);\r\n    // }\r\n\r\n    // if (item.localbody) {\r\n    //   let localbody = {\r\n    //     label:item.localbody.name,\r\n    //     value: item.localbody._id,\r\n    //   };\r\n    //   handleSelectedLocalbody(Localbody);\r\n    // }\r\n\r\n    // if (item.ward) {\r\n    //   let ward = {\r\n    //     label:item.ward.name,\r\n    //     value: item.ward._id,\r\n    //   };\r\n    //   handleSelectedWard(Ward);\r\n    // }\r\n\r\n    \r\n    // if (item.package) {\r\n    //   let package = {\r\n    //     label:item.package.name,\r\n    //     value: item.package._id,\r\n    //   };\r\n    //   handleSelectedPackage(package);\r\n    // }\r\n\r\n\r\n     // if (item.billingtype) {\r\n    //   let Billingtype = {\r\n    //     label:item.billingtype.name,\r\n    //     value: item.billingtype._id,\r\n    //   };\r\n    //   handleSelectedBillingtype(package);\r\n    // }\r\n\r\n\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setUserIdToBeUpdated(item._id);\r\n    setUserObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateUserPassword = (item) => {\r\n    setUserIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setUserIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      item.name1 = `${item.firstName} ${item.lastName}`;\r\n      item.privilage1 = item.privilage && item.privilage.name;\r\n      item.company1 = item.company && item.company.name;\r\n      item.branch1 = item.branch && item.branch.name;\r\n      userData.push(item);\r\n    });\r\n    setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n              {\r\n                label: \"#\",\r\n                field: \"id\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Reg No\",\r\n                field: \"regno\",\r\n                sort: \"asc\",\r\n                width: 400,\r\n              },\r\n              {\r\n                label: \"Type\",\r\n                field: \"type\",\r\n                sort: \"asc\",\r\n                width: 200,\r\n              },\r\n              {\r\n                label: \"Name\",\r\n                field: \"name\",\r\n                sort: \"asc\",\r\n                width: 200,\r\n              },\r\n              {\r\n                label: \"Phone\",\r\n                field: \"phone\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"District\",\r\n                field: \"district\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Localbody\",\r\n                field: \"localbody\",\r\n                sort: \"asc\",\r\n                width: 150,\r\n              },\r\n              {\r\n                label: \"Ward\",\r\n                field: \"ward\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Staff\",\r\n                field: \"staff\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Verification Status\",\r\n                field: \"verification status\",\r\n                sort: \"asc\",\r\n                width: 100,\r\n              },\r\n              {\r\n                label: \"Action\",\r\n                field: \"action\",\r\n                width: 300,\r\n              },\r\n            ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //edited \r\n  \r\n  //  let customerTypeOptionsData =\r\n  //     customertypeOptions &&\r\n  //     customertypeOptions.data &&\r\n  //     customertypeOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let designationData =\r\n  //     designationOptions &&\r\n  //     designationOptions.data &&\r\n  //     designationOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let districtData =\r\n  //     districtOptions &&\r\n  //     districtOptions.data &&\r\n  //     districtOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let localbodyData =\r\n  //     localbodyOptions &&\r\n  //     localbodyOptionsdata &&\r\n  //     localbodyOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let wardData =\r\n  //     wardOptions &&\r\n  //     wardOptionsdata &&\r\n  //     wardOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let packagaData =\r\n  //     packageOptions &&\r\n  //     packageOptionsdata &&\r\n  //     packageOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //  let billingtypeData =\r\n  //     billingtypeOptions &&\r\n  //     billingtypeOptionsdata &&\r\n  //     billingtypeOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n\r\n  let privilagesOptionsData =\r\n    privilagesOptions &&\r\n    privilagesOptions.data &&\r\n    privilagesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let companiesOptionsData =\r\n    companiesOptions &&\r\n    companiesOptions.data &&\r\n    companiesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n  let branchesOptionsData =\r\n    branchesOptions &&\r\n    branchesOptions.data &&\r\n    branchesOptions.data.map((item) => {\r\n      return {\r\n        label: item.name,\r\n        value: item._id,\r\n      };\r\n    });\r\n\r\n    //edited\r\n\r\n    // const customertypeOptionsGroup = [\r\n    //   {\r\n    //     options:customerTypeOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n\r\n    // const designationOptionsGroup = [\r\n    //   {\r\n    //     options:designationOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n   // const districtOptionsGroup = [\r\n    //   {\r\n    //     options:districtOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const localbodyOptionsGroup = [\r\n    //   {\r\n    //     options:localbodyOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const wardOptionsGroup = [\r\n    //   {\r\n    //     options:wardOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const packageOptionsGroup = [\r\n    //   {\r\n    //     options:packageOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n    // const billingtypeOptionsGroup = [\r\n    //   {\r\n    //     options:billingtypeOptionsData,\r\n    //   },\r\n    // ];\r\n\r\n  const privilagesOptionsGroup = [\r\n    {\r\n      options: privilagesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const companiesOptionsGroup = [\r\n    {\r\n      options: companiesOptionsData,\r\n    },\r\n  ];\r\n\r\n  const branchesOptionsGroup = [\r\n    {\r\n      options: branchesOptionsData,\r\n    },\r\n  ];\r\n\r\n  function handleChangeCustomer(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setUserObject({ ...userObject, [name]: value });\r\n  }\r\n\r\n  //edited\r\n\r\n  // function  handleSelectedCustomerType(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedCustomerType(value);\r\n  //   setUserObject({ ...userObject, customertype: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedDesignation(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedDesignation(value);\r\n  //   setUserObject({ ...userObject, designation: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedDistrict(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedDistrict(value);\r\n  //   setUserObject({ ...userObject, district: newValue });\r\n  // }\r\n\r\n  // function  handleSelectedLocalbody(value) {\r\n  //   let newValue = {\r\n  //     name: value.label,\r\n  //     _id: value.value,\r\n  //   };\r\n  //   setSelectedLocalbody(value);\r\n  //   setUserObject({ ...userObject, localbody: newValue });\r\n  // }\r\n\r\n   // function  handleSelectedWard(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedWard(value);\r\n    //   setUserObject({ ...userObject, ward: newValue });\r\n    // }\r\n\r\n    // function  handleSelectedPackage(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedPackage(value);\r\n    //   setUserObject({ ...userObject, package: newValue });\r\n    // }\r\n  \r\n    // function  handleSelectedBillingtype(value) {\r\n    //   let newValue = {\r\n    //     name: value.label,\r\n    //     _id: value.value,\r\n    //   };\r\n    //   setSelectedBillingtype(value);\r\n    //   setUserObject({ ...userObject, billingtype: newValue });\r\n    // }\r\n  \r\n  \r\n    function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setUserObject({ ...userObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setUserObject({ ...userObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setUserObject({ ...userObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    userIdTobeUpdated\r\n      ? dispatch(updateUser(userObject))\r\n      : dispatch(addUser(userObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: userIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateUser(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setUserIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteUser(userIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      <Modal\r\n        isOpen={showModal}\r\n        toggle={() => {\r\n          closeModal();\r\n        }}\r\n        centered={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">Confirmation</h5>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              closeModal();\r\n            }}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <AvForm\r\n          className=\"needs-validation\"\r\n          onValidSubmit={(e, v) => {\r\n            handleValidSubmitPassword(e, v);\r\n          }}\r\n        >\r\n          <div className=\"modal-body\">\r\n            {/* <Row>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                  <AvField\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please provide a valid password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.password}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <div className=\"mb-3\">\r\n                  <Label htmlFor=\"validationCustom05\">Confirm Password</Label>\r\n                  <AvField\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    type=\"password\"\r\n                    errorMessage=\" Please confirm the password\"\r\n                    className=\"form-control\"\r\n                    validate={{ required: { value: true } }}\r\n                    id=\"validationCustom05\"\r\n                    value={passwordObject.confirmPassword}\r\n                    onChange={handleChangePassword}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row> */}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              className=\"btn btn-dark\"\r\n              style={{ marginRight: \"1rem\" }}\r\n              onClick={closeModal}\r\n            >\r\n              Close\r\n            </button>\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Confirm\r\n            </button>\r\n          </div>\r\n        </AvForm>\r\n      </Modal>\r\n\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Customers\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                        <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Customer Type</Label>\r\n                           <Select\r\n                            name=\"customer type\"\r\n                             //edited \r\n                             //value={selectedCustomerType}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                             //edited \r\n                             //handleSelectedCustomerType(value);\r\n                             handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={customertypeOptionsGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Name</Label>\r\n                          <AvField\r\n                            name=\"Name\"\r\n                            placeholder=\"Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                            value={userObject.Name}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Phone</Label>\r\n                          <AvField\r\n                            name=\"phone\"\r\n                            placeholder=\"Phone\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid phone\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.phone}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">Land line number</Label>\r\n                          <AvField\r\n                            name=\"landnum\"\r\n                            placeholder=\"Land line number\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter valid number\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                            value={userObject.landlineno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Watsapp Number</Label>\r\n                          <AvField\r\n                            name=\"watsapp number\"\r\n                            placeholder=\"Watsapp number\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Watsapp number\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.watsappno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Email</Label>\r\n                          <AvField\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Email\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.email}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Address</Label>\r\n                          <AvField\r\n                            name=\"address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Address\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.address}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Address 1</Label>\r\n                          <AvField\r\n                            name=\"Address1\"\r\n                            placeholder=\"Address1\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Address1\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.address1}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">House No</Label>\r\n                          <AvField\r\n                            name=\"House no\"\r\n                            placeholder=\"House No\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter House no\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.houseno}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Number of Members</Label>\r\n                          <AvField\r\n                            name=\"Number of Members\"\r\n                            placeholder=\"Number of Members\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter number of members\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.noofmembers}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Designation</Label>\r\n                          <Select\r\n                            name=\"Designation\"\r\n                            //edited\r\n                            //value={selectedDesignation}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedDesignation(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={designationOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>District</Label>\r\n                          <Select\r\n                            name=\"District\"\r\n                            //edited\r\n                            //value={selectedDistrict}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedDistrict(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={districtOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Local Body</Label>\r\n                          <Select\r\n                            name=\"Local Body\"\r\n                            //edited\r\n                            //value={selectedLocalbody}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedLocalbody(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={localbodyOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Ward</Label>\r\n                          <Select\r\n                            name=\"Ward\"\r\n                            //edited\r\n                            //value={selectedWard}\r\n                            value={selectedPrivilage}\r\n                            onChange={(value) => {\r\n                              //edited\r\n                              //handleSelectedWard(value)\r\n                              handleSelectedPrivilage(value);\r\n                            }}\r\n                            //edited\r\n                            //options={wardOptionGroup}\r\n                            options={privilagesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Packages</Label>\r\n                          <Select\r\n                            name=\"Packages\"\r\n                            //edited\r\n                            //value={selectedPackage}\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedPackage(value)\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            //edited\r\n                            //options={packageOptionGroup}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Group</Label>\r\n                          <AvField\r\n                            name=\"Group\"\r\n                            placeholder=\"Group\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Group\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.group}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Latitude</Label>\r\n                          <AvField\r\n                            name=\"Latitude\"\r\n                            placeholder=\"Latitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Latitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.latitude}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Longitude</Label>\r\n                          <AvField\r\n                            name=\"Longitude\"\r\n                            placeholder=\"Longitude\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Longitude\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={userObject.longitude}\r\n                            onChange={handleChangeCustomer}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                       <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Building Image</Label>\r\n                          <AvField\r\n                            name=\"mobile_icon_svg\"\r\n                            id=\"mobile_icon_svg\"\r\n                            type=\"file\"\r\n                            errorMessage=\"Upload  Image\"\r\n                            className=\"form-control\"\r\n                            //onChange={onChangeHandler}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Billing Type</Label>\r\n                          <Select\r\n                            name=\"Billing Type\"\r\n                            //edited\r\n                            //value={selectedBillingtype}\r\n                            value={selectedCompany}\r\n                            onChange={(value) => {\r\n                               //edited\r\n                              //handleSelectedBillingtype(value)\r\n                              handleSelectedCompany(value);\r\n                            }}\r\n                            //edited\r\n                            //options={BillingtypeOptionGroup}\r\n                            options={companiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     \r\n                      {/* {userIdTobeUpdated ? null : (\r\n                          <Col md=\"3\">\r\n                          <div className=\"mb-3\">\r\n                            <Label htmlFor=\"validationCustom05\">Password</Label>\r\n                            <AvField\r\n                              name=\"password\"\r\n                              placeholder=\"Password\"\r\n                              type=\"password\"\r\n                              errorMessage=\" Please provide a valid password\"\r\n                              className=\"form-control\"\r\n                              validate={{ required: { value: true } }}\r\n                              id=\"validationCustom05\"\r\n                              value={userObject.password}\r\n                              onChange={handleChangeUser}\r\n                            />\r\n                          </div>\r\n                        </Col>\r\n                        \r\n                      )} */}\r\n                    </Row>\r\n\r\n                    {userIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingUser ? true : false}\r\n                      >\r\n                        {addingUser ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Customers));\r\n\r\nCustomers.propTypes = {\r\n  error: PropTypes.any,\r\n  users: PropTypes.array,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Icons\\IconFontawesome.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\Rightbar.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\reducer.js",["931","932","933","934"],"import {\r\n  GET_LOCALBODIES,\r\n  GET_LOCALBODIES_FAIL,\r\n  GET_LOCALBODIES_SUCCESS,\r\n  ADD_LOCALBODY,\r\n  ADD_LOCALBODY_FAIL,\r\n  ADD_LOCALBODY_SUCCESS,\r\n  DELETE_LOCALBODY,\r\n  DELETE_LOCALBODY_SUCCESS,\r\n  DELETE_LOCALBODY_FAIL,\r\n  UPDATE_LOCALBODY,\r\n  UPDATE_LOCALBODY_SUCCESS,\r\n  UPDATE_LOCALBODY_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  localbodies: [],\r\n  addingLocalbody: false,\r\n  deletingLocalbody: false,\r\n  addLocalbodyResponse: {},\r\n  updateLocalbodyResponse: {},\r\n  deleteLocalbodyResponse: {},\r\n  localbodyIdToBeDeleted: \"\",\r\n  localbody: {},\r\n  error: {},\r\n};\r\n\r\nconst Localbody = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_LOCALBODIES:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_LOCALBODIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        localbodies: action.payload.data,\r\n      };\r\n\r\n    case GET_LOCALBODIES_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        addingLocalbody: true,\r\n        localbody: action.payload,\r\n      };\r\n\r\n    case ADD_LOCALBODY_SUCCESS:\r\n      let newLocalbodys = [...state.localbodies, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingLocalbody: false,\r\n        addLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody added successfully\",\r\n        },\r\n        localbodies: newLocalbodys,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        addingLocalbody: false,\r\n        addLocalbodyResponse: { type: \"failure\", message: \"Adding localbody failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: true,\r\n        localbodyIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_LOCALBODY_SUCCESS:\r\n       let newLocalbodyss = state.localbodies.filter((item) => {\r\n        return item._id != state.localbodyIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: false,\r\n        localbodyIdToBeDeleted: \"\",\r\n        deletingLocalbody: false,\r\n        deleteLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody deleted successfully\",\r\n        },\r\n        localbodies: newLocalbodyss,\r\n      };\r\n\r\n    case DELETE_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingLocalbody: false,\r\n        deleteLocalbodyResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting localbody failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY:\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: true,\r\n        localbody: action.payload,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY_SUCCESS:\r\n      let newLocalbodysss = state.localbodies.map((item) => {\r\n        if (item._id == state.localbody._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: false,\r\n        localbody: \"\",\r\n        updatingLocalbody: false,\r\n        updateLocalbodyResponse: {\r\n          type: \"success\",\r\n          message: \"Localbody updated successfully\",\r\n        },\r\n        localbodies: newLocalbodysss,\r\n      };\r\n\r\n    case UPDATE_LOCALBODY_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingLocalbody: false,\r\n        updateLocalbodyResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating localbody failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Localbody;\r\n\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\saga.js",["935"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_LOCALBODY,\r\n  ADD_LOCALBODY,\r\n  DELETE_LOCALBODY,\r\n  UPDATE_LOCALBODY,\r\n  GET_LOCALBODIES,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getLocalbodiesSuccess,\r\n  getLocalbodiesFail,\r\n  getLocalbodySuccess,\r\n  getLocalbodyFail,\r\n  addLocalbodyFail,\r\n  addLocalbodySuccess,\r\n  updateLocalbodyFail,\r\n  updateLocalbodySuccess,\r\n  deleteLocalbodyFail,\r\n  deleteLocalbodySuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getLocalbodies,\r\n  getLocalbody,\r\n  addLocalbody,\r\n  updateLocalbody,\r\n  deleteLocalbody\r\n  \r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchLocalbodies() {\r\n  try {\r\n    const response = yield call(getLocalbodies);\r\n    yield put(getLocalbodiesSuccess(response));\r\n  } catch (error) {\r\n    yield put(getLocalbodiesFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetLocalbody() {\r\n  try {\r\n    const response = yield call(getLocalbody);\r\n    yield put(getLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(getLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddLocalbody({ payload: localbody }) {\r\n  try {\r\n    const response = yield call(addLocalbody, localbody);\r\n    yield put(addLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(addLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateLocalbody({ payload: localbody }) {\r\n  delete localbody.name1;\r\n  delete localbody.privilage1;\r\n  delete localbody.company1;\r\n  delete localbody.branch1;\r\n  delete localbody.action;\r\n  console.log(localbody);\r\n  if (localbody.privilage) {\r\n    localbody.privilage = localbody.privilage._id;\r\n  }\r\n  if (localbody.company) {\r\n    localbody.company = localbody.company._id;\r\n  }\r\n  if (localbody.branch) {\r\n    localbody.branch = localbody.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateLocalbody, localbody);\r\n    yield put(updateLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(updateLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteLocalbody({ payload: localbodyId }) {\r\n  try {\r\n    const response = yield call(deleteLocalbody, localbodyId);\r\n    yield put(deleteLocalbodySuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteLocalbodyFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* localbodySaga() {\r\n  yield takeEvery(GET_LOCALBODIES, fetchLocalbodies);\r\n  yield takeEvery(GET_LOCALBODY, onGetLocalbody);\r\n  yield takeEvery(ADD_LOCALBODY, onAddLocalbody);\r\n  yield takeEvery(UPDATE_LOCALBODY, onUpdateLocalbody);\r\n  yield takeEvery(DELETE_LOCALBODY, onDeleteLocalbody);\r\n}\r\n\r\nexport default localbodySaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\viewTariff\\index.js",["936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst ViewTraffic = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Customer ID\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Package\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Validity\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Basic fee\t\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAction\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"View Tariff\" />\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>District</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Localbody</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Package</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"3\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Status</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(ViewTraffic));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Customers\\QrCode\\index.js",["969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst QrCode = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Local Body\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Added By\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Qr Code\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Start</Label>\r\n                          <AvField\r\n                            name=\"Start\"\r\n                            placeholder=\"Start\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Start\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">End</Label>\r\n                          <AvField\r\n                            name=\"End\"\r\n                            placeholder=\"End\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter End\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"2\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Generate Qr Code\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(QrCode));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\MasterSettings\\Company\\index.js",["998","999"],"import React from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./company.scss\";\r\n\r\nconst DatatableTables = () => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Name\",\r\n        field: \"name\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Position\",\r\n        field: \"position\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Office\",\r\n        field: \"office\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Age\",\r\n        field: \"age\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Start date\",\r\n        field: \"date\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Salary\",\r\n        field: \"salary\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        name: \"Tiger Nixon\",\r\n        position: \"System Architect\",\r\n        office: \"Edinburgh\",\r\n        age: \"61\",\r\n        date: \"2011/04/25\",\r\n        salary: \"$320\",\r\n      },\r\n      {\r\n        name: \"Garrett Winters\",\r\n        position: \"Accountant\",\r\n        office: \"Tokyo\",\r\n        age: \"63\",\r\n        date: \"2011/07/25\",\r\n        salary: \"$170\",\r\n      },\r\n      {\r\n        name: \"Ashton Cox\",\r\n        position: \"Junior Technical Author\",\r\n        office: \"San Francisco\",\r\n        age: \"66\",\r\n        date: \"2009/01/12\",\r\n        salary: \"$86\",\r\n      },\r\n      {\r\n        name: \"Cedric Kelly\",\r\n        position: \"Senior Javascript Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"22\",\r\n        date: \"2012/03/29\",\r\n        salary: \"$433\",\r\n      },\r\n      {\r\n        name: \"Airi Satou\",\r\n        position: \"Accountant\",\r\n        office: \"Tokyo\",\r\n        age: \"33\",\r\n        date: \"2008/11/28\",\r\n        salary: \"$162\",\r\n      },\r\n      {\r\n        name: \"Brielle Williamson\",\r\n        position: \"Integration Specialist\",\r\n        office: \"New York\",\r\n        age: \"61\",\r\n        date: \"2012/12/02\",\r\n        salary: \"$372\",\r\n      },\r\n      {\r\n        name: \"Herrod Chandler\",\r\n        position: \"Sales Assistant\",\r\n        office: \"San Francisco\",\r\n        age: \"59\",\r\n        date: \"2012/08/06\",\r\n        salary: \"$137\",\r\n      },\r\n      {\r\n        name: \"Rhona Davidson\",\r\n        position: \"Integration Specialist\",\r\n        office: \"Tokyo\",\r\n        age: \"55\",\r\n        date: \"2010/10/14\",\r\n        salary: \"$327\",\r\n      },\r\n      {\r\n        name: \"Colleen Hurst\",\r\n        position: \"Javascript Developer\",\r\n        office: \"San Francisco\",\r\n        age: \"39\",\r\n        date: \"2009/09/15\",\r\n        salary: \"$205\",\r\n      },\r\n      {\r\n        name: \"Sonya Frost\",\r\n        position: \"Software Engineer\",\r\n        office: \"Edinburgh\",\r\n        age: \"23\",\r\n        date: \"2008/12/13\",\r\n        salary: \"$103\",\r\n      },\r\n      {\r\n        name: \"Jena Gaines\",\r\n        position: \"Office Manager\",\r\n        office: \"London\",\r\n        age: \"30\",\r\n        date: \"2008/12/19\",\r\n        salary: \"$90\",\r\n      },\r\n      {\r\n        name: \"Quinn Flynn\",\r\n        position: \"Support Lead\",\r\n        office: \"Edinburgh\",\r\n        age: \"22\",\r\n        date: \"2013/03/03\",\r\n        salary: \"$342\",\r\n      },\r\n      {\r\n        name: \"Charde Marshall\",\r\n        position: \"Regional Director\",\r\n        office: \"San Francisco\",\r\n        age: \"36\",\r\n        date: \"2008/10/16\",\r\n        salary: \"$470\",\r\n      },\r\n      {\r\n        name: \"Haley Kennedy\",\r\n        position: \"Senior Marketing Designer\",\r\n        office: \"London\",\r\n        age: \"43\",\r\n        date: \"2012/12/18\",\r\n        salary: \"$313\",\r\n      },\r\n      {\r\n        name: \"Tatyana Fitzpatrick\",\r\n        position: \"Regional Director\",\r\n        office: \"London\",\r\n        age: \"19\",\r\n        date: \"2010/03/17\",\r\n        salary: \"$385\",\r\n      },\r\n      {\r\n        name: \"Michael Silva\",\r\n        position: \"Marketing Designer\",\r\n        office: \"London\",\r\n        age: \"66\",\r\n        date: \"2012/11/27\",\r\n        salary: \"$198\",\r\n      },\r\n      {\r\n        name: \"Paul Byrd\",\r\n        position: \"Chief Financial Officer (CFO)\",\r\n        office: \"New York\",\r\n        age: \"64\",\r\n        date: \"2010/06/09\",\r\n        salary: \"$725\",\r\n      },\r\n      {\r\n        name: \"Gloria Little\",\r\n        position: \"Systems Administrator\",\r\n        office: \"New York\",\r\n        age: \"59\",\r\n        date: \"2009/04/10\",\r\n        salary: \"$237\",\r\n      },\r\n      {\r\n        name: \"Bradley Greer\",\r\n        position: \"Software Engineer\",\r\n        office: \"London\",\r\n        age: \"41\",\r\n        date: \"2012/10/13\",\r\n        salary: \"$132\",\r\n      },\r\n      {\r\n        name: \"Dai Rios\",\r\n        position: \"Personnel Lead\",\r\n        office: \"Edinburgh\",\r\n        age: \"35\",\r\n        date: \"2012/09/26\",\r\n        salary: \"$217\",\r\n      },\r\n      {\r\n        name: \"Jenette Caldwell\",\r\n        position: \"Development Lead\",\r\n        office: \"New York\",\r\n        age: \"30\",\r\n        date: \"2011/09/03\",\r\n        salary: \"$345\",\r\n      },\r\n      {\r\n        name: \"Yuri Berry\",\r\n        position: \"Chief Marketing Officer (CMO)\",\r\n        office: \"New York\",\r\n        age: \"40\",\r\n        date: \"2009/06/25\",\r\n        salary: \"$675\",\r\n      },\r\n      {\r\n        name: \"Caesar Vance\",\r\n        position: \"Pre-Sales Support\",\r\n        office: \"New York\",\r\n        age: \"21\",\r\n        date: \"2011/12/12\",\r\n        salary: \"$106\",\r\n      },\r\n      {\r\n        name: \"Doris Wilder\",\r\n        position: \"Sales Assistant\",\r\n        office: \"Sidney\",\r\n        age: \"23\",\r\n        date: \"2010/09/20\",\r\n        salary: \"$85\",\r\n      },\r\n      {\r\n        name: \"Angelica Ramos\",\r\n        position: \"Chief Executive Officer (CEO)\",\r\n        office: \"London\",\r\n        age: \"47\",\r\n        date: \"2009/10/09\",\r\n        salary: \"$1\",\r\n      },\r\n      {\r\n        name: \"Gavin Joyce\",\r\n        position: \"Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"42\",\r\n        date: \"2010/12/22\",\r\n        salary: \"$92\",\r\n      },\r\n      {\r\n        name: \"Jennifer Chang\",\r\n        position: \"Regional Director\",\r\n        office: \"Singapore\",\r\n        age: \"28\",\r\n        date: \"2010/11/14\",\r\n        salary: \"$357\",\r\n      },\r\n      {\r\n        name: \"Brenden Wagner\",\r\n        position: \"Software Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"28\",\r\n        date: \"2011/06/07\",\r\n        salary: \"$206\",\r\n      },\r\n      {\r\n        name: \"Fiona Green\",\r\n        position: \"Chief Operating Officer (COO)\",\r\n        office: \"San Francisco\",\r\n        age: \"48\",\r\n        date: \"2010/03/11\",\r\n        salary: \"$850\",\r\n      },\r\n      {\r\n        name: \"Shou Itou\",\r\n        position: \"Regional Marketing\",\r\n        office: \"Tokyo\",\r\n        age: \"20\",\r\n        date: \"2011/08/14\",\r\n        salary: \"$163\",\r\n      },\r\n      {\r\n        name: \"Michelle House\",\r\n        position: \"Integration Specialist\",\r\n        office: \"Sidney\",\r\n        age: \"37\",\r\n        date: \"2011/06/02\",\r\n        salary: \"$95\",\r\n      },\r\n      {\r\n        name: \"Suki Burks\",\r\n        position: \"Developer\",\r\n        office: \"London\",\r\n        age: \"53\",\r\n        date: \"2009/10/22\",\r\n        salary: \"$114\",\r\n      },\r\n      {\r\n        name: \"Prescott Bartlett\",\r\n        position: \"Technical Author\",\r\n        office: \"London\",\r\n        age: \"27\",\r\n        date: \"2011/05/07\",\r\n        salary: \"$145\",\r\n      },\r\n      {\r\n        name: \"Gavin Cortez\",\r\n        position: \"Team Leader\",\r\n        office: \"San Francisco\",\r\n        age: \"22\",\r\n        date: \"2008/10/26\",\r\n        salary: \"$235\",\r\n      },\r\n      {\r\n        name: \"Martena Mccray\",\r\n        position: \"Post-Sales support\",\r\n        office: \"Edinburgh\",\r\n        age: \"46\",\r\n        date: \"2011/03/09\",\r\n        salary: \"$324\",\r\n      },\r\n      {\r\n        name: \"Unity Butler\",\r\n        position: \"Marketing Designer\",\r\n        office: \"San Francisco\",\r\n        age: \"47\",\r\n        date: \"2009/12/09\",\r\n        salary: \"$85\",\r\n      },\r\n      {\r\n        name: \"Howard Hatfield\",\r\n        position: \"Office Manager\",\r\n        office: \"San Francisco\",\r\n        age: \"51\",\r\n        date: \"2008/12/16\",\r\n        salary: \"$164\",\r\n      },\r\n      {\r\n        name: \"Hope Fuentes\",\r\n        position: \"Secretary\",\r\n        office: \"San Francisco\",\r\n        age: \"41\",\r\n        date: \"2010/02/12\",\r\n        salary: \"$109\",\r\n      },\r\n      {\r\n        name: \"Vivian Harrell\",\r\n        position: \"Financial Controller\",\r\n        office: \"San Francisco\",\r\n        age: \"62\",\r\n        date: \"2009/02/14\",\r\n        salary: \"$452\",\r\n      },\r\n      {\r\n        name: \"Timothy Mooney\",\r\n        position: \"Office Manager\",\r\n        office: \"London\",\r\n        age: \"37\",\r\n        date: \"2008/12/11\",\r\n        salary: \"$136\",\r\n      },\r\n      {\r\n        name: \"Jackson Bradshaw\",\r\n        position: \"Director\",\r\n        office: \"New York\",\r\n        age: \"65\",\r\n        date: \"2008/09/26\",\r\n        salary: \"$645\",\r\n      },\r\n      {\r\n        name: \"Olivia Liang\",\r\n        position: \"Support Engineer\",\r\n        office: \"Singapore\",\r\n        age: \"64\",\r\n        date: \"2011/02/03\",\r\n        salary: \"$234\",\r\n      },\r\n      {\r\n        name: \"Bruno Nash\",\r\n        position: \"Software Engineer\",\r\n        office: \"London\",\r\n        age: \"38\",\r\n        date: \"2011/05/03\",\r\n        salary: \"$163\",\r\n      },\r\n      {\r\n        name: \"Sakura Yamamoto\",\r\n        position: \"Support Engineer\",\r\n        office: \"Tokyo\",\r\n        age: \"37\",\r\n        date: \"2009/08/19\",\r\n        salary: \"$139\",\r\n      },\r\n      {\r\n        name: \"Thor Walton\",\r\n        position: \"Developer\",\r\n        office: \"New York\",\r\n        age: \"61\",\r\n        date: \"2013/08/11\",\r\n        salary: \"$98\",\r\n      },\r\n      {\r\n        name: \"Finn Camacho\",\r\n        position: \"Support Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"47\",\r\n        date: \"2009/07/07\",\r\n        salary: \"$87\",\r\n      },\r\n      {\r\n        name: \"Serge Baldwin\",\r\n        position: \"Data Coordinator\",\r\n        office: \"Singapore\",\r\n        age: \"64\",\r\n        date: \"2012/04/09\",\r\n        salary: \"$138\",\r\n      },\r\n      {\r\n        name: \"Zenaida Frank\",\r\n        position: \"Software Engineer\",\r\n        office: \"New York\",\r\n        age: \"63\",\r\n        date: \"2010/01/04\",\r\n        salary: \"$125\",\r\n      },\r\n      {\r\n        name: \"Zorita Serrano\",\r\n        position: \"Software Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"56\",\r\n        date: \"2012/06/01\",\r\n        salary: \"$115\",\r\n      },\r\n      {\r\n        name: \"Jennifer Acosta\",\r\n        position: \"Junior Javascript Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"43\",\r\n        date: \"2013/02/01\",\r\n        salary: \"$75\",\r\n      },\r\n      {\r\n        name: \"Cara Stevens\",\r\n        position: \"Sales Assistant\",\r\n        office: \"New York\",\r\n        age: \"46\",\r\n        date: \"2011/12/06\",\r\n        salary: \"$145\",\r\n      },\r\n      {\r\n        name: \"Hermione Butler\",\r\n        position: \"Regional Director\",\r\n        office: \"London\",\r\n        age: \"47\",\r\n        date: \"2011/03/21\",\r\n        salary: \"$356\",\r\n      },\r\n      {\r\n        name: \"Lael Greer\",\r\n        position: \"Systems Administrator\",\r\n        office: \"London\",\r\n        age: \"21\",\r\n        date: \"2009/02/27\",\r\n        salary: \"$103\",\r\n      },\r\n      {\r\n        name: \"Jonas Alexander\",\r\n        position: \"Developer\",\r\n        office: \"San Francisco\",\r\n        age: \"30\",\r\n        date: \"2010/07/14\",\r\n        salary: \"$86\",\r\n      },\r\n      {\r\n        name: \"Shad Decker\",\r\n        position: \"Regional Director\",\r\n        office: \"Edinburgh\",\r\n        age: \"51\",\r\n        date: \"2008/11/13\",\r\n        salary: \"$183\",\r\n      },\r\n      {\r\n        name: \"Michael Bruce\",\r\n        position: \"Javascript Developer\",\r\n        office: \"Singapore\",\r\n        age: \"29\",\r\n        date: \"2011/06/27\",\r\n        salary: \"$183\",\r\n      },\r\n      {\r\n        name: \"Donna Snider\",\r\n        position: \"Customer Support\",\r\n        office: \"New York\",\r\n        age: \"27\",\r\n        date: \"2011/01/25\",\r\n        salary: \"$112\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Company\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"6\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">First name</Label>\r\n                          <AvField\r\n                            name=\"firstname\"\r\n                            placeholder=\"First name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter First Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"6\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Last name</Label>\r\n                          <AvField\r\n                            name=\"lastname\"\r\n                            placeholder=\"Last name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Last name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md=\"4\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">City</Label>\r\n                          <AvField\r\n                            name=\"city\"\r\n                            placeholder=\"City\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a valid city.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom03\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"4\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom04\">State</Label>\r\n                          <AvField\r\n                            name=\"state\"\r\n                            placeholder=\"State\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Please provide a valid state.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom04\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"4\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Zip</Label>\r\n                          <AvField\r\n                            name=\"zip\"\r\n                            placeholder=\"Zip Code\"\r\n                            type=\"text\"\r\n                            errorMessage=\" Please provide a valid zip.\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"form-check mb-3\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        value=\"\"\r\n                        id=\"invalidCheck\"\r\n                        required\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"invalidCheck\"\r\n                      >\r\n                        Agree to terms and conditions\r\n                      </label>\r\n                      <div className=\"invalid-feedback\">\r\n                        You must agree before submitting.\r\n                      </div>\r\n                    </div>\r\n                    <Button color=\"primary\" type=\"submit\">\r\n                      Submit\r\n                    </Button>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\MasterSettings\\Privilage\\index.js",["1000","1001"],"import React from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Label,\r\n  CardHeader,\r\n} from \"reactstrap\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport \"./previlage.scss\";\r\n\r\nconst DatatableTables = () => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"name\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Privilage Name\",\r\n        field: \"name\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Privilage Shortcode\",\r\n        field: \"position\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"office\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        name: \"1\",\r\n        position: \"System Architect\",\r\n        office: \"Edinburgh\",\r\n        age: \"61\",\r\n        date: \"2011/04/25\",\r\n        salary: \"$320\",\r\n      },\r\n      {\r\n        name: \"2\",\r\n        position: \"Accountant\",\r\n        office: \"Tokyo\",\r\n        age: \"63\",\r\n        date: \"2011/07/25\",\r\n        salary: \"$170\",\r\n      },\r\n      {\r\n        name: \"3\",\r\n        position: \"Junior Technical Author\",\r\n        office: \"San Francisco\",\r\n        age: \"66\",\r\n        date: \"2009/01/12\",\r\n        salary: \"$86\",\r\n      },\r\n      {\r\n        name: \"Cedric Kelly\",\r\n        position: \"Senior Javascript Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"22\",\r\n        date: \"2012/03/29\",\r\n        salary: \"$433\",\r\n      },\r\n      {\r\n        name: \"Airi Satou\",\r\n        position: \"Accountant\",\r\n        office: \"Tokyo\",\r\n        age: \"33\",\r\n        date: \"2008/11/28\",\r\n        salary: \"$162\",\r\n      },\r\n      {\r\n        name: \"Brielle Williamson\",\r\n        position: \"Integration Specialist\",\r\n        office: \"New York\",\r\n        age: \"61\",\r\n        date: \"2012/12/02\",\r\n        salary: \"$372\",\r\n      },\r\n      {\r\n        name: \"Herrod Chandler\",\r\n        position: \"Sales Assistant\",\r\n        office: \"San Francisco\",\r\n        age: \"59\",\r\n        date: \"2012/08/06\",\r\n        salary: \"$137\",\r\n      },\r\n      {\r\n        name: \"Rhona Davidson\",\r\n        position: \"Integration Specialist\",\r\n        office: \"Tokyo\",\r\n        age: \"55\",\r\n        date: \"2010/10/14\",\r\n        salary: \"$327\",\r\n      },\r\n      {\r\n        name: \"Colleen Hurst\",\r\n        position: \"Javascript Developer\",\r\n        office: \"San Francisco\",\r\n        age: \"39\",\r\n        date: \"2009/09/15\",\r\n        salary: \"$205\",\r\n      },\r\n      {\r\n        name: \"Sonya Frost\",\r\n        position: \"Software Engineer\",\r\n        office: \"Edinburgh\",\r\n        age: \"23\",\r\n        date: \"2008/12/13\",\r\n        salary: \"$103\",\r\n      },\r\n      {\r\n        name: \"Jena Gaines\",\r\n        position: \"Office Manager\",\r\n        office: \"London\",\r\n        age: \"30\",\r\n        date: \"2008/12/19\",\r\n        salary: \"$90\",\r\n      },\r\n      {\r\n        name: \"Quinn Flynn\",\r\n        position: \"Support Lead\",\r\n        office: \"Edinburgh\",\r\n        age: \"22\",\r\n        date: \"2013/03/03\",\r\n        salary: \"$342\",\r\n      },\r\n      {\r\n        name: \"Charde Marshall\",\r\n        position: \"Regional Director\",\r\n        office: \"San Francisco\",\r\n        age: \"36\",\r\n        date: \"2008/10/16\",\r\n        salary: \"$470\",\r\n      },\r\n      {\r\n        name: \"Haley Kennedy\",\r\n        position: \"Senior Marketing Designer\",\r\n        office: \"London\",\r\n        age: \"43\",\r\n        date: \"2012/12/18\",\r\n        salary: \"$313\",\r\n      },\r\n      {\r\n        name: \"Tatyana Fitzpatrick\",\r\n        position: \"Regional Director\",\r\n        office: \"London\",\r\n        age: \"19\",\r\n        date: \"2010/03/17\",\r\n        salary: \"$385\",\r\n      },\r\n      {\r\n        name: \"Michael Silva\",\r\n        position: \"Marketing Designer\",\r\n        office: \"London\",\r\n        age: \"66\",\r\n        date: \"2012/11/27\",\r\n        salary: \"$198\",\r\n      },\r\n      {\r\n        name: \"Paul Byrd\",\r\n        position: \"Chief Financial Officer (CFO)\",\r\n        office: \"New York\",\r\n        age: \"64\",\r\n        date: \"2010/06/09\",\r\n        salary: \"$725\",\r\n      },\r\n      {\r\n        name: \"Gloria Little\",\r\n        position: \"Systems Administrator\",\r\n        office: \"New York\",\r\n        age: \"59\",\r\n        date: \"2009/04/10\",\r\n        salary: \"$237\",\r\n      },\r\n      {\r\n        name: \"Bradley Greer\",\r\n        position: \"Software Engineer\",\r\n        office: \"London\",\r\n        age: \"41\",\r\n        date: \"2012/10/13\",\r\n        salary: \"$132\",\r\n      },\r\n      {\r\n        name: \"Dai Rios\",\r\n        position: \"Personnel Lead\",\r\n        office: \"Edinburgh\",\r\n        age: \"35\",\r\n        date: \"2012/09/26\",\r\n        salary: \"$217\",\r\n      },\r\n      {\r\n        name: \"Jenette Caldwell\",\r\n        position: \"Development Lead\",\r\n        office: \"New York\",\r\n        age: \"30\",\r\n        date: \"2011/09/03\",\r\n        salary: \"$345\",\r\n      },\r\n      {\r\n        name: \"Yuri Berry\",\r\n        position: \"Chief Marketing Officer (CMO)\",\r\n        office: \"New York\",\r\n        age: \"40\",\r\n        date: \"2009/06/25\",\r\n        salary: \"$675\",\r\n      },\r\n      {\r\n        name: \"Caesar Vance\",\r\n        position: \"Pre-Sales Support\",\r\n        office: \"New York\",\r\n        age: \"21\",\r\n        date: \"2011/12/12\",\r\n        salary: \"$106\",\r\n      },\r\n      {\r\n        name: \"Doris Wilder\",\r\n        position: \"Sales Assistant\",\r\n        office: \"Sidney\",\r\n        age: \"23\",\r\n        date: \"2010/09/20\",\r\n        salary: \"$85\",\r\n      },\r\n      {\r\n        name: \"Angelica Ramos\",\r\n        position: \"Chief Executive Officer (CEO)\",\r\n        office: \"London\",\r\n        age: \"47\",\r\n        date: \"2009/10/09\",\r\n        salary: \"$1\",\r\n      },\r\n      {\r\n        name: \"Gavin Joyce\",\r\n        position: \"Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"42\",\r\n        date: \"2010/12/22\",\r\n        salary: \"$92\",\r\n      },\r\n      {\r\n        name: \"Jennifer Chang\",\r\n        position: \"Regional Director\",\r\n        office: \"Singapore\",\r\n        age: \"28\",\r\n        date: \"2010/11/14\",\r\n        salary: \"$357\",\r\n      },\r\n      {\r\n        name: \"Brenden Wagner\",\r\n        position: \"Software Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"28\",\r\n        date: \"2011/06/07\",\r\n        salary: \"$206\",\r\n      },\r\n      {\r\n        name: \"Fiona Green\",\r\n        position: \"Chief Operating Officer (COO)\",\r\n        office: \"San Francisco\",\r\n        age: \"48\",\r\n        date: \"2010/03/11\",\r\n        salary: \"$850\",\r\n      },\r\n      {\r\n        name: \"Shou Itou\",\r\n        position: \"Regional Marketing\",\r\n        office: \"Tokyo\",\r\n        age: \"20\",\r\n        date: \"2011/08/14\",\r\n        salary: \"$163\",\r\n      },\r\n      {\r\n        name: \"Michelle House\",\r\n        position: \"Integration Specialist\",\r\n        office: \"Sidney\",\r\n        age: \"37\",\r\n        date: \"2011/06/02\",\r\n        salary: \"$95\",\r\n      },\r\n      {\r\n        name: \"Suki Burks\",\r\n        position: \"Developer\",\r\n        office: \"London\",\r\n        age: \"53\",\r\n        date: \"2009/10/22\",\r\n        salary: \"$114\",\r\n      },\r\n      {\r\n        name: \"Prescott Bartlett\",\r\n        position: \"Technical Author\",\r\n        office: \"London\",\r\n        age: \"27\",\r\n        date: \"2011/05/07\",\r\n        salary: \"$145\",\r\n      },\r\n      {\r\n        name: \"Gavin Cortez\",\r\n        position: \"Team Leader\",\r\n        office: \"San Francisco\",\r\n        age: \"22\",\r\n        date: \"2008/10/26\",\r\n        salary: \"$235\",\r\n      },\r\n      {\r\n        name: \"Martena Mccray\",\r\n        position: \"Post-Sales support\",\r\n        office: \"Edinburgh\",\r\n        age: \"46\",\r\n        date: \"2011/03/09\",\r\n        salary: \"$324\",\r\n      },\r\n      {\r\n        name: \"Unity Butler\",\r\n        position: \"Marketing Designer\",\r\n        office: \"San Francisco\",\r\n        age: \"47\",\r\n        date: \"2009/12/09\",\r\n        salary: \"$85\",\r\n      },\r\n      {\r\n        name: \"Howard Hatfield\",\r\n        position: \"Office Manager\",\r\n        office: \"San Francisco\",\r\n        age: \"51\",\r\n        date: \"2008/12/16\",\r\n        salary: \"$164\",\r\n      },\r\n      {\r\n        name: \"Hope Fuentes\",\r\n        position: \"Secretary\",\r\n        office: \"San Francisco\",\r\n        age: \"41\",\r\n        date: \"2010/02/12\",\r\n        salary: \"$109\",\r\n      },\r\n      {\r\n        name: \"Vivian Harrell\",\r\n        position: \"Financial Controller\",\r\n        office: \"San Francisco\",\r\n        age: \"62\",\r\n        date: \"2009/02/14\",\r\n        salary: \"$452\",\r\n      },\r\n      {\r\n        name: \"Timothy Mooney\",\r\n        position: \"Office Manager\",\r\n        office: \"London\",\r\n        age: \"37\",\r\n        date: \"2008/12/11\",\r\n        salary: \"$136\",\r\n      },\r\n      {\r\n        name: \"Jackson Bradshaw\",\r\n        position: \"Director\",\r\n        office: \"New York\",\r\n        age: \"65\",\r\n        date: \"2008/09/26\",\r\n        salary: \"$645\",\r\n      },\r\n      {\r\n        name: \"Olivia Liang\",\r\n        position: \"Support Engineer\",\r\n        office: \"Singapore\",\r\n        age: \"64\",\r\n        date: \"2011/02/03\",\r\n        salary: \"$234\",\r\n      },\r\n      {\r\n        name: \"Bruno Nash\",\r\n        position: \"Software Engineer\",\r\n        office: \"London\",\r\n        age: \"38\",\r\n        date: \"2011/05/03\",\r\n        salary: \"$163\",\r\n      },\r\n      {\r\n        name: \"Sakura Yamamoto\",\r\n        position: \"Support Engineer\",\r\n        office: \"Tokyo\",\r\n        age: \"37\",\r\n        date: \"2009/08/19\",\r\n        salary: \"$139\",\r\n      },\r\n      {\r\n        name: \"Thor Walton\",\r\n        position: \"Developer\",\r\n        office: \"New York\",\r\n        age: \"61\",\r\n        date: \"2013/08/11\",\r\n        salary: \"$98\",\r\n      },\r\n      {\r\n        name: \"Finn Camacho\",\r\n        position: \"Support Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"47\",\r\n        date: \"2009/07/07\",\r\n        salary: \"$87\",\r\n      },\r\n      {\r\n        name: \"Serge Baldwin\",\r\n        position: \"Data Coordinator\",\r\n        office: \"Singapore\",\r\n        age: \"64\",\r\n        date: \"2012/04/09\",\r\n        salary: \"$138\",\r\n      },\r\n      {\r\n        name: \"Zenaida Frank\",\r\n        position: \"Software Engineer\",\r\n        office: \"New York\",\r\n        age: \"63\",\r\n        date: \"2010/01/04\",\r\n        salary: \"$125\",\r\n      },\r\n      {\r\n        name: \"Zorita Serrano\",\r\n        position: \"Software Engineer\",\r\n        office: \"San Francisco\",\r\n        age: \"56\",\r\n        date: \"2012/06/01\",\r\n        salary: \"$115\",\r\n      },\r\n      {\r\n        name: \"Jennifer Acosta\",\r\n        position: \"Junior Javascript Developer\",\r\n        office: \"Edinburgh\",\r\n        age: \"43\",\r\n        date: \"2013/02/01\",\r\n        salary: \"$75\",\r\n      },\r\n      {\r\n        name: \"Cara Stevens\",\r\n        position: \"Sales Assistant\",\r\n        office: \"New York\",\r\n        age: \"46\",\r\n        date: \"2011/12/06\",\r\n        salary: \"$145\",\r\n      },\r\n      {\r\n        name: \"Hermione Butler\",\r\n        position: \"Regional Director\",\r\n        office: \"London\",\r\n        age: \"47\",\r\n        date: \"2011/03/21\",\r\n        salary: \"$356\",\r\n      },\r\n      {\r\n        name: \"Lael Greer\",\r\n        position: \"Systems Administrator\",\r\n        office: \"London\",\r\n        age: \"21\",\r\n        date: \"2009/02/27\",\r\n        salary: \"$103\",\r\n      },\r\n      {\r\n        name: \"Jonas Alexander\",\r\n        position: \"Developer\",\r\n        office: \"San Francisco\",\r\n        age: \"30\",\r\n        date: \"2010/07/14\",\r\n        salary: \"$86\",\r\n      },\r\n      {\r\n        name: \"Shad Decker\",\r\n        position: \"Regional Director\",\r\n        office: \"Edinburgh\",\r\n        age: \"51\",\r\n        date: \"2008/11/13\",\r\n        salary: \"$183\",\r\n      },\r\n      {\r\n        name: \"Michael Bruce\",\r\n        position: \"Javascript Developer\",\r\n        office: \"Singapore\",\r\n        age: \"29\",\r\n        date: \"2011/06/27\",\r\n        salary: \"$183\",\r\n      },\r\n      {\r\n        name: \"Donna Snider\",\r\n        position: \"Customer Support\",\r\n        office: \"New York\",\r\n        age: \"27\",\r\n        date: \"2011/01/25\",\r\n        salary: \"$112\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Privilage\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm className=\"needs-validation\">\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Previlage</Label>\r\n                          <AvField\r\n                            name=\"firstname\"\r\n                            placeholder=\"Privilage name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Previlage Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom02\">Shortcode</Label>\r\n                          <AvField\r\n                            name=\"lastname\"\r\n                            placeholder=\"Privilage Shortcode\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Privilage Shortcode\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom02\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle>View Privileges</CardTitle>\r\n                  <hr />\r\n                  <MDBDataTable responsive bordered data={data} />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DatatableTables;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\Vectormap.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\Common\\Breadcrumb.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapLayerControl.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\LayerGroup.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapMarkerCustomIcons.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapVectorLayers.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\MapWithPopup.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Maps\\LeafletMap\\SimpleMap.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\localbody\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\backend_helper.js",["1002"],"import axios from \"axios\";\r\nimport { post, del, get, put } from \"./api_helper\";\r\nimport * as url from \"./url_helper\";\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n  const user = localStorage.getItem(\"user\");\r\n  if (user) return JSON.parse(user);\r\n  return null;\r\n};\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n  return getLoggedInUser() !== null;\r\n};\r\n\r\n// Login Method\r\nconst login = (data) => post(url.POST_LOGIN, data);\r\n\r\nexport const checkAuth = (data) => post(url.CHECK_AUTH, data);\r\n\r\n// postForgetPwd\r\n// const postJwtForgetPwd = (data) =>\r\n//   post(url.POST_FAKE_JWT_PASSWORD_FORGET, data);\r\n\r\n// get Product detail\r\n// export const getProductDetail = (id) =>\r\n//   get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } });\r\n\r\nexport const getUserProfile = () => get(url.GET_USER_PROFILE);\r\n\r\n// get users\r\nexport const getUsers = () => get(url.GET_USERS);\r\n\r\n// add user\r\nexport const addUser = (user) => post(url.ADD_USER, user);\r\nexport const getUser = (userId) => get(url.GET_USER, userId);\r\nexport const updateUser = (user) => put(`${url.UPDATE_USER}/${user._id}`, user);\r\nexport const deleteUser = (userId) => del(url.DELETE_USER, userId);\r\n\r\n\r\n// get users\r\nexport const getDistricts = () => get(url.GET_DISTRICTS);\r\n\r\n// add user\r\nexport const addDistrict = (district) => post(url.ADD_DISTRICT, district);\r\nexport const getDistrict = (userId) => get(url.GET_DISTRICT, userId);\r\nexport const updateDistrict = (district) => put(`${url.UPDATE_DISTRICT}/${district._id}`, district);\r\nexport const deleteDistrict = (userId) => del(url.DELETE_DISTRICT, userId);\r\n\r\n// get wards\r\nexport const getWards  = () => get(url.GET_WARDS);\r\n\r\n// add ward\r\nexport const addWard = (ward) => post(url.ADD_WARD, ward);\r\nexport const getWard = (wardId) => get(url.GET_WARD, wardId);\r\nexport const updateWard = (ward) => put(`${url.UPDATE_WARD}/${ward._id}`, ward);\r\nexport const deleteWard = (wardId) => del(url.DELETE_WARD, wardId);\r\n\r\n\r\n// get localbodies\r\nexport const getLocalbodies  = () => get(url.GET_LOCALBODIES);\r\n\r\n// add localbodies\r\nexport const addLocalbody = (localbody) => post(url.ADD_LOCALBODY, localbody);\r\nexport const getLocalbody = (localbodyId) => get(url.GET_LOCALBODY, localbodyId);\r\nexport const updateLocalbody = (localbody) => put(`${url.UPDATE_LOCALBODY}/${localbody._id}`, localbody);\r\nexport const deleteLocalbody= (localbodyId) => del(url.DELETE_LOCALBODY, localbodyId);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// get privilages options\r\nexport const getPrivilagesOptions = () => get(url.GET_PRIVILAGES_OPTIONS);\r\n\r\n// get companies options\r\nexport const getCompaniesOptions = () => get(url.GET_COMPANIES_OPTIONS);\r\n\r\n// get Branches options\r\nexport const getBranchesOptions = (companyId) =>\r\n  get(`${url.GET_BRANCHES_OPTIONS}/${companyId}`, { companyId: companyId });\r\n\r\nexport { getLoggedInUser, isUserAuthenticated, login };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\knob\\knob.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\candlestickchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\bubblechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\scatterchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\doughnutchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\piechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linebarchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\linechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\echart\\gaugechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\actions.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dountchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\RadialChart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\PieChart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\LineColumnArea.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\barchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\ColumnWithDataLabels.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\apaexlinecolumn.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\SplineArea.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\dashedLine.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\apex\\chartapex.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\radarchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\polarchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\barchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\piechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\dountchart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\AllCharts\\chartjs\\linechart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\url_helper.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\api_helper.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\jwt-token-access\\accessToken.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\actionTypes.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slideindividual.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidedark.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithfade.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithindicator.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcaption.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slidewithcontrol.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Ui\\CarouselTypes\\slide.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Utility\\card-pricing.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js",["1003"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\n\r\n// users\r\nimport user4 from \"../../../assets/images/users/avatar-4.jpg\";\r\n\r\nconst ProfileMenu = (props) => {\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [menu, setMenu] = useState(false);\r\n\r\n  const [username, setusername] = useState(\"Admin\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n      setusername(obj.firstName);\r\n    }\r\n  }, [props.success]);\r\n\r\n  let logout = () => {\r\n    localStorage.removeItem(\"authUser\");\r\n    props.history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dropdown\r\n        isOpen={menu}\r\n        toggle={() => setMenu(!menu)}\r\n        className=\"d-inline-block\"\r\n      >\r\n        <DropdownToggle\r\n          className=\"btn header-item waves-effect\"\r\n          id=\"page-header-user-dropdown\"\r\n          tag=\"button\"\r\n        >\r\n          <img\r\n            className=\"rounded-circle header-profile-user\"\r\n            src={user4}\r\n            alt=\"Header Avatar\"\r\n          />\r\n          <span className=\"d-none d-xl-inline-block ms-1 fw-medium font-size-15\">\r\n            {username}\r\n          </span>{\" \"}\r\n          <i className=\"uil-angle-down d-none d-xl-inline-block font-size-15\"></i>\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"dropdown-menu-end\">\r\n          <DropdownItem tag=\"a\" href=\"/profile\">\r\n            {\" \"}\r\n            <i className=\"uil uil-user-circle font-size-18 align-middle text-muted me-1\"></i>\r\n            {props.t(\"View Profile\")}{\" \"}\r\n          </DropdownItem>\r\n          <DropdownItem tag=\"a\" href=\"/\">\r\n            <i className=\"uil uil-history font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"History\")}\r\n          </DropdownItem>\r\n          <DropdownItem tag=\"a\" href=\"#\">\r\n            <i className=\"uil uil-cog font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"Settings\")}\r\n            <span className=\"badge bg-soft-success rounded-pill mt-1 ms-2\">\r\n              03\r\n            </span>\r\n          </DropdownItem>\r\n          {/* <DropdownItem tag=\"a\" href=\"auth-lock-screen\">\r\n            <i className=\"uil uil-lock-alt font-size-18 align-middle me-1 text-muted\"></i>\r\n            {props.t(\"Lock screen\")}\r\n          </DropdownItem> */}\r\n          <div className=\"dropdown-divider\" />\r\n          <div\r\n            className=\"dropdown-item\"\r\n            onClick={logout}\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <i className=\"uil uil-sign-out-alt font-size-18 align-middle me-1 text-muted\"></i>\r\n            <span>{props.t(\"Logout\")}</span>\r\n          </div>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nProfileMenu.propTypes = {\r\n  success: PropTypes.any,\r\n  t: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, {})(withTranslation()(ProfileMenu))\r\n);\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\latest-transaction.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\socialsource.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\topuser.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\recent-activity.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\topselling-product.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\salesanalytics-chart.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Dashboard\\mini-widget.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\saga.js",["1004"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_DISTRICT,\r\n  ADD_DISTRICT,\r\n  DELETE_DISTRICT,\r\n  UPDATE_DISTRICT,\r\n  GET_DISTRICTS,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getDistrictsSuccess,\r\n  getDistrictsFail,\r\n  getDistrictSuccess,\r\n  getDistrictFail,\r\n  addDistrictFail,\r\n  addDistrictSuccess,\r\n  updateDistrictFail,\r\n  updateDistrictSuccess,\r\n  deleteDistrictFail,\r\n  deleteDistrictSuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getDistricts,\r\n  getDistrict,\r\n  addDistrict,\r\n  updateDistrict,\r\n  deleteDistrict,\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchDistricts() {\r\n  try {\r\n    const response = yield call(getDistricts);\r\n    yield put(getDistrictsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getDistrictsFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetDistrict() {\r\n  try {\r\n    const response = yield call(getDistrict);\r\n    yield put(getDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(getDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddDistrict({ payload: user }) {\r\n  try {\r\n    const response = yield call(addDistrict, user);\r\n    yield put(addDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(addDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateDistrict({ payload: user }) {\r\n  delete user.name1;\r\n  delete user.privilage1;\r\n  delete user.company1;\r\n  delete user.branch1;\r\n  delete user.action;\r\n  console.log(user);\r\n  if (user.privilage) {\r\n    user.privilage = user.privilage._id;\r\n  }\r\n  if (user.company) {\r\n    user.company = user.company._id;\r\n  }\r\n  if (user.branch) {\r\n    user.branch = user.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateDistrict, user);\r\n    yield put(updateDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteDistrict({ payload: userId }) {\r\n  try {\r\n    const response = yield call(deleteDistrict, userId);\r\n    yield put(deleteDistrictSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteDistrictFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* userSaga() {\r\n  yield takeEvery(GET_DISTRICTS, fetchDistricts);\r\n  yield takeEvery(GET_DISTRICT, onGetDistrict);\r\n  yield takeEvery(ADD_DISTRICT, onAddDistrict);\r\n  yield takeEvery(UPDATE_DISTRICT, onUpdateDistrict);\r\n  yield takeEvery(DELETE_DISTRICT, onDeleteDistrict);\r\n}\r\n\r\nexport default userSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\saga.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\saga.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\saga.js",["1005"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_WARD,\r\n  ADD_WARD,\r\n  DELETE_WARD,\r\n  UPDATE_WARD,\r\n  GET_WARDS,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getWardsSuccess,\r\n  getWardsFail,\r\n  getWardSuccess,\r\n  getWardFail,\r\n  addWardFail,\r\n  addWardSuccess,\r\n  updateWardFail,\r\n  updateWardSuccess,\r\n  deleteWardFail,\r\n  deleteWardSuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getWards,\r\n  getWard,\r\n  addWard,\r\n  updateWard,\r\n  deleteWard,\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchWards() {\r\n  try {\r\n    const response = yield call(getWards);\r\n    yield put(getWardsSuccess(response));\r\n  } catch (error) {\r\n    yield put(getWardsFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetWard() {\r\n  try {\r\n    const response = yield call(getWard);\r\n    yield put(getWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(getWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddWard({ payload: ward }) {\r\n  try {\r\n    const response = yield call(addWard, ward);\r\n    yield put(addWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(addWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateWard({ payload: ward }) {\r\n  delete ward.name1;\r\n  delete ward.privilage1;\r\n  delete ward.company1;\r\n  delete ward.branch1;\r\n  delete ward.action;\r\n  console.log(ward);\r\n  if (ward.privilage) {\r\n    ward.privilage = ward.privilage._id;\r\n  }\r\n  if (ward.company) {\r\n    ward.company = ward.company._id;\r\n  }\r\n  if (ward.branch) {\r\n    ward.branch = ward.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateWard, ward);\r\n    yield put(updateWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteWard({ payload: wardId }) {\r\n  try {\r\n    const response = yield call(deleteWard, wardId);\r\n    yield put(deleteWardSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteWardFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* wardSaga() {\r\n  yield takeEvery(GET_WARDS, fetchWards);\r\n  yield takeEvery(GET_WARD, onGetWard);\r\n  yield takeEvery(ADD_WARD, onAddWard);\r\n  yield takeEvery(UPDATE_WARD, onUpdateWard);\r\n  yield takeEvery(DELETE_WARD, onDeleteWard);\r\n}\r\n\r\nexport default wardSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\saga.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\saga.js",["1006"],"import { takeEvery, put, call, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  GET_USER,\r\n  ADD_USER,\r\n  DELETE_USER,\r\n  UPDATE_USER,\r\n  GET_USERS,\r\n} from \"./actionTypes\";\r\n\r\nimport {\r\n  getUsersSuccess,\r\n  getUsersFail,\r\n  getUserSuccess,\r\n  getUserFail,\r\n  addUserFail,\r\n  addUserSuccess,\r\n  updateUserFail,\r\n  updateUserSuccess,\r\n  deleteUserFail,\r\n  deleteUserSuccess,\r\n} from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport {\r\n  getUsers,\r\n  getUser,\r\n  addUser,\r\n  updateUser,\r\n  deleteUser,\r\n} from \"../../helpers/backend_helper\";\r\n\r\nfunction* fetchUsers() {\r\n  try {\r\n    const response = yield call(getUsers);\r\n    yield put(getUsersSuccess(response));\r\n  } catch (error) {\r\n    yield put(getUsersFail(error));\r\n  }\r\n}\r\n\r\nfunction* onGetUser() {\r\n  try {\r\n    const response = yield call(getUser);\r\n    yield put(getUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(getUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onAddUser({ payload: user }) {\r\n  try {\r\n    const response = yield call(addUser, user);\r\n    yield put(addUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(addUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onUpdateUser({ payload: user }) {\r\n  delete user.name1;\r\n  delete user.privilage1;\r\n  delete user.company1;\r\n  delete user.branch1;\r\n  delete user.action;\r\n  console.log(user);\r\n  if (user.privilage) {\r\n    user.privilage = user.privilage._id;\r\n  }\r\n  if (user.company) {\r\n    user.company = user.company._id;\r\n  }\r\n  if (user.branch) {\r\n    user.branch = user.branch._id;\r\n  }\r\n\r\n  try {\r\n    const response = yield call(updateUser, user);\r\n    yield put(updateUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(updateUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* onDeleteUser({ payload: userId }) {\r\n  try {\r\n    const response = yield call(deleteUser, userId);\r\n    yield put(deleteUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(deleteUserFail(error.response));\r\n  }\r\n}\r\n\r\nfunction* userSaga() {\r\n  yield takeEvery(GET_USERS, fetchUsers);\r\n  yield takeEvery(GET_USER, onGetUser);\r\n  yield takeEvery(ADD_USER, onAddUser);\r\n  yield takeEvery(UPDATE_USER, onUpdateUser);\r\n  yield takeEvery(DELETE_USER, onDeleteUser);\r\n}\r\n\r\nexport default userSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\saga.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\saga.js",["1007","1008","1009","1010","1011","1012","1013"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { EDIT_PROFILE } from \"./actionTypes\";\r\nimport { profileSuccess, profileError } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeProfile,\r\n  postJwtProfile,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\nfunction* editProfile({ payload: { user } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(\r\n  //       fireBaseBackend.editProfileAPI,\r\n  //       user.username,\r\n  //       user.idx\r\n  //     );\r\n  //     yield put(profileSuccess(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtProfile, \"/post-jwt-profile\", {\r\n  //       username: user.username,\r\n  //       idx: user.idx,\r\n  //     });\r\n  //     yield put(profileSuccess(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\r\n  //     const response = yield call(postFakeProfile, {\r\n  //       username: user.username,\r\n  //       idx: user.idx,\r\n  //     });\r\n  //     yield put(profileSuccess(response));\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(profileError(error));\r\n  // }\r\n}\r\nexport function* watchProfile() {\r\n  yield takeEvery(EDIT_PROFILE, editProfile);\r\n}\r\n\r\nfunction* ProfileSaga() {\r\n  yield all([fork(watchProfile)]);\r\n}\r\n\r\nexport default ProfileSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\saga.js",["1014","1015","1016","1017","1018","1019","1020"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { FORGET_PASSWORD } from \"./actionTypes\";\r\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeForgetPwd,\r\n  postJwtForgetPwd,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(fireBaseBackend.forgetPassword, user.email);\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\r\n  //       email: user.email,\r\n  //     });\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   } else {\r\n  //     const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\r\n  //       email: user.email,\r\n  //     });\r\n  //     if (response) {\r\n  //       yield put(\r\n  //         userForgetPasswordSuccess(\r\n  //           \"Reset link are sended to your mailbox, check there first\"\r\n  //         )\r\n  //       );\r\n  //     }\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(userForgetPasswordError(error));\r\n  // }\r\n}\r\n\r\nexport function* watchUserPasswordForget() {\r\n  yield takeEvery(FORGET_PASSWORD, forgetUser);\r\n}\r\n\r\nfunction* forgetPasswordSaga() {\r\n  yield all([fork(watchUserPasswordForget)]);\r\n}\r\n\r\nexport default forgetPasswordSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\saga.js",["1021","1022"],"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\n\r\n// Login Redux States\r\nimport { CHECK_AUTH, LOGIN_USER, LOGOUT_USER } from \"./actionTypes\";\r\nimport { apiError, loginSuccess } from \"./actions\";\r\nimport { login, checkAuth } from \"../../../helpers/backend_helper\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n//Include Both Helper File with needed methods\r\n\r\nfunction* loginUser({ payload: { user, history } }) {\r\n  try {\r\n    const response = yield call(login, {\r\n      username: user.username,\r\n      password: user.password,\r\n    });\r\n    yield put(loginSuccess());\r\n    localStorage.setItem(\"authUser\", JSON.stringify(response.data));\r\n    cookies.set(\"rememberMe\", \"true\", { path: \"/\" });\r\n    history.push(\"/dashboard\");\r\n    window.location.reload();\r\n  } catch (error) {\r\n    yield put(apiError(error.response));\r\n  }\r\n}\r\n\r\nfunction* checkAuthentication({ payload: history }) {\r\n  try {\r\n    let adminData = JSON.parse(localStorage.getItem(\"authUser\"));\r\n    const response = yield call(checkAuth, {\r\n      token: adminData.token,\r\n    });\r\n    history.push(\"/dashboard\");\r\n  } catch (error) {\r\n    localStorage.removeItem(\"authUser\");\r\n    history.push(\"/login\");\r\n  }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n  try {\r\n    localStorage.removeItem(\"authUser\");\r\n    history.push(\"/login\");\r\n  } catch (error) {\r\n    yield put(apiError(error));\r\n  }\r\n}\r\n\r\nfunction* authSaga() {\r\n  yield takeEvery(LOGIN_USER, loginUser);\r\n  yield takeEvery(LOGOUT_USER, logoutUser);\r\n  yield takeEvery(CHECK_AUTH, checkAuthentication);\r\n}\r\n\r\nexport default authSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\saga.js",["1023","1024","1025","1026","1027","1028","1029"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\r\n\r\n//Account Redux states\r\nimport { REGISTER_USER } from \"./actionTypes\";\r\nimport { registerUserSuccessful, registerUserFailed } from \"./actions\";\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\nimport {\r\n  postFakeRegister,\r\n  postJwtRegister,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\n// initialize relavant method of both Auth\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n// Is user register successfull then direct plot user in redux.\r\nfunction* registerUser({ payload: { user } }) {\r\n  // try {\r\n  //   if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n  //     const response = yield call(\r\n  //       fireBaseBackend.registerUser,\r\n  //       user.email,\r\n  //       user.password\r\n  //     );\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\r\n  //     const response = yield call(postJwtRegister, \"/post-jwt-register\", user);\r\n  //     console.log(response);\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\r\n  //     const response = yield call(postFakeRegister, user);\r\n  //     yield put(registerUserSuccessful(response));\r\n  //   }\r\n  // } catch (error) {\r\n  //   yield put(registerUserFailed(error));\r\n  // }\r\n}\r\n\r\nexport function* watchUserRegister() {\r\n  yield takeEvery(REGISTER_USER, registerUser);\r\n}\r\n\r\nfunction* accountSaga() {\r\n  yield all([fork(watchUserRegister)]);\r\n}\r\n\r\nexport default accountSaga;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\i18n.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\common\\languages.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\helpers\\firebase_helper.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\ward\\reducer.js",["1030","1031","1032","1033"],"import {\r\n  GET_WARDS,\r\n  GET_WARDS_FAIL,\r\n  GET_WARDS_SUCCESS,\r\n  ADD_WARD,\r\n  ADD_WARD_FAIL,\r\n  ADD_WARD_SUCCESS,\r\n  DELETE_WARD,\r\n  DELETE_WARD_SUCCESS,\r\n  DELETE_WARD_FAIL,\r\n  UPDATE_WARD,\r\n  UPDATE_WARD_SUCCESS,\r\n  UPDATE_WARD_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  wards: [],\r\n  addingWard: false,\r\n  deletingWard: false,\r\n  addWardResponse: {},\r\n  updateWardResponse: {},\r\n  deleteWardResponse: {},\r\n  wardIdToBeDeleted: \"\",\r\n  ward: {},\r\n  error: {},\r\n};\r\n\r\nconst Ward = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_WARDS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_WARDS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        wards: action.payload.data,\r\n      };\r\n\r\n    case GET_WARDS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_WARD:\r\n      return {\r\n        ...state,\r\n        addingWard: true,\r\n        ward: action.payload,\r\n      };\r\n\r\n    case ADD_WARD_SUCCESS:\r\n      let newWards = [...state.wards, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingWard: false,\r\n        addWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward added successfully\",\r\n        },\r\n        wards: newWards,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        addingWard: false,\r\n        addWardResponse: { type: \"failure\", message: \"Adding ward failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_WARD:\r\n      return {\r\n        ...state,\r\n        deletingWard: true,\r\n        wardIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_WARD_SUCCESS:\r\n       let newWardss = state.wards.filter((item) => {\r\n        return item._id != state.wardIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingWard: false,\r\n        wardIdToBeDeleted: \"\",\r\n        deletingWard: false,\r\n        deleteWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward deleted successfully\",\r\n        },\r\n        wards: newWardss,\r\n      };\r\n\r\n    case DELETE_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingWard: false,\r\n        deleteWardResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting ward failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_WARD:\r\n      return {\r\n        ...state,\r\n        updatingWard: true,\r\n        ward: action.payload,\r\n      };\r\n\r\n    case UPDATE_WARD_SUCCESS:\r\n      let newWardsss = state.wards.map((item) => {\r\n        if (item._id == state.ward._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingWard: false,\r\n        ward: \"\",\r\n        updatingWard: false,\r\n        updateWardResponse: {\r\n          type: \"success\",\r\n          message: \"Ward updated successfully\",\r\n        },\r\n        wards: newWardsss,\r\n      };\r\n\r\n    case UPDATE_WARD_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingWard: false,\r\n        updateWardResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating ward failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Ward;\r\n\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\district\\reducer.js",["1034","1035","1036","1037"],"import {\r\n  GET_DISTRICTS,\r\n  GET_DISTRICTS_FAIL,\r\n  GET_DISTRICTS_SUCCESS,\r\n  ADD_DISTRICT,\r\n  ADD_DISTRICT_FAIL,\r\n  ADD_DISTRICT_SUCCESS,\r\n  DELETE_DISTRICT,\r\n  DELETE_DISTRICT_SUCCESS,\r\n  DELETE_DISTRICT_FAIL,\r\n  UPDATE_DISTRICT,\r\n  UPDATE_DISTRICT_SUCCESS,\r\n  UPDATE_DISTRICT_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  districts: [],\r\n  addingDistrict: false,\r\n  deletingDistrict: false,\r\n  addDistrictResponse: {},\r\n  updateDistrictResponse: {},\r\n  deleteDistrictResponse: {},\r\n  districtIdToBeDeleted: \"\",\r\n  district: {},\r\n  error: {},\r\n};\r\n\r\nconst District = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_DISTRICTS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_DISTRICTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        districts: action.payload.data,\r\n      };\r\n\r\n    case GET_DISTRICTS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_DISTRICT:\r\n      return {\r\n        ...state,\r\n        addingDistrict: true,\r\n        district: action.payload,\r\n      };\r\n\r\n    case ADD_DISTRICT_SUCCESS:\r\n      let newUers = [...state.districts, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingDistrict: false,\r\n        addDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District added successfully\",\r\n        },\r\n        districts: newUers,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        addingDistrict: false,\r\n        addDistrictResponse: { type: \"failure\", message: \"Adding district failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_DISTRICT:\r\n      return {\r\n        ...state,\r\n        deletingDistrict: true,\r\n        districtIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_DISTRICT_SUCCESS:\r\n      let newDistricts = state.districts.filter((item) => {\r\n        return item._id != state.districtIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingDistrict: false,\r\n        districtIdToBeDeleted: \"\",\r\n        deletingDistrict: false,\r\n        deleteDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District deleted successfully\",\r\n        },\r\n        districts: newDistricts,\r\n      };\r\n\r\n    case DELETE_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingDistrict: false,\r\n        deleteDistrictResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting district failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_DISTRICT:\r\n      return {\r\n        ...state,\r\n        updatingDistrict: true,\r\n        district: action.payload,\r\n      };\r\n\r\n    case UPDATE_DISTRICT_SUCCESS:\r\n      let newDistricts1 = state.districts.map((item) => {\r\n        if (item._id == state.district._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingDistrict: false,\r\n        district: \"\",\r\n        updatingDistrict: false,\r\n        updateDistrictResponse: {\r\n          type: \"success\",\r\n          message: \"District updated successfully\",\r\n        },\r\n        districts: newDistricts1,\r\n      };\r\n\r\n    case UPDATE_DISTRICT_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingDistrict: false,\r\n        updateDistrictResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating district failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default District;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\branches\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\companies\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\privilages\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\profile\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\users\\reducer.js",["1038","1039","1040","1041"],"import {\r\n  GET_USERS,\r\n  GET_USERS_FAIL,\r\n  GET_USERS_SUCCESS,\r\n  ADD_USER,\r\n  ADD_USER_FAIL,\r\n  ADD_USER_SUCCESS,\r\n  DELETE_USER,\r\n  DELETE_USER_SUCCESS,\r\n  DELETE_USER_FAIL,\r\n  UPDATE_USER,\r\n  UPDATE_USER_SUCCESS,\r\n  UPDATE_USER_FAIL,\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  users: [],\r\n  addingUser: false,\r\n  deletingUser: false,\r\n  addUserResponse: {},\r\n  updateUserResponse: {},\r\n  deleteUserResponse: {},\r\n  userIdToBeDeleted: \"\",\r\n  user: {},\r\n  error: {},\r\n};\r\n\r\nconst User = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case GET_USERS:\r\n      return {\r\n        ...state,\r\n        params: action.payload,\r\n      };\r\n\r\n    case GET_USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        users: action.payload.data,\r\n      };\r\n\r\n    case GET_USERS_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case ADD_USER:\r\n      return {\r\n        ...state,\r\n        addingUser: true,\r\n        user: action.payload,\r\n      };\r\n\r\n    case ADD_USER_SUCCESS:\r\n      let newUers = [...state.users, action.payload.data];\r\n      return {\r\n        ...state,\r\n        addingUser: false,\r\n        addUserResponse: {\r\n          type: \"success\",\r\n          message: \"User added successfully\",\r\n        },\r\n        users: newUers,\r\n        error: {},\r\n      };\r\n\r\n    case ADD_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        addingUser: false,\r\n        addUserResponse: { type: \"failure\", message: \"Adding user failed\" },\r\n        error: action.payload,\r\n      };\r\n    case DELETE_USER:\r\n      return {\r\n        ...state,\r\n        deletingUser: true,\r\n        userIdToBeDeleted: action.payload,\r\n      };\r\n\r\n    case DELETE_USER_SUCCESS:\r\n      let newUsers = state.users.filter((item) => {\r\n        return item._id != state.userIdToBeDeleted;\r\n      });\r\n      return {\r\n        ...state,\r\n        deletingUser: false,\r\n        userIdToBeDeleted: \"\",\r\n        deletingUser: false,\r\n        deleteUserResponse: {\r\n          type: \"success\",\r\n          message: \"User deleted successfully\",\r\n        },\r\n        users: newUsers,\r\n      };\r\n\r\n    case DELETE_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        deletingUser: false,\r\n        deleteUserResponse: {\r\n          type: \"failure\",\r\n          message: \"Deleting user failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    case UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        updatingUser: true,\r\n        user: action.payload,\r\n      };\r\n\r\n    case UPDATE_USER_SUCCESS:\r\n      let newUsers1 = state.users.map((item) => {\r\n        if (item._id == state.user._id) {\r\n          return action.payload.data;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        updatingUser: false,\r\n        user: \"\",\r\n        updatingUser: false,\r\n        updateUserResponse: {\r\n          type: \"success\",\r\n          message: \"User updated successfully\",\r\n        },\r\n        users: newUsers1,\r\n      };\r\n\r\n    case UPDATE_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        updatingUser: false,\r\n        updateUserResponse: {\r\n          type: \"failure\",\r\n          message: \"Updating user failed\",\r\n        },\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default User;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\register\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\forgetpwd\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\auth\\login\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\store\\layout\\reducer.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\HorizontalLayout\\Navbar.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Sidebar.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Footer.js",["1042"],"import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <footer className=\"footer\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col sm={6}>\r\n              <p>\r\n                ©{new Date().getFullYear()} Hazel Green.\r\n              </p>\r\n            </Col>\r\n            <Col sm={6}>\r\n              <div className=\"text-sm-end d-none d-sm-block\">\r\n                <p style={{ color: \"#74788d\" }}>\r\n                  <a\r\n                    href=\"https://srvinfotech.com\"\r\n                    target=\"_blank\"\r\n                    style={{ color: \"#74788d\" }}\r\n                  >\r\n                    &nbsp;Powered by SRV InfoTech\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\Header.js",["1043"],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Input, Button, Row, Col } from \"reactstrap\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Reactstrap\r\nimport { Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\";\r\n\r\n// Import menuDropdown\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\n\r\n// Import components\r\nimport MegaMenu from \"../MegaMenu/MegaMenu\";\r\n\r\nimport logoSm from \"../../assets/images/logo-sm.svg\";\r\nimport logoDark from \"../../assets/images/logo-dark.png\";\r\nimport logoLight from \"../../assets/images/logo-light.png\";\r\n\r\n// import images\r\nimport github from \"../../assets/images/brands/github.png\";\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\";\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\";\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\";\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\";\r\nimport slack from \"../../assets/images/brands/slack.png\";\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n// Redux Store\r\nimport {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n} from \"../../store/actions\";\r\n\r\nconst Header = (props) => {\r\n  const [search, setsearch] = useState(false);\r\n  const [socialDrp, setsocialDrp] = useState(false);\r\n  const [showMegaMenu, setShowMegaMenu] = useState(false);\r\n\r\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n  function toggleFullscreen() {\r\n    if (\r\n      !document.fullscreenElement &&\r\n      /* alternative standard method */ !document.mozFullScreenElement &&\r\n      !document.webkitFullscreenElement\r\n    ) {\r\n      // current working methods\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) {\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) {\r\n        document.documentElement.webkitRequestFullscreen(\r\n          Element.ALLOW_KEYBOARD_INPUT\r\n        );\r\n      }\r\n    } else {\r\n      if (document.cancelFullScreen) {\r\n        document.cancelFullScreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitCancelFullScreen) {\r\n        document.webkitCancelFullScreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  function tToggle() {\r\n    if (!isMobile) {\r\n      var body = document.body;\r\n      body.classList.toggle(\"vertical-collpsed\");\r\n      body.classList.toggle(\"sidebar-enable\");\r\n    }\r\n\r\n    props.toggleLeftmenu(!props.leftMenu);\r\n    if (props.leftSideBarType === \"default\") {\r\n      props.changeSidebarType(\"condensed\", isMobile);\r\n    } else if (props.leftSideBarType === \"condensed\") {\r\n      props.changeSidebarType(\"default\", isMobile);\r\n    }\r\n  }\r\n\r\n  function toggleMegaMenu() {\r\n    setShowMegaMenu(!showMegaMenu);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showMegaMenu ? <MegaMenu /> : null}\r\n      <header id=\"page-topbar\">\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\">\r\n              <Link to=\"/\" className=\"logo logo-dark\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSm} alt=\"\" height=\"22\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoDark} alt=\"\" height=\"20\" />\r\n                </span>\r\n              </Link>\r\n\r\n              <Link to=\"/\" className=\"logo logo-light\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSm} alt=\"\" height=\"22\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoLight} alt=\"\" height=\"20\" />\r\n                </span>\r\n              </Link>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                tToggle();\r\n              }}\r\n              className=\"btn btn-sm px-3 font-size-16 header-item waves-effect vertical-menu-btn\"\r\n              id=\"vertical-menu-btn\"\r\n            >\r\n              <i className=\"fa fa-fw fa-bars\" />\r\n            </button>\r\n\r\n            {/* <div\r\n              className=\"app-search d-none d-lg-block mt-2\"\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <div\r\n                className=\"position-relative\"\r\n                onClick={() => toggleMegaMenu()}\r\n              >\r\n                Mega Menu\r\n                <i class=\"fas fa-sort-down\"></i>\r\n              </div>\r\n            </div> */}\r\n\r\n            <Form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={props.t(\"Search\") + \"...\"}\r\n                />\r\n                <span className=\"uil-search\"></span>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n\r\n          <div className=\"d-flex\">\r\n            <Dropdown\r\n              className=\"d-inline-block d-lg-none ms-2\"\r\n              onClick={() => {\r\n                setsearch(!search);\r\n              }}\r\n              type=\"button\"\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                id=\"page-header-search-dropdown\"\r\n                tag=\"button\"\r\n              >\r\n                {\" \"}\r\n                <i className=\"uil-search\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\r\n                <Form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Search ...\"\r\n                        aria-label=\"Recipient's username\"\r\n                      />\r\n                      <div className=\"input-group-append\">\r\n                        <Button className=\"btn btn-primary\" type=\"submit\">\r\n                          <i className=\"mdi mdi-magnify\"></i>\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Form>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <Dropdown\r\n              className=\"d-none d-lg-inline-block ms-1\"\r\n              isOpen={socialDrp}\r\n              toggle={() => {\r\n                setsocialDrp(!socialDrp);\r\n              }}\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                tag=\"button\"\r\n              >\r\n                <i className=\"uil-apps\"></i>\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                className=\"dropdown-menu-lg dropdown-menu-end\"\r\n                right\r\n              >\r\n                <div className=\"px-lg-2\">\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={github} alt=\"Github\" />\r\n                        <span>GitHub</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={bitbucket} alt=\"bitbucket\" />\r\n                        <span>Bitbucket</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dribbble} alt=\"dribbble\" />\r\n                        <span>Dribbble</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dropbox} alt=\"dropbox\" />\r\n                        <span>Dropbox</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                        <span>Mail Chimp</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={slack} alt=\"slack\" />\r\n                        <span>Slack</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <Dropdown className=\"d-none d-lg-inline-block ms-1\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  toggleFullscreen();\r\n                }}\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                data-toggle=\"fullscreen\"\r\n              >\r\n                <i className=\"uil-minus-path\"></i>\r\n              </button>\r\n            </Dropdown>\r\n\r\n            <NotificationDropdown />\r\n\r\n            <div\r\n              // onClick={() => {\r\n              //   props.showRightSidebarAction(!props.showRightSidebar);\r\n              // }}\r\n              className=\"dropdown d-inline-block\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n              >\r\n                <i className=\"uil-cog\"></i>\r\n              </button>\r\n            </div>\r\n\r\n            <ProfileMenu />\r\n\r\n            <Link to=\"/logout\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\r\n              >\r\n                <i\r\n                  class=\"fas fa-power-off\"\r\n                  style={{\r\n                    fontSize: \"1.2em\",\r\n                  }}\r\n                ></i>\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  changeSidebarType: PropTypes.func,\r\n  leftMenu: PropTypes.any,\r\n  leftSideBarType: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { layoutType, showRightSidebar, leftMenu, leftSideBarType } =\r\n    state.Layout;\r\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType };\r\n};\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n})(withTranslation()(Header));\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Authentication\\user-profile.js",["1044"],"import PropTypes from \"prop-types\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Alert,\r\n  CardBody,\r\n  Media,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\r\n\r\nimport avatar from \"../../assets/images/users/avatar-1.jpg\";\r\n// actions\r\nimport { editProfile, resetProfileFlag } from \"../../store/actions\";\r\n\r\nconst UserProfile = (props) => {\r\n  const [email, setemail] = useState(\"\");\r\n  const [name, setname] = useState(\"\");\r\n  const [mobile, setmobile] = useState(\"\");\r\n\r\n  const [userId, setUserId] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      const obj = JSON.parse(localStorage.getItem(\"authUser\"));\r\n\r\n      setname(obj.username);\r\n      setemail(obj.email);\r\n      setmobile(obj.mobile);\r\n      setUserId(obj.userId);\r\n\r\n      setTimeout(() => {\r\n        props.resetProfileFlag();\r\n      }, 3000);\r\n    }\r\n  }, [props.success, props]);\r\n\r\n  function handleValidSubmit(event, values) {\r\n    props.editProfile(values);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          {/* Render Breadcrumb */}\r\n          <Breadcrumb title=\"Minible\" breadcrumbItem=\"Profile\" />\r\n\r\n          <Row>\r\n            <Col lg=\"12\">\r\n              {props.error && props.error ? (\r\n                <Alert color=\"danger\">{props.error}</Alert>\r\n              ) : null}\r\n              {props.success && props.success ? (\r\n                <Alert color=\"success\">{props.success}</Alert>\r\n              ) : null}\r\n\r\n              <Card>\r\n                <CardBody>\r\n                  <Media className=\"d-flex\">\r\n                    <div className=\"ms-3\">\r\n                      <img\r\n                        src={avatar}\r\n                        alt=\"\"\r\n                        className=\"avatar-md rounded-circle img-thumbnail\"\r\n                      />\r\n                    </div>\r\n                    <Media body className=\"flex-1 align-self-center\">\r\n                      <div className=\"text-muted\">\r\n                        <h5>{name}</h5>\r\n                        <p className=\"mb-1\">{email}</p>\r\n                        <p className=\"mb-0\">Id no: #{userId}</p>\r\n                      </div>\r\n                    </Media>\r\n                  </Media>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <h4 className=\"card-title mb-4\">Change User Name</h4>\r\n\r\n          <Card>\r\n            <CardBody>\r\n              <AvForm\r\n                className=\"form-horizontal\"\r\n                onValidSubmit={(e, v) => {\r\n                  handleValidSubmit(e, v);\r\n                }}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <AvField\r\n                    name=\"username\"\r\n                    label=\"User Name\"\r\n                    value={name}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter User Name\"\r\n                    type=\"text\"\r\n                    required\r\n                  />\r\n                  <AvField name=\"userId\" value={userId} type=\"hidden\" />\r\n                </div>\r\n                <div className=\"text-center mt-4\">\r\n                  <Button type=\"submit\" color=\"danger\">\r\n                    Update User Name\r\n                  </Button>\r\n                </div>\r\n              </AvForm>\r\n            </CardBody>\r\n          </Card>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUserProfile.propTypes = {\r\n  editProfile: PropTypes.func,\r\n  error: PropTypes.any,\r\n  success: PropTypes.any,\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { error, success } = state.Profile;\r\n  return { error, success };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, { editProfile, resetProfileFlag })(UserProfile)\r\n);\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Invoice\\ViewInvoice\\index.js",["1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst ViewInvoice = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n \t\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \" Customer ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"State\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tGroup\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Ward\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Invoice Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Paid Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Due\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"View Invoice\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>District</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Ward</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Group</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"success\" type=\"submit\">\r\n                            Export\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          {/* <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                 \r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row> */}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(ViewInvoice));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\VerticalLayout\\SidebarContent.js",[],"C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Package\\AddWaste\\index.js",["1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n  Modal,\r\n  Table,\r\n  Progress,\r\n} from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AddWaste = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState();\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Waste item\t \",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n\r\n      {\r\n        label: \"Category\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n\r\n      {\r\n        label: \"Type\t\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Bags\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"kg\t\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Amount\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Image\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Staff\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Active/Inactive\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Add Waste\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Waste Item</Label>\r\n                          <AvField\r\n                            name=\"WasteItem\"\r\n                            placeholder=\"Start\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Waste Item\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Waste Category</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Waste Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            No. of Pages\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"Pages\"\r\n                            placeholder=\"No. of Pages\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter No. of Pages\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">No. of Kg</Label>\r\n                          <AvField\r\n                            name=\"Kg\"\r\n                            placeholder=\"No. of Kg\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter No. of Kg\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"Amount\"\r\n                            placeholder=\"Amount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom03\">\r\n                             Image\r\n                          </Label>\r\n\r\n                          {/* {productObject.product_image_main &&\r\n                          productObject.product_image_main.length > 2 ? ( */}\r\n                            {/* <div className=\"img-wraps\"> */}\r\n                              {/* {productObject.product_image_main &&\r\n                              productObject.product_image_main.startsWith(\r\n                                'http'\r\n                              ) ? (\r\n                                <img\r\n                                  className=\"img-thumbnail\"\r\n                                  alt=\"\"\r\n                                  width=\"200\"\r\n                                //   src={`${productObject.product_image_main}`}\r\n                                />\r\n                              ) : (\r\n                                <img\r\n                                  className=\"img-thumbnail\"\r\n                                  alt=\"\"\r\n                                  width=\"200\"\r\n                                //   src={`${API_URL}public/uploads/product-images/${productObject.product_image_main}`}\r\n                                />\r\n                              )}\r\n\r\n                              <button\r\n                                className=\"btn btn-danger btn-sm btn-block waves-effect waves-light btn btn-danger\"\r\n                                // onClick={deleteProductImage}\r\n                                style={{ width: '200px' }}\r\n                              >\r\n                                Delete\r\n                              </button>\r\n                            </div>\r\n                          ) : ( */}\r\n                            <AvField\r\n                              name=\"product_image_main\"\r\n                              type=\"file\"\r\n                              errorMessage=\"Select Image\"\r\n                              className=\"form-control\"\r\n                              id=\"validationCustom04\"\r\n                              //  id=\"getFile\" style={{display:\"none\"}}\r\n                              // onChange={handleChangeInput}\r\n                            //   onChange={uploadImage}\r\n                            />\r\n                           {/* )} */}\r\n\r\n                          {uploadProgress && uploadProgress < 100 && (\r\n                            <div className=\"mt-4\">\r\n                              {' '}\r\n                              <Progress color=\"primary\" value={uploadProgress}>\r\n                                Uploading {uploadProgress}%\r\n                              </Progress>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AddWaste));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Invoice\\AutoInvoice\\index.js",["1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AutoInvoice = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"\tInvoice No\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Customer ID\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Name\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"State\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Group\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Ward\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tAmount\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Transaction Log\" />\r\n\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Group</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Staff</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <Col md=\"1\">\r\n                  <div className=\"mt-4\">\r\n                    <Button color=\"success\" type=\"submit\">\r\n                      Export\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AutoInvoice));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Package\\AddTariff\\index.js",["1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Label,\r\n  Modal,\r\n  Table,\r\n} from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AddTariff = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  const [values, setValues] = useState([{}]);\r\n\r\n  const addMore = () => {\r\n    setValues([...values, {}]);\r\n  };\r\n\r\n  const handleRemove = (index) => {\r\n    const list = [...values];\r\n    list.splice(index, 1);\r\n    setValues(list);\r\n  };\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-eye\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Localbody Type \",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n\r\n      {\r\n        label: \"Localbody Name\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n\r\n      {\r\n        label: \"Package\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Category\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Reg.Fee\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Basic Fee\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Package Validity in Days\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Visit/Month\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Free Bags\t\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Add tariff\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Localbody</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Package Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"Start\"\r\n                            placeholder=\"Start\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Start\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Category</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Registration Fee\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"RegistrationFee\"\r\n                            placeholder=\"Registration Fee\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Registration Fee\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Basic Fee</Label>\r\n                          <AvField\r\n                            name=\"BasicFee\"\r\n                            placeholder=\"Basic Fee\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Basic Fee\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Package Validity in Days\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"package validity\"\r\n                            placeholder=\"Package Validity in Days\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Package Validity in Days\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Visit/Month\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"visit\"\r\n                            placeholder=\"Visit/Monthnd\"\r\n                            type=\"number\"\r\n                            errorMessage=\"Enter Visit/Month\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <div className=\"container\">\r\n                          <Table className=\"table table-bordered mb-0\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th>#</th>\r\n                                <th>Waste Item</th>\r\n                                <th>Free Bags</th>\r\n\r\n                                {values.length !== 1 ? <th>Action</th> : null}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {values.map((item, index) => {\r\n                                return (\r\n                                  <tr>\r\n                                    <td>{index + 1}</td>\r\n\r\n                                    <td>\r\n                                      {\" \"}\r\n                                      <div className=\"mb-3\">\r\n                                        <Select\r\n                                          name=\"customer_community_id\"\r\n                                          //   value={selectCommunity}\r\n                                          //   onChange={(value) => {\r\n                                          //     handleSelectedCommunities(value);\r\n                                          //   }}\r\n                                          //   options={communitiesOptionsGroup}\r\n                                          classNamePrefix=\"select2-selection\"\r\n                                        />\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>{item.default_unit}</td>\r\n                                    <td>\r\n                                      {values.length !== 1 && (\r\n                                        <i\r\n                                          className=\"uil-trash-alt\"\r\n                                          style={{\r\n                                            fontSize: \"23px\",\r\n                                            cursor: \"pointer\",\r\n                                            paddingLeft: \"5px\",\r\n                                          }}\r\n                                          onClick={() => handleRemove(index)}\r\n                                        ></i>\r\n                                      )}\r\n                                    </td>\r\n                                  </tr>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </Table>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Button\r\n                      onClick={() => addMore()}\r\n                      color=\"success\"\r\n                      className=\"mt-1\"\r\n                    >\r\n                      Add New Item\r\n                    </Button>\r\n                    <br /> <br /> <br /> <br />\r\n                    <Row>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AddTariff));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\CreditDebit\\index.js",["1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Credit = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Chart Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Debit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Credit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Added by\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Credit/Debit Fund\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Credit));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\IncomeExpenses\\index.js",["1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst IncomeExpense = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Account Detail Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Chart of Account\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Found Source\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Total Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Staff\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Approved By\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Income/Expense\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                          <div className=\"col-md-10\">\r\n                            <input\r\n                              className=\"form-control\"\r\n                              type=\"date\"\r\n                              defaultValue=\"2019-08-19\"\r\n                              id=\"example-date-input\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Amount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Account Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label> Account Details Type</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Charts of Account</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      {/* <Col className=\"mb-3\">\r\n                        <label\r\n                          htmlFor=\"example-date-input\"\r\n                          className=\"col-md-2 col-form-label\"\r\n                        >\r\n                          Date\r\n                        </label>\r\n                        <div className=\"col-md-10\">\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            defaultValue=\"2019-08-19\"\r\n                            id=\"example-date-input\"\r\n                          />\r\n                        </div>\r\n                      </Col> */}\r\n\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col md=\"4\">\r\n                      <div className=\"mb-3\">\r\n                        <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                        <div className=\"col-md-10\">\r\n                          <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            defaultValue=\"2019-08-19\"\r\n                            id=\"example-date-input\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Expense</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Account Detail Type</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Account Chart</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"2\">\r\n                      <div className=\"mb-3\">\r\n                        <Label>Staff</Label>\r\n                        <Select\r\n                          name=\"customer_community_id\"\r\n                          //   value={selectCommunity}\r\n                          //   onChange={(value) => {\r\n                          //     handleSelectedCommunities(value);\r\n                          //   }}\r\n                          //   options={communitiesOptionsGroup}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(IncomeExpense)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\TransactionLog\\index.js",["1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst TransactionLog = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Date\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Time\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Acc Category\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Account\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Debit\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tCredit\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Balance\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"\tRemark\t\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Transaction Log\" />\r\n\r\n          <Col className=\"col-12\">\r\n            <Card>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Transaction Type</Label>\r\n                      <Select\r\n                        name=\"customer_community_id\"\r\n                        //   value={selectCommunity}\r\n                        //   onChange={(value) => {\r\n                        //     handleSelectedCommunities(value);\r\n                        //   }}\r\n                        //   options={communitiesOptionsGroup}\r\n                        classNamePrefix=\"select2-selection\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label>Month</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"month\"\r\n                        defaultValue=\"2019-08\"\r\n                        id=\"example-month-input\"\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"4\">\r\n                    <div className=\"mb-3\">\r\n                      <Label htmlFor=\"validationCustom05\">Date</Label>\r\n                      <div className=\"col-md-10\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2019-08-19\"\r\n                          id=\"example-date-input\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <MDBDataTable\r\n                  responsive\r\n                  bordered\r\n                  data={data}\r\n                  searching={true}\r\n                  paging={false}\r\n                  info={false}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { apiError })(TransactionLog)\r\n);\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\Chart\\index.js",["1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Chart = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  // Account Type\tAccount Detail Type\tChart Name\tBalance\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account Detail Type\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Chart Name\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Balance\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Chart of account\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                            <Label>Account Detail Type</Label>\r\n                            <Select\r\n                              name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                              classNamePrefix=\"select2-selection\"\r\n                            />\r\n                          </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Chart Name\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Chart Name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Balance\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"balance\"\r\n                            placeholder=\"Balance\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter balance\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Chart));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\AccountDetails\\index.js",["1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AccountDetails = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Account Details\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                      <div className=\"mb-3\">\r\n                            <Label>Account Types</Label>\r\n                            <Select\r\n                              name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                              classNamePrefix=\"select2-selection\"\r\n                            />\r\n                          </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Account Type\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Account Type\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AccountDetails));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\Account-Type\\index.js",["1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst AccountType = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const[accountType,setAccountType] = useState('');\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n//   let preUpdateUser = (item) => {\r\n//     if (item.privilage) {\r\n//       let privilage = {\r\n//         label: item.privilage.name,\r\n//         value: item.privilage._id,\r\n//       };\r\n//       handleSelectedPrivilage(privilage);\r\n//     }\r\n//     if (item.company) {\r\n//       let company = {\r\n//         label: item.company.name,\r\n//         value: item.company._id,\r\n//       };\r\n//       handleSelectedCompany(company);\r\n//     }\r\n//     if (item.branch) {\r\n//       let branch = {\r\n//         label: item.branch.name,\r\n//         value: item.branch._id,\r\n//       };\r\n//       handleSelectedBranch(branch);\r\n//     }\r\n\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setUserObject({ ...item, password: null });\r\n//   };\r\n\r\n//   let preUpdateUserPassword = (item) => {\r\n//     setUserIdToBeUpdated(item._id);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n            //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n            //   setUserIdToBeDeleted(item._id);\r\n            //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n    //   item.id = index + 1;\r\n    //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n    //   item.privilage1 = item.privilage && item.privilage.name;\r\n    //   item.company1 = item.company && item.company.name;\r\n    //   item.branch1 = item.branch && item.branch.name;\r\n    //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Account Type\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Account User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n//   let privilagesOptionsData =\r\n//     privilagesOptions &&\r\n//     privilagesOptions.data &&\r\n//     privilagesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let companiesOptionsData =\r\n//     companiesOptions &&\r\n//     companiesOptions.data &&\r\n//     companiesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   let branchesOptionsData =\r\n//     branchesOptions &&\r\n//     branchesOptions.data &&\r\n//     branchesOptions.data.map((item) => {\r\n//       return {\r\n//         label: item.name,\r\n//         value: item._id,\r\n//       };\r\n//     });\r\n\r\n//   const privilagesOptionsGroup = [\r\n//     {\r\n//       options: privilagesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const companiesOptionsGroup = [\r\n//     {\r\n//       options: companiesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   const branchesOptionsGroup = [\r\n//     {\r\n//       options: branchesOptionsData,\r\n//     },\r\n//   ];\r\n\r\n//   function handleChangeUser(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setUserObject({ ...userObject, [name]: value });\r\n//   }\r\n\r\n//   function handleSelectedPrivilage(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedPrivilage(value);\r\n//     setUserObject({ ...userObject, privilage: newValue });\r\n//   }\r\n\r\n//   function handleSelectedCompany(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedCompany(value);\r\n//     setUserObject({ ...userObject, company: newValue });\r\n//   }\r\n//   function handleSelectedBranch(value) {\r\n//     let newValue = {\r\n//       name: value.label,\r\n//       _id: value.value,\r\n//     };\r\n//     setSelectedBranch(value);\r\n//     setUserObject({ ...userObject, branch: newValue });\r\n//   }\r\n\r\n//   function handleChangePassword(e) {\r\n//     let name = e.target.name;\r\n//     let value = e.target.value;\r\n//     setPasswordObject({ ...passwordObject, [name]: value });\r\n//   }\r\n\r\n//   const handleValidSubmit = (event, values) => {\r\n//     userIdTobeUpdated\r\n//       ? dispatch(updateUser(userObject))\r\n//       : dispatch(addUser(userObject));\r\n//   };\r\n\r\n//   const handleValidSubmitPassword = (event, values) => {\r\n//     if (passwordObject.password == passwordObject.confirmPassword) {\r\n//       let item = {\r\n//         _id: userIdTobeUpdated,\r\n//         password: passwordObject.password,\r\n//       };\r\n//       dispatch(updateUser(item));\r\n//     } else {\r\n//       toastr.error(\"Passwords are not matching\");\r\n//     }\r\n//   };\r\n\r\n//   let closeModal = () => {\r\n//     setShowModal(false);\r\n//     setUserIdToBeUpdated(null);\r\n//   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Account Type\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">\r\n                            Account Type\r\n                          </Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Account Type\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter account type\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                               onClick={() => setAccountType('')}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(AccountType));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\Ward\\index.js",["1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getWards,\r\n  addWard,\r\n  deleteWard,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateWard,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst Wards = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [wardObject, setWardObject] = useState({});\r\n  const [wardIdTobeUpdated, setWardIdToBeUpdated] = useState(null);\r\n  const [wardIdToBeDeleted, setWardIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [wardsForTable, setWardsForTable] = useState([]);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    wards,\r\n    addingWard,\r\n    addWardResponse,\r\n    deleteWardResponse,\r\n    updateWardResponse,\r\n    error,\r\n  } = useSelector((state) => state.wards);\r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWards());\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (addWardResponse.type === \"success\") {\r\n      toastr.success(addWardResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addWardResponse.message);\r\n    }\r\n  }, [addWardResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteWardResponse.type === \"success\") {\r\n      toastr.success(deleteWardResponse.message);\r\n      setWardIdToBeDeleted(null);\r\n    } else if (deleteWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteWardResponse.message);\r\n    }\r\n  }, [deleteWardResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateWardResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setWardIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateWardResponse.message);\r\n    } else if (updateWardResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateWardResponse.message);\r\n    }\r\n  }, [updateWardResponse]);\r\n\r\n  let preUpdateWard = (item) => {\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setWardIdToBeUpdated(item._id);\r\n    setWardObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateWardPassword = (item) => {\r\n    setWardIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wardData = [];\r\n\r\n    wards.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateWard(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setWardIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      wardData.push(item);\r\n    });\r\n    setWardsForTable(wardData);\r\n  }, [wards]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"ward Name\",\r\n        field: \"ward_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: wardsForTable,\r\n  };\r\n\r\n\r\n\r\n  function handleChangeWard(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setWardObject({ ...wardObject, [name]: value });\r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setWardObject({ ...wardObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setWardObject({ ...wardObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setWardObject({ ...wardObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    wardIdTobeUpdated\r\n      ? dispatch(updateWard(wardObject))\r\n      : dispatch(addWard(wardObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: wardIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateWard(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setWardIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteWard(wardIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Ward\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Ward Name</Label>\r\n                          <AvField\r\n                            name=\"ward_name\"\r\n                            placeholder=\"Ward name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter ward Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={wardObject.ward_name}\r\n                            onChange={handleChangeWard}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     <Col>\r\n                     <div className=\"mb-3\">\r\n                     {wardIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWard ? true : false}\r\n                      >\r\n                        {addingWard ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingWard ? true : false}\r\n                      >\r\n                        {addingWard ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n\r\n                   \r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Wards));\r\n\r\nWards.propTypes = {\r\n  error: PropTypes.any,\r\n  wards: PropTypes.array,\r\n};\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Accounts\\FundTransfer\\index.js",["1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getUsers,\r\n  addUser,\r\n  deleteUser,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateUser,\r\n  //getPrivilagesOptions,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import \"./user.scss\";\r\n\r\nconst Fund = (props) => {\r\n  //  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userObject, setUserObject] = useState({});\r\n  const [userIdTobeUpdated, setUserIdToBeUpdated] = useState(null);\r\n  const [userIdToBeDeleted, setUserIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [usersForTable, setUsersForTable] = useState([]);\r\n  const [accountType, setAccountType] = useState(\"\");\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    users,\r\n    addingUser,\r\n    addUserResponse,\r\n    deleteUserResponse,\r\n    updateUserResponse,\r\n    error,\r\n  } = useSelector((state) => state.users);\r\n\r\n  // const districtsOptions = useSelector(\r\n  //   (state) => state.districts.districtsOptions\r\n  // );\r\n\r\n  const privilagesOptions = useSelector(\r\n    (state) => state.privilages.privilagesOptions\r\n  );\r\n  const companiesOptions = useSelector(\r\n    (state) => state.companies.companiesOptions\r\n  );\r\n  const branchesOptions = useSelector(\r\n    (state) => state.branches.branchesOptions\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n    dispatch(getPrivilagesOptions());\r\n    dispatch(getCompaniesOptions());\r\n    //  dispatch(getDistrictsOptions());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCompany !== null) {\r\n      dispatch(getBranchesOptions(selectedCompany.value));\r\n    }\r\n  }, [selectedCompany]);\r\n\r\n  useEffect(() => {\r\n    if (addUserResponse.type === \"success\") {\r\n      toastr.success(addUserResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n      //  setSelectedDistrict(null);\r\n    } else if (addUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addUserResponse.message);\r\n    }\r\n  }, [addUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteUserResponse.type === \"success\") {\r\n      toastr.success(deleteUserResponse.message);\r\n      setUserIdToBeDeleted(null);\r\n    } else if (deleteUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteUserResponse.message);\r\n    }\r\n  }, [deleteUserResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateUserResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setUserIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateUserResponse.message);\r\n    } else if (updateUserResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateUserResponse.message);\r\n    }\r\n  }, [updateUserResponse]);\r\n\r\n  //   let preUpdateUser = (item) => {\r\n  //     if (item.privilage) {\r\n  //       let privilage = {\r\n  //         label: item.privilage.name,\r\n  //         value: item.privilage._id,\r\n  //       };\r\n  //       handleSelectedPrivilage(privilage);\r\n  //     }\r\n  //     if (item.company) {\r\n  //       let company = {\r\n  //         label: item.company.name,\r\n  //         value: item.company._id,\r\n  //       };\r\n  //       handleSelectedCompany(company);\r\n  //     }\r\n  //     if (item.branch) {\r\n  //       let branch = {\r\n  //         label: item.branch.name,\r\n  //         value: item.branch._id,\r\n  //       };\r\n  //       handleSelectedBranch(branch);\r\n  //     }\r\n\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setUserObject({ ...item, password: null });\r\n  //   };\r\n\r\n  //   let preUpdateUserPassword = (item) => {\r\n  //     setUserIdToBeUpdated(item._id);\r\n  //     setShowModal(true);\r\n  //   };\r\n\r\n  useEffect(() => {\r\n    let userData = [];\r\n\r\n    users.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {/* <i\r\n            className=\"uil-key-skeleton\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              preUpdateUserPassword(item);\r\n            }}\r\n          ></i> */}\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              //   preUpdateUser(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              //   setUserIdToBeDeleted(item._id);\r\n              //   setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      //   item.id = index + 1;\r\n      //   item.name1 = `${item.firstName} ${item.lastName}`;\r\n\r\n      //   item.privilage1 = item.privilage && item.privilage.name;\r\n      //   item.company1 = item.company && item.company.name;\r\n      //   item.branch1 = item.branch && item.branch.name;\r\n      //   userData.push(item);\r\n    });\r\n    // setUsersForTable(userData);\r\n  }, [users]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Reference ID\",\r\n        field: \"district\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Transfer From\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Transfer To\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Amount\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Comment\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"User\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"status\",\r\n        field: \"localbodytype\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n    ],\r\n    rows: usersForTable,\r\n  };\r\n\r\n  //   let privilagesOptionsData =\r\n  //     privilagesOptions &&\r\n  //     privilagesOptions.data &&\r\n  //     privilagesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let companiesOptionsData =\r\n  //     companiesOptions &&\r\n  //     companiesOptions.data &&\r\n  //     companiesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   let branchesOptionsData =\r\n  //     branchesOptions &&\r\n  //     branchesOptions.data &&\r\n  //     branchesOptions.data.map((item) => {\r\n  //       return {\r\n  //         label: item.name,\r\n  //         value: item._id,\r\n  //       };\r\n  //     });\r\n\r\n  //   const privilagesOptionsGroup = [\r\n  //     {\r\n  //       options: privilagesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const companiesOptionsGroup = [\r\n  //     {\r\n  //       options: companiesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   const branchesOptionsGroup = [\r\n  //     {\r\n  //       options: branchesOptionsData,\r\n  //     },\r\n  //   ];\r\n\r\n  //   function handleChangeUser(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setUserObject({ ...userObject, [name]: value });\r\n  //   }\r\n\r\n  //   function handleSelectedPrivilage(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedPrivilage(value);\r\n  //     setUserObject({ ...userObject, privilage: newValue });\r\n  //   }\r\n\r\n  //   function handleSelectedCompany(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedCompany(value);\r\n  //     setUserObject({ ...userObject, company: newValue });\r\n  //   }\r\n  //   function handleSelectedBranch(value) {\r\n  //     let newValue = {\r\n  //       name: value.label,\r\n  //       _id: value.value,\r\n  //     };\r\n  //     setSelectedBranch(value);\r\n  //     setUserObject({ ...userObject, branch: newValue });\r\n  //   }\r\n\r\n  //   function handleChangePassword(e) {\r\n  //     let name = e.target.name;\r\n  //     let value = e.target.value;\r\n  //     setPasswordObject({ ...passwordObject, [name]: value });\r\n  //   }\r\n\r\n  //   const handleValidSubmit = (event, values) => {\r\n  //     userIdTobeUpdated\r\n  //       ? dispatch(updateUser(userObject))\r\n  //       : dispatch(addUser(userObject));\r\n  //   };\r\n\r\n  //   const handleValidSubmitPassword = (event, values) => {\r\n  //     if (passwordObject.password == passwordObject.confirmPassword) {\r\n  //       let item = {\r\n  //         _id: userIdTobeUpdated,\r\n  //         password: passwordObject.password,\r\n  //       };\r\n  //       dispatch(updateUser(item));\r\n  //     } else {\r\n  //       toastr.error(\"Passwords are not matching\");\r\n  //     }\r\n  //   };\r\n\r\n  //   let closeModal = () => {\r\n  //     setShowModal(false);\r\n  //     setUserIdToBeUpdated(null);\r\n  //   };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Fund Transfer\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    // onValidSubmit={(e, v) => {\r\n                    //   handleValidSubmit(e, v);\r\n                    // }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>From Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label>To Fund Source</Label>\r\n                          <Select\r\n                            name=\"customer_community_id\"\r\n                            //   value={selectCommunity}\r\n                            //   onChange={(value) => {\r\n                            //     handleSelectedCommunities(value);\r\n                            //   }}\r\n                            //   options={communitiesOptionsGroup}\r\n                            classNamePrefix=\"select2-selection\"\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Amount</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Ammount\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Amount\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom05\">Comments</Label>\r\n                          <AvField\r\n                            name=\"accountType\"\r\n                            placeholder=\"Comments\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter Comments\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom05\"\r\n                            value={accountType}\r\n                            onChange={(e) => setAccountType(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button color=\"primary\" type=\"submit\">\r\n                            Save\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md=\"1\">\r\n                        <div className=\"mt-4\">\r\n                          <Button\r\n                            color=\"danger\"\r\n                            type=\"reset\"\r\n                            onClick={() => setAccountType(\"\")}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Fund));\r\n\r\n// Users.propTypes = {\r\n//   error: PropTypes.any,\r\n//   users: PropTypes.array,\r\n// };\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\Localbody\\index.js",["1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getLocalbodies,\r\n  addLocalbody,\r\n  deleteLocalbody,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateLocalbody,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst Localbodies = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [localbodyObject, setLocalbodyObject] = useState({});\r\n  const [localbodyIdTobeUpdated, setLocalbodyIdToBeUpdated] = useState(null);\r\n  const [localbodyIdToBeDeleted, setLocalbodyIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [localbodysForTable, setLocalbodiesForTable] = useState([]);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    localbodies,\r\n    addingLocalbody,\r\n    addLocalbodyResponse,\r\n    deleteLocalbodyResponse,\r\n    updateLocalbodyResponse,\r\n    error,\r\n  } = useSelector((state) => state.localbodies);\r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getLocalbodies());\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (addLocalbodyResponse.type === \"success\") {\r\n      toastr.success(addLocalbodyResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addLocalbodyResponse.message);\r\n    }\r\n  }, [addLocalbodyResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteLocalbodyResponse.type === \"success\") {\r\n      toastr.success(deleteLocalbodyResponse.message);\r\n      setLocalbodyIdToBeDeleted(null);\r\n    } else if (deleteLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteLocalbodyResponse.message);\r\n    }\r\n  }, [deleteLocalbodyResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateLocalbodyResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setLocalbodyIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateLocalbodyResponse.message);\r\n    } else if (updateLocalbodyResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateLocalbodyResponse.message);\r\n    }\r\n  }, [updateLocalbodyResponse]);\r\n\r\n  let preUpdateLocalbody = (item) => {\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setLocalbodyIdToBeUpdated(item._id);\r\n    setLocalbodyObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateLocalbodyPassword = (item) => {\r\n    setLocalbodyIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let localbodyData = [];\r\n\r\n    localbodies.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n         \r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateLocalbody(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setLocalbodyIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      localbodyData.push(item);\r\n    });\r\n    setLocalbodiesForTable(localbodyData);\r\n  }, [localbodies]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Localbody Name\",\r\n        field: \"localbody_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: localbodysForTable,\r\n  };\r\n\r\n\r\n\r\n  function handleChangeLocalbody(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setLocalbodyObject({ ...localbodyObject, [name]: value });\r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setLocalbodyObject({ ...localbodyObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setLocalbodyObject({ ...localbodyObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setLocalbodyObject({ ...localbodyObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    localbodyIdTobeUpdated\r\n      ? dispatch(updateLocalbody(localbodyObject))\r\n      : dispatch(addLocalbody(localbodyObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: localbodyIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateLocalbody(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setLocalbodyIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteLocalbody(localbodyIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage Localbody\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">Localbody Name</Label>\r\n                          <AvField\r\n                            name=\"localbody_name\"\r\n                            placeholder=\"localbody name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter localbody Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={localbodyObject.localbody_name}\r\n                            onChange={handleChangeLocalbody}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     <Col>\r\n                     <div className=\"mb-3\">\r\n                     {localbodyIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingLocalbody ? true : false}\r\n                      >\r\n                        {addingLocalbody ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingLocalbody ? true : false}\r\n                      >\r\n                        {addingLocalbody ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n\r\n                   \r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Localbodies));\r\n\r\nLocalbodies.propTypes = {\r\n  error: PropTypes.any,\r\n  localbodys: PropTypes.array,\r\n};\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\pages\\Manage\\District\\index.js",["1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport toastr from \"toastr\";\r\nimport { Row, Col, Card, CardBody, Button, Label, Modal } from \"reactstrap\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  getDistricts,\r\n  addDistrict,\r\n  deleteDistrict,\r\n  apiError,\r\n  getPrivilagesOptions,\r\n  getCompaniesOptions,\r\n  getBranchesOptions,\r\n  updateDistrict,\r\n} from \"../../../store/actions\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n//import \"./district.scss\";\r\n\r\nconst Districts = (props) => {\r\n  const [selectedPrivilage, setSelectedPrivilage] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [districtObject, setDistrictObject] = useState({});\r\n  const [districtIdTobeUpdated, setDistrictIdToBeUpdated] = useState(null);\r\n  const [districtIdToBeDeleted, setDistrictIdToBeDeleted] = useState(null);\r\n  const [confirmDeleteAlert, setConfirmDeleteAlert] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [districtsForTable, setDistrictsForTable] = useState([]);\r\n\r\n  const [passwordObject, setPasswordObject] = useState({\r\n    oldPassword: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const {\r\n    districts,\r\n    addingDistrict,\r\n    addDistrictResponse,\r\n    deleteDistrictResponse,\r\n    updateDistrictResponse,\r\n    error,\r\n  } = useSelector((state) => state.districts);\r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getDistricts());\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (addDistrictResponse.type === \"success\") {\r\n      toastr.success(addDistrictResponse.message);\r\n      setSelectedPrivilage({});\r\n      setSelectedCompany(null);\r\n      setSelectedBranch(null);\r\n    } else if (addDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, addDistrictResponse.message);\r\n    }\r\n  }, [addDistrictResponse]);\r\n\r\n  useEffect(() => {\r\n    if (deleteDistrictResponse.type === \"success\") {\r\n      toastr.success(deleteDistrictResponse.message);\r\n      setDistrictIdToBeDeleted(null);\r\n    } else if (deleteDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, deleteDistrictResponse.message);\r\n    }\r\n  }, [deleteDistrictResponse]);\r\n\r\n  useEffect(() => {\r\n    if (updateDistrictResponse.type === \"success\") {\r\n      setShowModal(false);\r\n      setDistrictIdToBeUpdated(null);\r\n      setPasswordObject({});\r\n      toastr.success(updateDistrictResponse.message);\r\n    } else if (updateDistrictResponse.type === \"failure\") {\r\n      toastr.error(error.data.message, updateDistrictResponse.message);\r\n    }\r\n  }, [updateDistrictResponse]);\r\n\r\n  let preUpdateDistrict = (item) => {\r\n    if (item.privilage) {\r\n      let privilage = {\r\n        label: item.privilage.name,\r\n        value: item.privilage._id,\r\n      };\r\n      handleSelectedPrivilage(privilage);\r\n    }\r\n    if (item.company) {\r\n      let company = {\r\n        label: item.company.name,\r\n        value: item.company._id,\r\n      };\r\n      handleSelectedCompany(company);\r\n    }\r\n    if (item.branch) {\r\n      let branch = {\r\n        label: item.branch.name,\r\n        value: item.branch._id,\r\n      };\r\n      handleSelectedBranch(branch);\r\n    }\r\n\r\n    setDistrictIdToBeUpdated(item._id);\r\n    setDistrictObject({ ...item, password: null });\r\n  };\r\n\r\n  let preUpdateDistrictPassword = (item) => {\r\n    setDistrictIdToBeUpdated(item._id);\r\n    setShowModal(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let districtData = [];\r\n\r\n    districts.map((item, index) => {\r\n      item.action = (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <i\r\n            className=\"uil-edit-alt\"\r\n            style={{\r\n              fontSize: \"1.3em\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"1rem\",\r\n              marginRight: \"1rem\",\r\n            }}\r\n            onClick={() => {\r\n              preUpdateDistrict(item);\r\n            }}\r\n          ></i>\r\n          <i\r\n            className=\"uil-trash-alt\"\r\n            style={{ fontSize: \"1.3em\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setDistrictIdToBeDeleted(item._id);\r\n              setConfirmDeleteAlert(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      );\r\n      item.id = index + 1;\r\n      districtData.push(item);\r\n    });\r\n    setDistrictsForTable(districtData);\r\n  }, [districts]);\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"#\",\r\n        field: \"id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Name\",\r\n        field: \"district_name\",\r\n        sort: \"asc\",\r\n        width: 400,\r\n      },\r\n      {\r\n        label: \"Action\",\r\n        field: \"action\",\r\n        width: 300,\r\n      },\r\n    ],\r\n    rows: districtsForTable,\r\n  };\r\n\r\n\r\n\r\n  function handleChangeDistrict(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setDistrictObject({ ...districtObject, [name]: value });\r\n  }\r\n\r\n  function handleSelectedPrivilage(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedPrivilage(value);\r\n    setDistrictObject({ ...districtObject, privilage: newValue });\r\n  }\r\n\r\n  function handleSelectedCompany(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedCompany(value);\r\n    setDistrictObject({ ...districtObject, company: newValue });\r\n  }\r\n  function handleSelectedBranch(value) {\r\n    let newValue = {\r\n      name: value.label,\r\n      _id: value.value,\r\n    };\r\n    setSelectedBranch(value);\r\n    setDistrictObject({ ...districtObject, branch: newValue });\r\n  }\r\n\r\n  function handleChangePassword(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    setPasswordObject({ ...passwordObject, [name]: value });\r\n  }\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    districtIdTobeUpdated\r\n      ? dispatch(updateDistrict(districtObject))\r\n      : dispatch(addDistrict(districtObject));\r\n  };\r\n\r\n  const handleValidSubmitPassword = (event, values) => {\r\n    if (passwordObject.password == passwordObject.confirmPassword) {\r\n      let item = {\r\n        _id: districtIdTobeUpdated,\r\n        password: passwordObject.password,\r\n      };\r\n      dispatch(updateDistrict(item));\r\n    } else {\r\n      toastr.error(\"Passwords are not matching\");\r\n    }\r\n  };\r\n\r\n  let closeModal = () => {\r\n    setShowModal(false);\r\n    setDistrictIdToBeUpdated(null);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {confirmDeleteAlert ? (\r\n        <SweetAlert\r\n          title=\"\"\r\n          showCancel\r\n          confirmButtonText=\"Delete\"\r\n          confirmBtnBsStyle=\"success\"\r\n          cancelBtnBsStyle=\"danger\"\r\n          onConfirm={() => {\r\n            dispatch(deleteDistrict(districtIdToBeDeleted));\r\n            setConfirmDeleteAlert(false);\r\n          }}\r\n          onCancel={() => setConfirmDeleteAlert(false)}\r\n        >\r\n          Are you sure you want to delete it?\r\n        </SweetAlert>\r\n      ) : null}\r\n\r\n      \r\n      <div className=\"page-content\">\r\n        <div className=\"container-fluid\">\r\n          <Breadcrumbs title=\"Home\" breadcrumbItem=\"Manage District\" />\r\n          <Row>\r\n            <Col xl=\"12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <AvForm\r\n                    className=\"needs-validation\"\r\n                    onValidSubmit={(e, v) => {\r\n                      handleValidSubmit(e, v);\r\n                    }}\r\n                  >\r\n                    <Row>\r\n                      <Col md=\"3\">\r\n                        <div className=\"mb-3\">\r\n                          <Label htmlFor=\"validationCustom01\">District</Label>\r\n                          <AvField\r\n                            name=\"district_name\"\r\n                            placeholder=\"District name\"\r\n                            type=\"text\"\r\n                            errorMessage=\"Enter District Name\"\r\n                            className=\"form-control\"\r\n                            validate={{ required: { value: true } }}\r\n                            id=\"validationCustom01\"\r\n                            value={districtObject.district_name}\r\n                            onChange={handleChangeDistrict}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                     \r\n                     <Col>\r\n                     <div className=\"mb-3\">\r\n                     {districtIdTobeUpdated ? (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingDistrict ? true : false}\r\n                      >\r\n                        {addingDistrict ? \"Updating\" : \"Update\"}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={addingDistrict ? true : false}\r\n                      >\r\n                        {addingDistrict ? \"Adding\" : \"Submit\"}\r\n                      </Button>\r\n                    )}\r\n                    </div>\r\n                     </Col>\r\n                    </Row>\r\n\r\n                   \r\n                  </AvForm>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col className=\"col-12\">\r\n              <Card>\r\n                <CardBody>\r\n                  <MDBDataTable\r\n                    responsive\r\n                    bordered\r\n                    data={data}\r\n                    searching={true}\r\n                    paging={false}\r\n                    info={false}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {};\r\n\r\nexport default withRouter(connect(mapStateToProps, { apiError })(Districts));\r\n\r\nDistricts.propTypes = {\r\n  error: PropTypes.any,\r\n  districts: PropTypes.array,\r\n};\r\n","C:\\Anu\\HAZEL\\hazelgreen\\client\\src\\components\\MegaMenu\\MegaMenu.jsx",[],{"ruleId":"1430","severity":1,"message":"1431","line":48,"column":6,"nodeType":"1432","endLine":48,"endColumn":8,"suggestions":"1433"},{"ruleId":"1434","severity":1,"message":"1435","line":44,"column":9,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1438","line":12,"column":8,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1439","line":13,"column":8,"nodeType":"1436","messageId":"1437","endLine":13,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1440","line":14,"column":8,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1441","line":15,"column":8,"nodeType":"1436","messageId":"1437","endLine":15,"endColumn":25},{"ruleId":"1430","severity":1,"message":"1442","line":74,"column":6,"nodeType":"1432","endLine":74,"endColumn":8,"suggestions":"1443"},{"ruleId":"1444","severity":1,"message":"1445","line":77,"column":21,"nodeType":"1446","messageId":"1447","endLine":77,"endColumn":35,"fix":"1448"},{"ruleId":"1444","severity":1,"message":"1445","line":83,"column":23,"nodeType":"1446","messageId":"1447","endLine":83,"endColumn":42,"fix":"1449"},{"ruleId":"1430","severity":1,"message":"1442","line":91,"column":6,"nodeType":"1432","endLine":91,"endColumn":23,"suggestions":"1450"},{"ruleId":"1430","severity":1,"message":"1451","line":102,"column":6,"nodeType":"1432","endLine":102,"endColumn":23,"suggestions":"1452"},{"ruleId":"1430","severity":1,"message":"1451","line":111,"column":6,"nodeType":"1432","endLine":111,"endColumn":26,"suggestions":"1453"},{"ruleId":"1430","severity":1,"message":"1451","line":122,"column":6,"nodeType":"1432","endLine":122,"endColumn":26,"suggestions":"1454"},{"ruleId":"1455","severity":1,"message":"1456","line":159,"column":29,"nodeType":"1457","messageId":"1458","endLine":159,"endColumn":31},{"ruleId":"1430","severity":1,"message":"1459","line":200,"column":6,"nodeType":"1432","endLine":200,"endColumn":13,"suggestions":"1460"},{"ruleId":"1461","severity":1,"message":"1462","line":354,"column":33,"nodeType":"1463","messageId":"1464","endLine":354,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1465","line":14,"column":8,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1466","line":30,"column":6,"nodeType":"1432","endLine":30,"endColumn":8,"suggestions":"1467"},{"ruleId":"1430","severity":1,"message":"1451","line":50,"column":6,"nodeType":"1432","endLine":50,"endColumn":21,"suggestions":"1468"},{"ruleId":"1469","severity":1,"message":"1470","line":168,"column":21,"nodeType":"1471","messageId":"1472","endLine":168,"endColumn":71,"fix":"1473"},{"ruleId":"1469","severity":1,"message":"1470","line":140,"column":23,"nodeType":"1471","messageId":"1472","endLine":144,"endColumn":24,"fix":"1474"},{"ruleId":"1469","severity":1,"message":"1470","line":121,"column":21,"nodeType":"1471","messageId":"1472","endLine":121,"endColumn":71,"fix":"1475"},{"ruleId":"1434","severity":1,"message":"1476","line":51,"column":10,"nodeType":"1436","messageId":"1437","endLine":51,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":131,"column":6,"nodeType":"1432","endLine":131,"endColumn":8,"suggestions":"1477"},{"ruleId":"1430","severity":1,"message":"1442","line":137,"column":6,"nodeType":"1432","endLine":137,"endColumn":23,"suggestions":"1478"},{"ruleId":"1430","severity":1,"message":"1451","line":158,"column":6,"nodeType":"1432","endLine":158,"endColumn":23,"suggestions":"1479"},{"ruleId":"1430","severity":1,"message":"1451","line":167,"column":6,"nodeType":"1432","endLine":167,"endColumn":26,"suggestions":"1480"},{"ruleId":"1430","severity":1,"message":"1451","line":178,"column":6,"nodeType":"1432","endLine":178,"endColumn":26,"suggestions":"1481"},{"ruleId":"1455","severity":1,"message":"1456","line":276,"column":29,"nodeType":"1457","messageId":"1458","endLine":276,"endColumn":31},{"ruleId":"1430","severity":1,"message":"1459","line":316,"column":6,"nodeType":"1432","endLine":316,"endColumn":13,"suggestions":"1482"},{"ruleId":"1434","severity":1,"message":"1483","line":549,"column":9,"nodeType":"1436","messageId":"1437","endLine":549,"endColumn":29},{"ruleId":"1434","severity":1,"message":"1484","line":653,"column":12,"nodeType":"1436","messageId":"1437","endLine":653,"endColumn":32},{"ruleId":"1461","severity":1,"message":"1462","line":666,"column":33,"nodeType":"1463","messageId":"1464","endLine":666,"endColumn":35},{"ruleId":"1461","severity":1,"message":"1485","line":83,"column":25,"nodeType":"1463","messageId":"1464","endLine":83,"endColumn":27},{"ruleId":"1486","severity":1,"message":"1487","line":89,"column":9,"nodeType":"1488","messageId":"1464","endLine":89,"endColumn":26},{"ruleId":"1461","severity":1,"message":"1462","line":117,"column":22,"nodeType":"1463","messageId":"1464","endLine":117,"endColumn":24},{"ruleId":"1486","severity":1,"message":"1489","line":127,"column":9,"nodeType":"1488","messageId":"1464","endLine":127,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1490","line":1,"column":32,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1492","line":6,"column":36,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1498","line":25,"column":10,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":16},{"ruleId":"1434","severity":1,"message":"1499","line":25,"column":18,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1510","line":42,"column":23,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":37},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1516"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1517"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1518"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1519"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1520"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1522"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1523"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1524"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1525"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1526"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1527","line":8,"column":3,"nodeType":"1436","messageId":"1437","endLine":8,"endColumn":12},{"ruleId":"1434","severity":1,"message":"1528","line":9,"column":3,"nodeType":"1436","messageId":"1437","endLine":9,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1528","line":9,"column":3,"nodeType":"1436","messageId":"1437","endLine":9,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1529","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1530","line":1,"column":8,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1531","line":14,"column":22,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1490","line":1,"column":32,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1490","line":1,"column":32,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1490","line":1,"column":32,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1532","line":1,"column":27,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":30},{"ruleId":"1434","severity":1,"message":"1533","line":1,"column":37,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1534","line":5,"column":10,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1535","line":5,"column":26,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":38},{"ruleId":"1434","severity":1,"message":"1536","line":10,"column":3,"nodeType":"1436","messageId":"1437","endLine":10,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1537","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1538","line":14,"column":7,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1532","line":1,"column":27,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":30},{"ruleId":"1434","severity":1,"message":"1533","line":1,"column":37,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1539","line":5,"column":10,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1540","line":5,"column":37,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":60},{"ruleId":"1434","severity":1,"message":"1541","line":10,"column":3,"nodeType":"1436","messageId":"1437","endLine":10,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1542","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1538","line":14,"column":7,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1490","line":1,"column":32,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1543","line":31,"column":11,"nodeType":"1436","messageId":"1437","endLine":31,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1532","line":1,"column":27,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":30},{"ruleId":"1434","severity":1,"message":"1533","line":1,"column":37,"nodeType":"1436","messageId":"1437","endLine":1,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1544","line":5,"column":10,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":32},{"ruleId":"1434","severity":1,"message":"1545","line":5,"column":34,"nodeType":"1436","messageId":"1437","endLine":5,"endColumn":52},{"ruleId":"1434","severity":1,"message":"1546","line":10,"column":3,"nodeType":"1436","messageId":"1437","endLine":10,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1547","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1538","line":15,"column":7,"nodeType":"1436","messageId":"1437","endLine":15,"endColumn":22},{"ruleId":"1461","severity":1,"message":"1485","line":83,"column":25,"nodeType":"1463","messageId":"1464","endLine":83,"endColumn":27},{"ruleId":"1486","severity":1,"message":"1548","line":89,"column":9,"nodeType":"1488","messageId":"1464","endLine":89,"endColumn":21},{"ruleId":"1461","severity":1,"message":"1462","line":117,"column":22,"nodeType":"1463","messageId":"1464","endLine":117,"endColumn":24},{"ruleId":"1486","severity":1,"message":"1549","line":127,"column":9,"nodeType":"1488","messageId":"1464","endLine":127,"endColumn":21},{"ruleId":"1461","severity":1,"message":"1485","line":83,"column":25,"nodeType":"1463","messageId":"1464","endLine":83,"endColumn":27},{"ruleId":"1486","severity":1,"message":"1550","line":89,"column":9,"nodeType":"1488","messageId":"1464","endLine":89,"endColumn":25},{"ruleId":"1461","severity":1,"message":"1462","line":117,"column":22,"nodeType":"1463","messageId":"1464","endLine":117,"endColumn":24},{"ruleId":"1486","severity":1,"message":"1551","line":127,"column":9,"nodeType":"1488","messageId":"1464","endLine":127,"endColumn":25},{"ruleId":"1461","severity":1,"message":"1485","line":83,"column":25,"nodeType":"1463","messageId":"1464","endLine":83,"endColumn":27},{"ruleId":"1486","severity":1,"message":"1552","line":89,"column":9,"nodeType":"1488","messageId":"1464","endLine":89,"endColumn":21},{"ruleId":"1461","severity":1,"message":"1462","line":117,"column":22,"nodeType":"1463","messageId":"1464","endLine":117,"endColumn":24},{"ruleId":"1486","severity":1,"message":"1553","line":127,"column":9,"nodeType":"1488","messageId":"1464","endLine":127,"endColumn":21},{"ruleId":"1469","severity":1,"message":"1470","line":18,"column":19,"nodeType":"1471","messageId":"1472","endLine":22,"endColumn":20,"fix":"1554"},{"ruleId":"1434","severity":1,"message":"1555","line":90,"column":12,"nodeType":"1436","messageId":"1437","endLine":90,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1556","line":31,"column":10,"nodeType":"1436","messageId":"1437","endLine":31,"endColumn":16},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1499","line":25,"column":18,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1510","line":42,"column":23,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":37},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1557"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1558"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1559"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1560"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1561"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":13,"column":3,"nodeType":"1436","messageId":"1437","endLine":13,"endColumn":8},{"ruleId":"1434","severity":1,"message":"1562","line":14,"column":3,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":8},{"ruleId":"1434","severity":1,"message":"1494","line":17,"column":8,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":21,"column":3,"nodeType":"1436","messageId":"1437","endLine":21,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":22,"column":3,"nodeType":"1436","messageId":"1437","endLine":22,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":27,"column":3,"nodeType":"1436","messageId":"1437","endLine":27,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1563","line":43,"column":26,"nodeType":"1436","messageId":"1437","endLine":43,"endColumn":43},{"ruleId":"1434","severity":1,"message":"1500","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":46,"column":10,"nodeType":"1436","messageId":"1437","endLine":46,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":47,"column":10,"nodeType":"1436","messageId":"1437","endLine":47,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":47,"column":22,"nodeType":"1436","messageId":"1437","endLine":47,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":48,"column":10,"nodeType":"1436","messageId":"1437","endLine":48,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":49,"column":10,"nodeType":"1436","messageId":"1437","endLine":49,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":50,"column":10,"nodeType":"1436","messageId":"1437","endLine":50,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":50,"column":30,"nodeType":"1436","messageId":"1437","endLine":50,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":51,"column":10,"nodeType":"1436","messageId":"1437","endLine":51,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":52,"column":25,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":53,"column":10,"nodeType":"1436","messageId":"1437","endLine":53,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1511","line":55,"column":10,"nodeType":"1436","messageId":"1437","endLine":55,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":63,"column":5,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":74,"column":9,"nodeType":"1436","messageId":"1437","endLine":74,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":77,"column":9,"nodeType":"1436","messageId":"1437","endLine":77,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":80,"column":9,"nodeType":"1436","messageId":"1437","endLine":80,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":91,"column":6,"nodeType":"1432","endLine":91,"endColumn":8,"suggestions":"1564"},{"ruleId":"1430","severity":1,"message":"1442","line":97,"column":6,"nodeType":"1432","endLine":97,"endColumn":23,"suggestions":"1565"},{"ruleId":"1430","severity":1,"message":"1451","line":109,"column":6,"nodeType":"1432","endLine":109,"endColumn":23,"suggestions":"1566"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1567"},{"ruleId":"1430","severity":1,"message":"1451","line":129,"column":6,"nodeType":"1432","endLine":129,"endColumn":26,"suggestions":"1568"},{"ruleId":"1434","severity":1,"message":"1521","line":164,"column":9,"nodeType":"1436","messageId":"1437","endLine":164,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":166,"column":29,"nodeType":"1457","messageId":"1458","endLine":166,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1498","line":25,"column":10,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":16},{"ruleId":"1434","severity":1,"message":"1499","line":25,"column":18,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1510","line":42,"column":23,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":37},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1569"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1570"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1571"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1572"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1573"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":13,"column":3,"nodeType":"1436","messageId":"1437","endLine":13,"endColumn":8},{"ruleId":"1434","severity":1,"message":"1494","line":16,"column":8,"nodeType":"1436","messageId":"1437","endLine":16,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":20,"column":3,"nodeType":"1436","messageId":"1437","endLine":20,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":21,"column":3,"nodeType":"1436","messageId":"1437","endLine":21,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":26,"column":3,"nodeType":"1436","messageId":"1437","endLine":26,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":45,"column":10,"nodeType":"1436","messageId":"1437","endLine":45,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":45,"column":22,"nodeType":"1436","messageId":"1437","endLine":45,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":46,"column":10,"nodeType":"1436","messageId":"1437","endLine":46,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":47,"column":10,"nodeType":"1436","messageId":"1437","endLine":47,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":48,"column":10,"nodeType":"1436","messageId":"1437","endLine":48,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":48,"column":30,"nodeType":"1436","messageId":"1437","endLine":48,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":49,"column":10,"nodeType":"1436","messageId":"1437","endLine":49,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":50,"column":25,"nodeType":"1436","messageId":"1437","endLine":50,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":51,"column":10,"nodeType":"1436","messageId":"1437","endLine":51,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1511","line":53,"column":10,"nodeType":"1436","messageId":"1437","endLine":53,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":61,"column":5,"nodeType":"1436","messageId":"1437","endLine":61,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":72,"column":9,"nodeType":"1436","messageId":"1437","endLine":72,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":75,"column":9,"nodeType":"1436","messageId":"1437","endLine":75,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":78,"column":9,"nodeType":"1436","messageId":"1437","endLine":78,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":89,"column":6,"nodeType":"1432","endLine":89,"endColumn":8,"suggestions":"1574"},{"ruleId":"1430","severity":1,"message":"1442","line":95,"column":6,"nodeType":"1432","endLine":95,"endColumn":23,"suggestions":"1575"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":23,"suggestions":"1576"},{"ruleId":"1430","severity":1,"message":"1451","line":116,"column":6,"nodeType":"1432","endLine":116,"endColumn":26,"suggestions":"1577"},{"ruleId":"1430","severity":1,"message":"1451","line":127,"column":6,"nodeType":"1432","endLine":127,"endColumn":26,"suggestions":"1578"},{"ruleId":"1434","severity":1,"message":"1521","line":173,"column":9,"nodeType":"1436","messageId":"1437","endLine":173,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":175,"column":29,"nodeType":"1457","messageId":"1458","endLine":175,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1579"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1580"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1581"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1582"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1583"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1584"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1585"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1586"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1587"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1588"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1492","line":6,"column":36,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":42},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1498","line":25,"column":10,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":16},{"ruleId":"1434","severity":1,"message":"1499","line":25,"column":18,"nodeType":"1436","messageId":"1437","endLine":25,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1509","line":42,"column":10,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1510","line":42,"column":23,"nodeType":"1436","messageId":"1437","endLine":42,"endColumn":37},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1589"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1590"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1591"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1592"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1593"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1594"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1595"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1596"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1597"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1598"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1599"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1600"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1601"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1602"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1603"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1604","line":8,"column":8,"nodeType":"1436","messageId":"1437","endLine":8,"endColumn":14},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1605"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1606"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1607"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1608"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1609"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1604","line":8,"column":8,"nodeType":"1436","messageId":"1437","endLine":8,"endColumn":14},{"ruleId":"1434","severity":1,"message":"1610","line":14,"column":3,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":23},{"ruleId":"1434","severity":1,"message":"1611","line":15,"column":3,"nodeType":"1436","messageId":"1437","endLine":15,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1612","line":16,"column":3,"nodeType":"1436","messageId":"1437","endLine":16,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1500","line":31,"column":10,"nodeType":"1436","messageId":"1437","endLine":31,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1613","line":32,"column":10,"nodeType":"1436","messageId":"1437","endLine":32,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1476","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1507","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":19},{"ruleId":"1430","severity":1,"message":"1442","line":63,"column":6,"nodeType":"1432","endLine":63,"endColumn":8,"suggestions":"1614"},{"ruleId":"1430","severity":1,"message":"1451","line":76,"column":6,"nodeType":"1432","endLine":76,"endColumn":23,"suggestions":"1615"},{"ruleId":"1430","severity":1,"message":"1451","line":85,"column":6,"nodeType":"1432","endLine":85,"endColumn":26,"suggestions":"1616"},{"ruleId":"1430","severity":1,"message":"1451","line":96,"column":6,"nodeType":"1432","endLine":96,"endColumn":26,"suggestions":"1617"},{"ruleId":"1434","severity":1,"message":"1618","line":125,"column":7,"nodeType":"1436","messageId":"1437","endLine":125,"endColumn":28},{"ruleId":"1455","severity":1,"message":"1456","line":133,"column":29,"nodeType":"1457","messageId":"1458","endLine":133,"endColumn":31},{"ruleId":"1430","severity":1,"message":"1619","line":162,"column":6,"nodeType":"1432","endLine":162,"endColumn":13,"suggestions":"1620"},{"ruleId":"1434","severity":1,"message":"1484","line":221,"column":12,"nodeType":"1436","messageId":"1437","endLine":221,"endColumn":32},{"ruleId":"1434","severity":1,"message":"1621","line":233,"column":9,"nodeType":"1436","messageId":"1437","endLine":233,"endColumn":34},{"ruleId":"1461","severity":1,"message":"1462","line":234,"column":33,"nodeType":"1463","messageId":"1464","endLine":234,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1622","line":245,"column":7,"nodeType":"1436","messageId":"1437","endLine":245,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1491","line":3,"column":8,"nodeType":"1436","messageId":"1437","endLine":3,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1494","line":7,"column":8,"nodeType":"1436","messageId":"1437","endLine":7,"endColumn":18},{"ruleId":"1434","severity":1,"message":"1495","line":11,"column":3,"nodeType":"1436","messageId":"1437","endLine":11,"endColumn":10},{"ruleId":"1434","severity":1,"message":"1496","line":12,"column":3,"nodeType":"1436","messageId":"1437","endLine":12,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1497","line":17,"column":3,"nodeType":"1436","messageId":"1437","endLine":17,"endColumn":13},{"ruleId":"1434","severity":1,"message":"1500","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1476","line":35,"column":10,"nodeType":"1436","messageId":"1437","endLine":35,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1501","line":36,"column":10,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":20},{"ruleId":"1434","severity":1,"message":"1502","line":36,"column":22,"nodeType":"1436","messageId":"1437","endLine":36,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1503","line":37,"column":10,"nodeType":"1436","messageId":"1437","endLine":37,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1504","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1505","line":39,"column":10,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":28},{"ruleId":"1434","severity":1,"message":"1506","line":39,"column":30,"nodeType":"1436","messageId":"1437","endLine":39,"endColumn":51},{"ruleId":"1434","severity":1,"message":"1507","line":40,"column":10,"nodeType":"1436","messageId":"1437","endLine":40,"endColumn":19},{"ruleId":"1434","severity":1,"message":"1508","line":41,"column":25,"nodeType":"1436","messageId":"1437","endLine":41,"endColumn":41},{"ruleId":"1434","severity":1,"message":"1511","line":44,"column":10,"nodeType":"1436","messageId":"1437","endLine":44,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1512","line":52,"column":5,"nodeType":"1436","messageId":"1437","endLine":52,"endColumn":15},{"ruleId":"1434","severity":1,"message":"1513","line":63,"column":9,"nodeType":"1436","messageId":"1437","endLine":63,"endColumn":26},{"ruleId":"1434","severity":1,"message":"1514","line":66,"column":9,"nodeType":"1436","messageId":"1437","endLine":66,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1515","line":69,"column":9,"nodeType":"1436","messageId":"1437","endLine":69,"endColumn":24},{"ruleId":"1430","severity":1,"message":"1442","line":80,"column":6,"nodeType":"1432","endLine":80,"endColumn":8,"suggestions":"1623"},{"ruleId":"1430","severity":1,"message":"1442","line":86,"column":6,"nodeType":"1432","endLine":86,"endColumn":23,"suggestions":"1624"},{"ruleId":"1430","severity":1,"message":"1451","line":98,"column":6,"nodeType":"1432","endLine":98,"endColumn":23,"suggestions":"1625"},{"ruleId":"1430","severity":1,"message":"1451","line":107,"column":6,"nodeType":"1432","endLine":107,"endColumn":26,"suggestions":"1626"},{"ruleId":"1430","severity":1,"message":"1451","line":118,"column":6,"nodeType":"1432","endLine":118,"endColumn":26,"suggestions":"1627"},{"ruleId":"1434","severity":1,"message":"1521","line":153,"column":9,"nodeType":"1436","messageId":"1437","endLine":153,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1456","line":155,"column":29,"nodeType":"1457","messageId":"1458","endLine":155,"endColumn":31},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1604","line":8,"column":8,"nodeType":"1436","messageId":"1437","endLine":8,"endColumn":14},{"ruleId":"1434","severity":1,"message":"1610","line":14,"column":3,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":23},{"ruleId":"1434","severity":1,"message":"1611","line":15,"column":3,"nodeType":"1436","messageId":"1437","endLine":15,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1612","line":16,"column":3,"nodeType":"1436","messageId":"1437","endLine":16,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1500","line":31,"column":10,"nodeType":"1436","messageId":"1437","endLine":31,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1613","line":32,"column":10,"nodeType":"1436","messageId":"1437","endLine":32,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1476","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1507","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":19},{"ruleId":"1430","severity":1,"message":"1442","line":63,"column":6,"nodeType":"1432","endLine":63,"endColumn":8,"suggestions":"1628"},{"ruleId":"1430","severity":1,"message":"1451","line":76,"column":6,"nodeType":"1432","endLine":76,"endColumn":28,"suggestions":"1629"},{"ruleId":"1430","severity":1,"message":"1451","line":85,"column":6,"nodeType":"1432","endLine":85,"endColumn":31,"suggestions":"1630"},{"ruleId":"1430","severity":1,"message":"1451","line":96,"column":6,"nodeType":"1432","endLine":96,"endColumn":31,"suggestions":"1631"},{"ruleId":"1434","severity":1,"message":"1632","line":125,"column":7,"nodeType":"1436","messageId":"1437","endLine":125,"endColumn":33},{"ruleId":"1455","severity":1,"message":"1456","line":133,"column":35,"nodeType":"1457","messageId":"1458","endLine":133,"endColumn":37},{"ruleId":"1430","severity":1,"message":"1633","line":163,"column":6,"nodeType":"1432","endLine":163,"endColumn":19,"suggestions":"1634"},{"ruleId":"1434","severity":1,"message":"1484","line":222,"column":12,"nodeType":"1436","messageId":"1437","endLine":222,"endColumn":32},{"ruleId":"1434","severity":1,"message":"1621","line":234,"column":9,"nodeType":"1436","messageId":"1437","endLine":234,"endColumn":34},{"ruleId":"1461","severity":1,"message":"1462","line":235,"column":33,"nodeType":"1463","messageId":"1464","endLine":235,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1622","line":246,"column":7,"nodeType":"1436","messageId":"1437","endLine":246,"endColumn":17},{"ruleId":"1434","severity":1,"message":"1493","line":6,"column":51,"nodeType":"1436","messageId":"1437","endLine":6,"endColumn":56},{"ruleId":"1434","severity":1,"message":"1604","line":8,"column":8,"nodeType":"1436","messageId":"1437","endLine":8,"endColumn":14},{"ruleId":"1434","severity":1,"message":"1610","line":14,"column":3,"nodeType":"1436","messageId":"1437","endLine":14,"endColumn":23},{"ruleId":"1434","severity":1,"message":"1611","line":15,"column":3,"nodeType":"1436","messageId":"1437","endLine":15,"endColumn":22},{"ruleId":"1434","severity":1,"message":"1612","line":16,"column":3,"nodeType":"1436","messageId":"1437","endLine":16,"endColumn":21},{"ruleId":"1434","severity":1,"message":"1500","line":31,"column":10,"nodeType":"1436","messageId":"1437","endLine":31,"endColumn":27},{"ruleId":"1434","severity":1,"message":"1613","line":32,"column":10,"nodeType":"1436","messageId":"1437","endLine":32,"endColumn":25},{"ruleId":"1434","severity":1,"message":"1476","line":33,"column":10,"nodeType":"1436","messageId":"1437","endLine":33,"endColumn":24},{"ruleId":"1434","severity":1,"message":"1507","line":38,"column":10,"nodeType":"1436","messageId":"1437","endLine":38,"endColumn":19},{"ruleId":"1430","severity":1,"message":"1442","line":63,"column":6,"nodeType":"1432","endLine":63,"endColumn":8,"suggestions":"1635"},{"ruleId":"1430","severity":1,"message":"1451","line":76,"column":6,"nodeType":"1432","endLine":76,"endColumn":27,"suggestions":"1636"},{"ruleId":"1430","severity":1,"message":"1451","line":85,"column":6,"nodeType":"1432","endLine":85,"endColumn":30,"suggestions":"1637"},{"ruleId":"1430","severity":1,"message":"1451","line":96,"column":6,"nodeType":"1432","endLine":96,"endColumn":30,"suggestions":"1638"},{"ruleId":"1434","severity":1,"message":"1639","line":125,"column":7,"nodeType":"1436","messageId":"1437","endLine":125,"endColumn":32},{"ruleId":"1455","severity":1,"message":"1456","line":133,"column":33,"nodeType":"1457","messageId":"1458","endLine":133,"endColumn":35},{"ruleId":"1430","severity":1,"message":"1640","line":162,"column":6,"nodeType":"1432","endLine":162,"endColumn":17,"suggestions":"1641"},{"ruleId":"1434","severity":1,"message":"1484","line":221,"column":12,"nodeType":"1436","messageId":"1437","endLine":221,"endColumn":32},{"ruleId":"1434","severity":1,"message":"1621","line":233,"column":9,"nodeType":"1436","messageId":"1437","endLine":233,"endColumn":34},{"ruleId":"1461","severity":1,"message":"1462","line":234,"column":33,"nodeType":"1463","messageId":"1464","endLine":234,"endColumn":35},{"ruleId":"1434","severity":1,"message":"1622","line":245,"column":7,"nodeType":"1436","messageId":"1437","endLine":245,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.","ArrayExpression",["1642"],"no-unused-vars","'currentage' is assigned a value but never used.","Identifier","unusedVar","'TopUser' is defined but never used.","'RecentActivity' is defined but never used.","'SocialSource' is defined but never used.","'LatestTransaction' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1643"],"no-useless-computed-key","Unnecessarily computed property ['addedby'] found.","Property","unnecessarilyComputedProperty",{"range":"1644","text":"1645"},{"range":"1646","text":"1645"},["1647"],"React Hook useEffect has a missing dependency: 'error.data.message'. Either include it or remove the dependency array.",["1648"],["1649"],["1650"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'preUpdateUser'. Either include it or remove the dependency array.",["1651"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'LanguageDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1652"],["1653"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"1654","text":"1655"},{"range":"1656","text":"1655"},{"range":"1657","text":"1655"},"'selectedBranch' is assigned a value but never used.",["1658"],["1659"],["1660"],["1661"],["1662"],["1663"],"'branchesOptionsGroup' is assigned a value but never used.","'handleChangePassword' is defined but never used.","Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'deletingLocalbody'.","ObjectExpression","Duplicate key 'updatingLocalbody'.","'takeLatest' is defined but never used.","'PropTypes' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'SweetAlert' is defined but never used.","'addUser' is defined but never used.","'deleteUser' is defined but never used.","'updateUser' is defined but never used.","'AvForm' is defined but never used.","'AvField' is defined but never used.","'selectedPrivilage' is assigned a value but never used.","'userObject' is assigned a value but never used.","'setUserObject' is assigned a value but never used.","'userIdTobeUpdated' is assigned a value but never used.","'userIdToBeDeleted' is assigned a value but never used.","'confirmDeleteAlert' is assigned a value but never used.","'setConfirmDeleteAlert' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setUsersForTable' is assigned a value but never used.","'accountType' is assigned a value but never used.","'setAccountType' is assigned a value but never used.","'passwordObject' is assigned a value but never used.","'addingUser' is assigned a value but never used.","'privilagesOptions' is assigned a value but never used.","'companiesOptions' is assigned a value but never used.","'branchesOptions' is assigned a value but never used.",["1664"],["1665"],["1666"],["1667"],["1668"],"'userData' is assigned a value but never used.",["1669"],["1670"],["1671"],["1672"],["1673"],"'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.","'CardHeader' is defined but never used.","'axios' is defined but never used.","'Link' is defined but never used.","'put' is defined but never used.","'call' is defined but never used.","'profileSuccess' is defined but never used.","'profileError' is defined but never used.","'postFakeProfile' is defined but never used.","'postJwtProfile' is defined but never used.","'fireBaseBackend' is assigned a value but never used.","'userForgetPasswordSuccess' is defined but never used.","'userForgetPasswordError' is defined but never used.","'postFakeForgetPwd' is defined but never used.","'postJwtForgetPwd' is defined but never used.","'response' is assigned a value but never used.","'registerUserSuccessful' is defined but never used.","'registerUserFailed' is defined but never used.","'postFakeRegister' is defined but never used.","'postJwtRegister' is defined but never used.","Duplicate key 'deletingWard'.","Duplicate key 'updatingWard'.","Duplicate key 'deletingDistrict'.","Duplicate key 'updatingDistrict'.","Duplicate key 'deletingUser'.","Duplicate key 'updatingUser'.",{"range":"1674","text":"1655"},"'toggleMegaMenu' is defined but never used.","'mobile' is assigned a value but never used.",["1675"],["1676"],["1677"],["1678"],["1679"],"'Table' is defined but never used.","'setUploadProgress' is assigned a value but never used.",["1680"],["1681"],["1682"],["1683"],["1684"],["1685"],["1686"],["1687"],["1688"],["1689"],["1690"],["1691"],["1692"],["1693"],["1694"],["1695"],["1696"],["1697"],["1698"],["1699"],["1700"],["1701"],["1702"],["1703"],["1704"],["1705"],["1706"],["1707"],["1708"],["1709"],["1710"],["1711"],["1712"],["1713"],["1714"],["1715"],["1716"],["1717"],["1718"],["1719"],"'Select' is defined but never used.",["1720"],["1721"],["1722"],["1723"],["1724"],"'getPrivilagesOptions' is defined but never used.","'getCompaniesOptions' is defined but never used.","'getBranchesOptions' is defined but never used.","'selectedCompany' is assigned a value but never used.",["1725"],["1726"],["1727"],["1728"],"'preUpdateWardPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'preUpdateWard'. Either include it or remove the dependency array.",["1729"],"'handleValidSubmitPassword' is assigned a value but never used.","'closeModal' is assigned a value but never used.",["1730"],["1731"],["1732"],["1733"],["1734"],["1735"],["1736"],["1737"],["1738"],"'preUpdateLocalbodyPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'preUpdateLocalbody'. Either include it or remove the dependency array.",["1739"],["1740"],["1741"],["1742"],["1743"],"'preUpdateDistrictPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'preUpdateDistrict'. Either include it or remove the dependency array.",["1744"],{"desc":"1745","fix":"1746"},{"desc":"1747","fix":"1748"},[2342,2353],"'addedby'",[2549,2560],{"desc":"1749","fix":"1750"},{"desc":"1751","fix":"1752"},{"desc":"1753","fix":"1754"},{"desc":"1755","fix":"1756"},{"desc":"1757","fix":"1758"},{"desc":"1759","fix":"1760"},{"desc":"1761","fix":"1762"},[6681,6681]," rel=\"noreferrer\"",[5758,5758],[4611,4611],{"desc":"1747","fix":"1763"},{"desc":"1749","fix":"1764"},{"desc":"1751","fix":"1765"},{"desc":"1753","fix":"1766"},{"desc":"1755","fix":"1767"},{"desc":"1757","fix":"1768"},{"desc":"1747","fix":"1769"},{"desc":"1749","fix":"1770"},{"desc":"1751","fix":"1771"},{"desc":"1753","fix":"1772"},{"desc":"1755","fix":"1773"},{"desc":"1747","fix":"1774"},{"desc":"1749","fix":"1775"},{"desc":"1751","fix":"1776"},{"desc":"1753","fix":"1777"},{"desc":"1755","fix":"1778"},[666,666],{"desc":"1747","fix":"1779"},{"desc":"1749","fix":"1780"},{"desc":"1751","fix":"1781"},{"desc":"1753","fix":"1782"},{"desc":"1755","fix":"1783"},{"desc":"1747","fix":"1784"},{"desc":"1749","fix":"1785"},{"desc":"1751","fix":"1786"},{"desc":"1753","fix":"1787"},{"desc":"1755","fix":"1788"},{"desc":"1747","fix":"1789"},{"desc":"1749","fix":"1790"},{"desc":"1751","fix":"1791"},{"desc":"1753","fix":"1792"},{"desc":"1755","fix":"1793"},{"desc":"1747","fix":"1794"},{"desc":"1749","fix":"1795"},{"desc":"1751","fix":"1796"},{"desc":"1753","fix":"1797"},{"desc":"1755","fix":"1798"},{"desc":"1747","fix":"1799"},{"desc":"1749","fix":"1800"},{"desc":"1751","fix":"1801"},{"desc":"1753","fix":"1802"},{"desc":"1755","fix":"1803"},{"desc":"1747","fix":"1804"},{"desc":"1749","fix":"1805"},{"desc":"1751","fix":"1806"},{"desc":"1753","fix":"1807"},{"desc":"1755","fix":"1808"},{"desc":"1747","fix":"1809"},{"desc":"1749","fix":"1810"},{"desc":"1751","fix":"1811"},{"desc":"1753","fix":"1812"},{"desc":"1755","fix":"1813"},{"desc":"1747","fix":"1814"},{"desc":"1749","fix":"1815"},{"desc":"1751","fix":"1816"},{"desc":"1753","fix":"1817"},{"desc":"1755","fix":"1818"},{"desc":"1747","fix":"1819"},{"desc":"1749","fix":"1820"},{"desc":"1751","fix":"1821"},{"desc":"1753","fix":"1822"},{"desc":"1755","fix":"1823"},{"desc":"1747","fix":"1824"},{"desc":"1749","fix":"1825"},{"desc":"1751","fix":"1826"},{"desc":"1753","fix":"1827"},{"desc":"1755","fix":"1828"},{"desc":"1747","fix":"1829"},{"desc":"1830","fix":"1831"},{"desc":"1832","fix":"1833"},{"desc":"1834","fix":"1835"},{"desc":"1836","fix":"1837"},{"desc":"1747","fix":"1838"},{"desc":"1749","fix":"1839"},{"desc":"1751","fix":"1840"},{"desc":"1753","fix":"1841"},{"desc":"1755","fix":"1842"},{"desc":"1747","fix":"1843"},{"desc":"1844","fix":"1845"},{"desc":"1846","fix":"1847"},{"desc":"1848","fix":"1849"},{"desc":"1850","fix":"1851"},{"desc":"1747","fix":"1852"},{"desc":"1853","fix":"1854"},{"desc":"1855","fix":"1856"},{"desc":"1857","fix":"1858"},{"desc":"1859","fix":"1860"},"Update the dependencies array to be: [props.location]",{"range":"1861","text":"1862"},"Update the dependencies array to be: [dispatch]",{"range":"1863","text":"1864"},"Update the dependencies array to be: [dispatch, selectedCompany]",{"range":"1865","text":"1866"},"Update the dependencies array to be: [addUserResponse, error.data.message]",{"range":"1867","text":"1868"},"Update the dependencies array to be: [deleteUserResponse, error.data.message]",{"range":"1869","text":"1870"},"Update the dependencies array to be: [error.data.message, updateUserResponse]",{"range":"1871","text":"1872"},"Update the dependencies array to be: [preUpdateUser, users]",{"range":"1873","text":"1874"},"Update the dependencies array to be: [props]",{"range":"1875","text":"1876"},"Update the dependencies array to be: [error.data.message, loginResponse]",{"range":"1877","text":"1878"},{"range":"1879","text":"1864"},{"range":"1880","text":"1866"},{"range":"1881","text":"1868"},{"range":"1882","text":"1870"},{"range":"1883","text":"1872"},{"range":"1884","text":"1874"},{"range":"1885","text":"1864"},{"range":"1886","text":"1866"},{"range":"1887","text":"1868"},{"range":"1888","text":"1870"},{"range":"1889","text":"1872"},{"range":"1890","text":"1864"},{"range":"1891","text":"1866"},{"range":"1892","text":"1868"},{"range":"1893","text":"1870"},{"range":"1894","text":"1872"},{"range":"1895","text":"1864"},{"range":"1896","text":"1866"},{"range":"1897","text":"1868"},{"range":"1898","text":"1870"},{"range":"1899","text":"1872"},{"range":"1900","text":"1864"},{"range":"1901","text":"1866"},{"range":"1902","text":"1868"},{"range":"1903","text":"1870"},{"range":"1904","text":"1872"},{"range":"1905","text":"1864"},{"range":"1906","text":"1866"},{"range":"1907","text":"1868"},{"range":"1908","text":"1870"},{"range":"1909","text":"1872"},{"range":"1910","text":"1864"},{"range":"1911","text":"1866"},{"range":"1912","text":"1868"},{"range":"1913","text":"1870"},{"range":"1914","text":"1872"},{"range":"1915","text":"1864"},{"range":"1916","text":"1866"},{"range":"1917","text":"1868"},{"range":"1918","text":"1870"},{"range":"1919","text":"1872"},{"range":"1920","text":"1864"},{"range":"1921","text":"1866"},{"range":"1922","text":"1868"},{"range":"1923","text":"1870"},{"range":"1924","text":"1872"},{"range":"1925","text":"1864"},{"range":"1926","text":"1866"},{"range":"1927","text":"1868"},{"range":"1928","text":"1870"},{"range":"1929","text":"1872"},{"range":"1930","text":"1864"},{"range":"1931","text":"1866"},{"range":"1932","text":"1868"},{"range":"1933","text":"1870"},{"range":"1934","text":"1872"},{"range":"1935","text":"1864"},{"range":"1936","text":"1866"},{"range":"1937","text":"1868"},{"range":"1938","text":"1870"},{"range":"1939","text":"1872"},{"range":"1940","text":"1864"},{"range":"1941","text":"1866"},{"range":"1942","text":"1868"},{"range":"1943","text":"1870"},{"range":"1944","text":"1872"},{"range":"1945","text":"1864"},"Update the dependencies array to be: [addWardResponse, error.data.message]",{"range":"1946","text":"1947"},"Update the dependencies array to be: [deleteWardResponse, error.data.message]",{"range":"1948","text":"1949"},"Update the dependencies array to be: [error.data.message, updateWardResponse]",{"range":"1950","text":"1951"},"Update the dependencies array to be: [preUpdateWard, wards]",{"range":"1952","text":"1953"},{"range":"1954","text":"1864"},{"range":"1955","text":"1866"},{"range":"1956","text":"1868"},{"range":"1957","text":"1870"},{"range":"1958","text":"1872"},{"range":"1959","text":"1864"},"Update the dependencies array to be: [addLocalbodyResponse, error.data.message]",{"range":"1960","text":"1961"},"Update the dependencies array to be: [deleteLocalbodyResponse, error.data.message]",{"range":"1962","text":"1963"},"Update the dependencies array to be: [error.data.message, updateLocalbodyResponse]",{"range":"1964","text":"1965"},"Update the dependencies array to be: [localbodies, preUpdateLocalbody]",{"range":"1966","text":"1967"},{"range":"1968","text":"1864"},"Update the dependencies array to be: [addDistrictResponse, error.data.message]",{"range":"1969","text":"1970"},"Update the dependencies array to be: [deleteDistrictResponse, error.data.message]",{"range":"1971","text":"1972"},"Update the dependencies array to be: [error.data.message, updateDistrictResponse]",{"range":"1973","text":"1974"},"Update the dependencies array to be: [districts, preUpdateDistrict]",{"range":"1975","text":"1976"},[1351,1353],"[props.location]",[2293,2295],"[dispatch]",[2730,2747],"[dispatch, selectedCompany]",[3099,3116],"[addUserResponse, error.data.message]",[3417,3437],"[deleteUserResponse, error.data.message]",[3796,3816],"[error.data.message, updateUserResponse]",[5959,5966],"[preUpdateUser, users]",[1010,1012],"[props]",[1536,1551],"[error.data.message, loginResponse]",[3954,3956],[4092,4109],[4727,4744],[5045,5065],[5424,5444],[9052,9059],[2528,2530],[2666,2683],[3073,3090],[3391,3411],[3770,3790],[2523,2525],[2661,2678],[3068,3085],[3386,3406],[3765,3785],[2528,2530],[2666,2683],[3073,3090],[3391,3411],[3770,3790],[2630,2632],[2768,2785],[3175,3192],[3493,3513],[3872,3892],[2528,2530],[2666,2683],[3073,3090],[3391,3411],[3770,3790],[2559,2561],[2697,2714],[3104,3121],[3422,3442],[3801,3821],[2523,2525],[2661,2678],[3068,3085],[3386,3406],[3765,3785],[2530,2532],[2668,2685],[3075,3092],[3393,3413],[3772,3792],[2531,2533],[2669,2686],[3076,3093],[3394,3414],[3773,3793],[2520,2522],[2658,2675],[3065,3082],[3383,3403],[3762,3782],[2529,2531],[2667,2684],[3074,3091],[3392,3412],[3771,3791],[2526,2528],[2664,2681],[3071,3088],[3389,3409],[3768,3788],[1868,1870],[2228,2245],"[addWardResponse, error.data.message]",[2546,2566],"[deleteWardResponse, error.data.message]",[2925,2945],"[error.data.message, updateWardResponse]",[4626,4633],"[preUpdateWard, wards]",[2521,2523],[2659,2676],[3066,3083],[3384,3404],[3763,3783],[1974,1976],[2354,2376],"[addLocalbodyResponse, error.data.message]",[2702,2727],"[deleteLocalbodyResponse, error.data.message]",[3111,3136],"[error.data.message, updateLocalbodyResponse]",[4890,4903],"[localbodies, preUpdateLocalbody]",[1948,1950],[2324,2345],"[addDistrictResponse, error.data.message]",[2666,2690],"[deleteDistrictResponse, error.data.message]",[3069,3093],"[error.data.message, updateDistrictResponse]",[4822,4833],"[districts, preUpdateDistrict]"]